// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Cash_balance
///
/// A customer's `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.
public struct CashBalance: Codable {
    /// A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var available: [String: Int]?
    /// The ID of the customer whose cash balance this object represents.
    public var customer: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// CustomerBalanceCustomerBalanceSettings
    public var settings: CustomerBalanceCustomerBalanceSettings

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case cashBalance = "cash_balance"
    }

    public init(available: [String: Int]? = nil, customer: String, isLivemode: Bool, object: Object, settings: CustomerBalanceCustomerBalanceSettings) {
        self.available = available
        self.customer = customer
        self.isLivemode = isLivemode
        self.object = object
        self.settings = settings
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.available = try values.decodeIfPresent([String: Int].self, forKey: "available")
        self.customer = try values.decode(String.self, forKey: "customer")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.object = try values.decode(Object.self, forKey: "object")
        self.settings = try values.decode(CustomerBalanceCustomerBalanceSettings.self, forKey: "settings")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(available, forKey: "available")
        try values.encode(customer, forKey: "customer")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(object, forKey: "object")
        try values.encode(settings, forKey: "settings")
    }
}
