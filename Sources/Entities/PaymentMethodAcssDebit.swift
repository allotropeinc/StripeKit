// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Payment_method_acss_debit
public struct PaymentMethodAcssDebit: Codable {
    /// Name of the bank associated with the bank account.
    public var bankName: String?
    /// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    public var fingerprint: String?
    /// Institution number of the bank account.
    public var institutionNumber: String?
    /// Last four digits of the bank account number.
    public var last4: String?
    /// Transit number of the bank account.
    public var transitNumber: String?

    public init(bankName: String? = nil, fingerprint: String? = nil, institutionNumber: String? = nil, last4: String? = nil, transitNumber: String? = nil) {
        self.bankName = bankName
        self.fingerprint = fingerprint
        self.institutionNumber = institutionNumber
        self.last4 = last4
        self.transitNumber = transitNumber
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.bankName = try values.decodeIfPresent(String.self, forKey: "bank_name")
        self.fingerprint = try values.decodeIfPresent(String.self, forKey: "fingerprint")
        self.institutionNumber = try values.decodeIfPresent(String.self, forKey: "institution_number")
        self.last4 = try values.decodeIfPresent(String.self, forKey: "last4")
        self.transitNumber = try values.decodeIfPresent(String.self, forKey: "transit_number")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(bankName, forKey: "bank_name")
        try values.encodeIfPresent(fingerprint, forKey: "fingerprint")
        try values.encodeIfPresent(institutionNumber, forKey: "institution_number")
        try values.encodeIfPresent(last4, forKey: "last4")
        try values.encodeIfPresent(transitNumber, forKey: "transit_number")
    }
}
