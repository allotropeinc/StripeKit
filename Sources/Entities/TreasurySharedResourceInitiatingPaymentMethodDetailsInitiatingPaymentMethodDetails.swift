// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails: Codable {
    /// Set when `type` is `balance`.
    public var balance: Balance?
    /// TreasurySharedResourceBillingDetails
    public var billingDetails: TreasurySharedResourceBillingDetails
    /// Received_payment_method_details_financial_account
    public var financialAccount: ReceivedPaymentMethodDetailsFinancialAccount?
    /// Set when `type` is `issuing_card`. This is an [Issuing Card](https://stripe.com/docs/api#issuing_cards) ID.
    public var issuingCard: String?
    /// Polymorphic type matching the originating money movement's source. This can be an external account, a Stripe balance, or a FinancialAccount.
    public var type: `Type`
    /// TreasurySharedResourceInitiatingPaymentMethodDetailsUSBankAccount
    public var usBankAccount: TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount?

    /// Set when `type` is `balance`.
    public enum Balance: String, Codable, CaseIterable {
        case payments
    }

    /// Polymorphic type matching the originating money movement's source. This can be an external account, a Stripe balance, or a FinancialAccount.
    public enum `Type`: String, Codable, CaseIterable {
        case balance
        case financialAccount = "financial_account"
        case issuingCard = "issuing_card"
        case stripe
        case usBankAccount = "us_bank_account"
    }

    public init(balance: Balance? = nil, billingDetails: TreasurySharedResourceBillingDetails, financialAccount: ReceivedPaymentMethodDetailsFinancialAccount? = nil, issuingCard: String? = nil, type: `Type`, usBankAccount: TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount? = nil) {
        self.balance = balance
        self.billingDetails = billingDetails
        self.financialAccount = financialAccount
        self.issuingCard = issuingCard
        self.type = type
        self.usBankAccount = usBankAccount
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.balance = try values.decodeIfPresent(Balance.self, forKey: "balance")
        self.billingDetails = try values.decode(TreasurySharedResourceBillingDetails.self, forKey: "billing_details")
        self.financialAccount = try values.decodeIfPresent(ReceivedPaymentMethodDetailsFinancialAccount.self, forKey: "financial_account")
        self.issuingCard = try values.decodeIfPresent(String.self, forKey: "issuing_card")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.usBankAccount = try values.decodeIfPresent(TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount.self, forKey: "us_bank_account")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(balance, forKey: "balance")
        try values.encode(billingDetails, forKey: "billing_details")
        try values.encodeIfPresent(financialAccount, forKey: "financial_account")
        try values.encodeIfPresent(issuingCard, forKey: "issuing_card")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(usBankAccount, forKey: "us_bank_account")
    }
}
