// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Result from an id_number check
public struct GelatoIDNumberReport: Codable {
    /// Date of birth.
    public var dob: GelatoDataIDNumberReportDate?
    /// Details on the verification error. Present when status is `unverified`.
    public var error: GelatoIDNumberReportError?
    /// First name.
    public var firstName: String?
    /// ID number.
    public var idNumber: String?
    /// Type of ID number.
    public var idNumberType: IDNumberType?
    /// Last name.
    public var lastName: String?
    /// Status of this `id_number` check.
    public var status: Status

    /// Type of ID number.
    public enum IDNumberType: String, Codable, CaseIterable {
        case brCpf = "br_cpf"
        case sgNric = "sg_nric"
        case usSsn = "us_ssn"
    }

    /// Status of this `id_number` check.
    public enum Status: String, Codable, CaseIterable {
        case unverified
        case verified
    }

    public init(dob: GelatoDataIDNumberReportDate? = nil, error: GelatoIDNumberReportError? = nil, firstName: String? = nil, idNumber: String? = nil, idNumberType: IDNumberType? = nil, lastName: String? = nil, status: Status) {
        self.dob = dob
        self.error = error
        self.firstName = firstName
        self.idNumber = idNumber
        self.idNumberType = idNumberType
        self.lastName = lastName
        self.status = status
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.dob = try values.decodeIfPresent(GelatoDataIDNumberReportDate.self, forKey: "dob")
        self.error = try values.decodeIfPresent(GelatoIDNumberReportError.self, forKey: "error")
        self.firstName = try values.decodeIfPresent(String.self, forKey: "first_name")
        self.idNumber = try values.decodeIfPresent(String.self, forKey: "id_number")
        self.idNumberType = try values.decodeIfPresent(IDNumberType.self, forKey: "id_number_type")
        self.lastName = try values.decodeIfPresent(String.self, forKey: "last_name")
        self.status = try values.decode(Status.self, forKey: "status")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(dob, forKey: "dob")
        try values.encodeIfPresent(error, forKey: "error")
        try values.encodeIfPresent(firstName, forKey: "first_name")
        try values.encodeIfPresent(idNumber, forKey: "id_number")
        try values.encodeIfPresent(idNumberType, forKey: "id_number_type")
        try values.encodeIfPresent(lastName, forKey: "last_name")
        try values.encode(status, forKey: "status")
    }
}
