// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct InvoiceSettingCustomerSetting: Codable {
    /// Default custom fields to be displayed on invoices for this customer.
    public var customFields: [InvoiceSettingCustomField]?
    /// ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices.
    public var defaultPaymentMethod: DefaultPaymentMethod?
    /// Default footer to be displayed on invoices for this customer.
    public var footer: String?
    /// Default options for invoice PDF rendering for this customer.
    public var renderingOptions: InvoiceSettingRenderingOptions?

    /// ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices.
    public struct DefaultPaymentMethod: Codable {
        public var string: String?
        /// PaymentMethod objects represent your customer's payment instruments.
        /// You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
        /// Customer objects to store instrument details for future payments.
        /// 
        /// Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    public init(customFields: [InvoiceSettingCustomField]? = nil, defaultPaymentMethod: DefaultPaymentMethod? = nil, footer: String? = nil, renderingOptions: InvoiceSettingRenderingOptions? = nil) {
        self.customFields = customFields
        self.defaultPaymentMethod = defaultPaymentMethod
        self.footer = footer
        self.renderingOptions = renderingOptions
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.customFields = try values.decodeIfPresent([InvoiceSettingCustomField].self, forKey: "custom_fields")
        self.defaultPaymentMethod = try values.decodeIfPresent(DefaultPaymentMethod.self, forKey: "default_payment_method")
        self.footer = try values.decodeIfPresent(String.self, forKey: "footer")
        self.renderingOptions = try values.decodeIfPresent(InvoiceSettingRenderingOptions.self, forKey: "rendering_options")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(customFields, forKey: "custom_fields")
        try values.encodeIfPresent(defaultPaymentMethod, forKey: "default_payment_method")
        try values.encodeIfPresent(footer, forKey: "footer")
        try values.encodeIfPresent(renderingOptions, forKey: "rendering_options")
    }
}
