// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
/// receive a `sigma.scheduled_query_run.created` webhook each time the query
/// runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
/// retrieve the query results.
public struct ScheduledQueryRun: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// When the query was run, Sigma contained a snapshot of your Stripe data at this time.
    public var dataLoadTime: Int
    /// SigmaScheduledQueryRunError
    public var error: SigmaScheduledQueryRunError?
    /// The file object representing the results of the query.
    public var file: File?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Time at which the result expires and is no longer available for download.
    public var resultAvailableUntil: Int
    /// SQL for the query.
    public var sql: String
    /// The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.
    public var status: String
    /// Title of the query.
    public var title: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case scheduledQueryRun = "scheduled_query_run"
    }

    public init(created: Int, dataLoadTime: Int, error: SigmaScheduledQueryRunError? = nil, file: File? = nil, id: String, isLivemode: Bool, object: Object, resultAvailableUntil: Int, sql: String, status: String, title: String) {
        self.created = created
        self.dataLoadTime = dataLoadTime
        self.error = error
        self.file = file
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.resultAvailableUntil = resultAvailableUntil
        self.sql = sql
        self.status = status
        self.title = title
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.created = try values.decode(Int.self, forKey: "created")
        self.dataLoadTime = try values.decode(Int.self, forKey: "data_load_time")
        self.error = try values.decodeIfPresent(SigmaScheduledQueryRunError.self, forKey: "error")
        self.file = try values.decodeIfPresent(File.self, forKey: "file")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.object = try values.decode(Object.self, forKey: "object")
        self.resultAvailableUntil = try values.decode(Int.self, forKey: "result_available_until")
        self.sql = try values.decode(String.self, forKey: "sql")
        self.status = try values.decode(String.self, forKey: "status")
        self.title = try values.decode(String.self, forKey: "title")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(created, forKey: "created")
        try values.encode(dataLoadTime, forKey: "data_load_time")
        try values.encodeIfPresent(error, forKey: "error")
        try values.encodeIfPresent(file, forKey: "file")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(object, forKey: "object")
        try values.encode(resultAvailableUntil, forKey: "result_available_until")
        try values.encode(sql, forKey: "sql")
        try values.encode(status, forKey: "status")
        try values.encode(title, forKey: "title")
    }
}
