// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Payment_method_details_card_wallet
public struct PaymentMethodDetailsCardWallet: Codable {
    /// Payment_method_details_card_wallet_amex_express_checkout
    public var amexExpressCheckout: [String: AnyJSON]?
    /// Payment_method_details_card_wallet_apple_pay
    public var applePay: [String: AnyJSON]?
    /// (For tokenized numbers only.) The last four digits of the device account number.
    public var dynamicLast4: String?
    /// Payment_method_details_card_wallet_google_pay
    public var googlePay: [String: AnyJSON]?
    /// Payment_method_details_card_wallet_masterpass
    public var masterpass: PaymentMethodDetailsCardWalletMasterpass?
    /// Payment_method_details_card_wallet_samsung_pay
    public var samsungPay: [String: AnyJSON]?
    /// The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
    public var type: `Type`
    /// Payment_method_details_card_wallet_visa_checkout
    public var visaCheckout: PaymentMethodDetailsCardWalletVisaCheckout?

    /// The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
    public enum `Type`: String, Codable, CaseIterable {
        case amexExpressCheckout = "amex_express_checkout"
        case applePay = "apple_pay"
        case googlePay = "google_pay"
        case masterpass
        case samsungPay = "samsung_pay"
        case visaCheckout = "visa_checkout"
    }

    public init(amexExpressCheckout: [String: AnyJSON]? = nil, applePay: [String: AnyJSON]? = nil, dynamicLast4: String? = nil, googlePay: [String: AnyJSON]? = nil, masterpass: PaymentMethodDetailsCardWalletMasterpass? = nil, samsungPay: [String: AnyJSON]? = nil, type: `Type`, visaCheckout: PaymentMethodDetailsCardWalletVisaCheckout? = nil) {
        self.amexExpressCheckout = amexExpressCheckout
        self.applePay = applePay
        self.dynamicLast4 = dynamicLast4
        self.googlePay = googlePay
        self.masterpass = masterpass
        self.samsungPay = samsungPay
        self.type = type
        self.visaCheckout = visaCheckout
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amexExpressCheckout = try values.decodeIfPresent([String: AnyJSON].self, forKey: "amex_express_checkout")
        self.applePay = try values.decodeIfPresent([String: AnyJSON].self, forKey: "apple_pay")
        self.dynamicLast4 = try values.decodeIfPresent(String.self, forKey: "dynamic_last4")
        self.googlePay = try values.decodeIfPresent([String: AnyJSON].self, forKey: "google_pay")
        self.masterpass = try values.decodeIfPresent(PaymentMethodDetailsCardWalletMasterpass.self, forKey: "masterpass")
        self.samsungPay = try values.decodeIfPresent([String: AnyJSON].self, forKey: "samsung_pay")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.visaCheckout = try values.decodeIfPresent(PaymentMethodDetailsCardWalletVisaCheckout.self, forKey: "visa_checkout")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(amexExpressCheckout, forKey: "amex_express_checkout")
        try values.encodeIfPresent(applePay, forKey: "apple_pay")
        try values.encodeIfPresent(dynamicLast4, forKey: "dynamic_last4")
        try values.encodeIfPresent(googlePay, forKey: "google_pay")
        try values.encodeIfPresent(masterpass, forKey: "masterpass")
        try values.encodeIfPresent(samsungPay, forKey: "samsung_pay")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(visaCheckout, forKey: "visa_checkout")
    }
}
