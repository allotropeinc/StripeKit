// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Invoice_mandate_options_card
public struct InvoiceMandateOptionsCard: Codable {
    /// Amount to be charged for future payments.
    public var amount: Int?
    /// One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
    public var amountType: AmountType?
    /// A description of the mandate or subscription that is meant to be displayed to the customer.
    public var description: String?

    /// One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
    public enum AmountType: String, Codable, CaseIterable {
        case fixed
        case maximum
    }

    public init(amount: Int? = nil, amountType: AmountType? = nil, description: String? = nil) {
        self.amount = amount
        self.amountType = amountType
        self.description = description
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amount = try values.decodeIfPresent(Int.self, forKey: "amount")
        self.amountType = try values.decodeIfPresent(AmountType.self, forKey: "amount_type")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(amount, forKey: "amount")
        try values.encodeIfPresent(amountType, forKey: "amount_type")
        try values.encodeIfPresent(description, forKey: "description")
    }
}
