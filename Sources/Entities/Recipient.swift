// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// TransferRecipient
///
/// With `Recipient` objects, you can transfer money from your Stripe account to a
/// third-party bank account or debit card. The API allows you to create, delete,
/// and update your recipients. You can retrieve individual recipients as well as
/// a list of all your recipients.
/// 
/// **`Recipient` objects have been deprecated in favor of
/// [Connect](https://stripe.com/docs/connect), specifically Connect's much more powerful
/// [Account objects](https://stripe.com/docs/api#account). Stripe accounts that don't already use
/// recipients can no longer begin doing so. Please use `Account` objects
/// instead.**
public struct Recipient: Codable {
    /// Hash describing the current account on the recipient, if there is one.
    public var activeAccount: BankAccount?
    /// CardList
    public var cards: Cards?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The default card to use for creating transfers to this recipient.
    public var defaultCard: DefaultCard?
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    public var email: String?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead.
    public var migratedTo: MigratedTo?
    /// Full, legal name of the recipient.
    public var name: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    public var rolledBackFrom: RolledBackFrom?
    /// Type of the recipient, one of `individual` or `corporation`.
    public var type: String

    /// CardList
    public struct Cards: Codable {
        public var data: [Card]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [Card], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.data = try values.decode([Card].self, forKey: "data")
            self.hasMore = try values.decode(Bool.self, forKey: "has_more")
            self.object = try values.decode(Object.self, forKey: "object")
            self.url = try values.decode(String.self, forKey: "url")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(data, forKey: "data")
            try values.encode(hasMore, forKey: "has_more")
            try values.encode(object, forKey: "object")
            try values.encode(url, forKey: "url")
        }
    }

    /// The default card to use for creating transfers to this recipient.
    public struct DefaultCard: Codable {
        public var string: String?
        /// You can store multiple cards on a customer in order to charge the customer
        /// later. You can also store multiple debit cards on a recipient in order to
        /// transfer to those cards later.
        /// 
        /// Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
        public var card: Card?

        public init(string: String? = nil, card: Card? = nil) {
            self.string = string
            self.card = card
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.card = try? container.decode(Card.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = card { try container.encode(value) }
        }
    }

    /// The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead.
    public struct MigratedTo: Codable {
        public var string: String?
        /// This is an object representing a Stripe account. You can retrieve it to see
        /// properties on the account like its current e-mail address or if the account is
        /// enabled yet to make live charges.
        /// 
        /// Some properties, marked below, are available only to platforms that want to
        /// [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case recipient
    }

    public struct RolledBackFrom: Codable {
        public var string: String?
        /// This is an object representing a Stripe account. You can retrieve it to see
        /// properties on the account like its current e-mail address or if the account is
        /// enabled yet to make live charges.
        /// 
        /// Some properties, marked below, are available only to platforms that want to
        /// [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    public init(activeAccount: BankAccount? = nil, cards: Cards? = nil, created: Int, defaultCard: DefaultCard? = nil, description: String? = nil, email: String? = nil, id: String, isLivemode: Bool, metadata: [String: String], migratedTo: MigratedTo? = nil, name: String? = nil, object: Object, rolledBackFrom: RolledBackFrom? = nil, type: String) {
        self.activeAccount = activeAccount
        self.cards = cards
        self.created = created
        self.defaultCard = defaultCard
        self.description = description
        self.email = email
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.migratedTo = migratedTo
        self.name = name
        self.object = object
        self.rolledBackFrom = rolledBackFrom
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.activeAccount = try values.decodeIfPresent(BankAccount.self, forKey: "active_account")
        self.cards = try values.decodeIfPresent(Cards.self, forKey: "cards")
        self.created = try values.decode(Int.self, forKey: "created")
        self.defaultCard = try values.decodeIfPresent(DefaultCard.self, forKey: "default_card")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.migratedTo = try values.decodeIfPresent(MigratedTo.self, forKey: "migrated_to")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.object = try values.decode(Object.self, forKey: "object")
        self.rolledBackFrom = try values.decodeIfPresent(RolledBackFrom.self, forKey: "rolled_back_from")
        self.type = try values.decode(String.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(activeAccount, forKey: "active_account")
        try values.encodeIfPresent(cards, forKey: "cards")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(defaultCard, forKey: "default_card")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(metadata, forKey: "metadata")
        try values.encodeIfPresent(migratedTo, forKey: "migrated_to")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(rolledBackFrom, forKey: "rolled_back_from")
        try values.encode(type, forKey: "type")
    }
}
