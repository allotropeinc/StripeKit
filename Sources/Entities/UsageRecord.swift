// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Usage records allow you to report customer usage and metrics to Stripe for
/// metered billing of subscription prices.
/// 
/// Related guide: [Metered Billing](https://stripe.com/docs/billing/subscriptions/metered-billing).
public struct UsageRecord: Codable {
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The usage quantity for the specified date.
    public var quantity: Int
    /// The ID of the subscription item this usage record contains data for.
    public var subscriptionItem: String
    /// The timestamp when this usage occurred.
    public var timestamp: Int

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case usageRecord = "usage_record"
    }

    public init(id: String, isLivemode: Bool, object: Object, quantity: Int, subscriptionItem: String, timestamp: Int) {
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.quantity = quantity
        self.subscriptionItem = subscriptionItem
        self.timestamp = timestamp
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.object = try values.decode(Object.self, forKey: "object")
        self.quantity = try values.decode(Int.self, forKey: "quantity")
        self.subscriptionItem = try values.decode(String.self, forKey: "subscription_item")
        self.timestamp = try values.decode(Int.self, forKey: "timestamp")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(object, forKey: "object")
        try values.encode(quantity, forKey: "quantity")
        try values.encode(subscriptionItem, forKey: "subscription_item")
        try values.encode(timestamp, forKey: "timestamp")
    }
}
