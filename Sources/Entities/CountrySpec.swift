// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Stripe needs to collect certain pieces of information about each account
/// created. These requirements can differ depending on the account's country. The
/// Country Specs API makes these rules available to your integration.
/// 
/// You can also view the information from this API call as [an online
/// guide](/docs/connect/required-verification-information).
public struct CountrySpec: Codable {
    /// The default currency for this country. This applies to both payment methods and bank accounts.
    public var defaultCurrency: String
    /// Unique identifier for the object. Represented as the ISO country code for this country.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Currencies that can be accepted in the specific country (for transfers).
    public var supportedBankAccountCurrencies: [String: [String]]
    /// Currencies that can be accepted in the specified country (for payments).
    public var supportedPaymentCurrencies: [String]
    /// Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).
    public var supportedPaymentMethods: [String]
    /// Countries that can accept transfers from the specified country.
    public var supportedTransferCountries: [String]
    /// CountrySpecVerificationFields
    public var verificationFields: CountrySpecVerificationFields

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case countrySpec = "country_spec"
    }

    public init(defaultCurrency: String, id: String, object: Object, supportedBankAccountCurrencies: [String: [String]], supportedPaymentCurrencies: [String], supportedPaymentMethods: [String], supportedTransferCountries: [String], verificationFields: CountrySpecVerificationFields) {
        self.defaultCurrency = defaultCurrency
        self.id = id
        self.object = object
        self.supportedBankAccountCurrencies = supportedBankAccountCurrencies
        self.supportedPaymentCurrencies = supportedPaymentCurrencies
        self.supportedPaymentMethods = supportedPaymentMethods
        self.supportedTransferCountries = supportedTransferCountries
        self.verificationFields = verificationFields
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.defaultCurrency = try values.decode(String.self, forKey: "default_currency")
        self.id = try values.decode(String.self, forKey: "id")
        self.object = try values.decode(Object.self, forKey: "object")
        self.supportedBankAccountCurrencies = try values.decode([String: [String]].self, forKey: "supported_bank_account_currencies")
        self.supportedPaymentCurrencies = try values.decode([String].self, forKey: "supported_payment_currencies")
        self.supportedPaymentMethods = try values.decode([String].self, forKey: "supported_payment_methods")
        self.supportedTransferCountries = try values.decode([String].self, forKey: "supported_transfer_countries")
        self.verificationFields = try values.decode(CountrySpecVerificationFields.self, forKey: "verification_fields")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(defaultCurrency, forKey: "default_currency")
        try values.encode(id, forKey: "id")
        try values.encode(object, forKey: "object")
        try values.encode(supportedBankAccountCurrencies, forKey: "supported_bank_account_currencies")
        try values.encode(supportedPaymentCurrencies, forKey: "supported_payment_currencies")
        try values.encode(supportedPaymentMethods, forKey: "supported_payment_methods")
        try values.encode(supportedTransferCountries, forKey: "supported_transfer_countries")
        try values.encode(verificationFields, forKey: "verification_fields")
    }
}
