// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Mandate_options_off_session_details_blik
public struct MandateOptionsOffSessionDetailsBlik: Codable {
    /// Amount of each recurring payment.
    public var amount: Int?
    /// Currency of each recurring payment.
    public var currency: String?
    /// Frequency interval of each recurring payment.
    public var interval: Interval?
    /// Frequency indicator of each recurring payment.
    public var intervalCount: Int?

    /// Frequency interval of each recurring payment.
    public enum Interval: String, Codable, CaseIterable {
        case day
        case month
        case week
        case year
    }

    public init(amount: Int? = nil, currency: String? = nil, interval: Interval? = nil, intervalCount: Int? = nil) {
        self.amount = amount
        self.currency = currency
        self.interval = interval
        self.intervalCount = intervalCount
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amount = try values.decodeIfPresent(Int.self, forKey: "amount")
        self.currency = try values.decodeIfPresent(String.self, forKey: "currency")
        self.interval = try values.decodeIfPresent(Interval.self, forKey: "interval")
        self.intervalCount = try values.decodeIfPresent(Int.self, forKey: "interval_count")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(amount, forKey: "amount")
        try values.encodeIfPresent(currency, forKey: "currency")
        try values.encodeIfPresent(interval, forKey: "interval")
        try values.encodeIfPresent(intervalCount, forKey: "interval_count")
    }
}
