// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SourceTypeKlarna: Codable {
    public var backgroundImageURL: String?
    public var clientToken: String?
    public var firstName: String?
    public var lastName: String?
    public var locale: String?
    public var logoURL: String?
    public var pageTitle: String?
    public var payLaterAssetURLsDescriptive: String?
    public var payLaterAssetURLsStandard: String?
    public var payLaterName: String?
    public var payLaterRedirectURL: String?
    public var payNowAssetURLsDescriptive: String?
    public var payNowAssetURLsStandard: String?
    public var payNowName: String?
    public var payNowRedirectURL: String?
    public var payOverTimeAssetURLsDescriptive: String?
    public var payOverTimeAssetURLsStandard: String?
    public var payOverTimeName: String?
    public var payOverTimeRedirectURL: String?
    public var paymentMethodCategories: String?
    public var purchaseCountry: String?
    public var purchaseType: String?
    public var redirectURL: String?
    public var shippingDelay: Int?
    public var shippingFirstName: String?
    public var shippingLastName: String?

    public init(backgroundImageURL: String? = nil, clientToken: String? = nil, firstName: String? = nil, lastName: String? = nil, locale: String? = nil, logoURL: String? = nil, pageTitle: String? = nil, payLaterAssetURLsDescriptive: String? = nil, payLaterAssetURLsStandard: String? = nil, payLaterName: String? = nil, payLaterRedirectURL: String? = nil, payNowAssetURLsDescriptive: String? = nil, payNowAssetURLsStandard: String? = nil, payNowName: String? = nil, payNowRedirectURL: String? = nil, payOverTimeAssetURLsDescriptive: String? = nil, payOverTimeAssetURLsStandard: String? = nil, payOverTimeName: String? = nil, payOverTimeRedirectURL: String? = nil, paymentMethodCategories: String? = nil, purchaseCountry: String? = nil, purchaseType: String? = nil, redirectURL: String? = nil, shippingDelay: Int? = nil, shippingFirstName: String? = nil, shippingLastName: String? = nil) {
        self.backgroundImageURL = backgroundImageURL
        self.clientToken = clientToken
        self.firstName = firstName
        self.lastName = lastName
        self.locale = locale
        self.logoURL = logoURL
        self.pageTitle = pageTitle
        self.payLaterAssetURLsDescriptive = payLaterAssetURLsDescriptive
        self.payLaterAssetURLsStandard = payLaterAssetURLsStandard
        self.payLaterName = payLaterName
        self.payLaterRedirectURL = payLaterRedirectURL
        self.payNowAssetURLsDescriptive = payNowAssetURLsDescriptive
        self.payNowAssetURLsStandard = payNowAssetURLsStandard
        self.payNowName = payNowName
        self.payNowRedirectURL = payNowRedirectURL
        self.payOverTimeAssetURLsDescriptive = payOverTimeAssetURLsDescriptive
        self.payOverTimeAssetURLsStandard = payOverTimeAssetURLsStandard
        self.payOverTimeName = payOverTimeName
        self.payOverTimeRedirectURL = payOverTimeRedirectURL
        self.paymentMethodCategories = paymentMethodCategories
        self.purchaseCountry = purchaseCountry
        self.purchaseType = purchaseType
        self.redirectURL = redirectURL
        self.shippingDelay = shippingDelay
        self.shippingFirstName = shippingFirstName
        self.shippingLastName = shippingLastName
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.backgroundImageURL = try values.decodeIfPresent(String.self, forKey: "background_image_url")
        self.clientToken = try values.decodeIfPresent(String.self, forKey: "client_token")
        self.firstName = try values.decodeIfPresent(String.self, forKey: "first_name")
        self.lastName = try values.decodeIfPresent(String.self, forKey: "last_name")
        self.locale = try values.decodeIfPresent(String.self, forKey: "locale")
        self.logoURL = try values.decodeIfPresent(String.self, forKey: "logo_url")
        self.pageTitle = try values.decodeIfPresent(String.self, forKey: "page_title")
        self.payLaterAssetURLsDescriptive = try values.decodeIfPresent(String.self, forKey: "pay_later_asset_urls_descriptive")
        self.payLaterAssetURLsStandard = try values.decodeIfPresent(String.self, forKey: "pay_later_asset_urls_standard")
        self.payLaterName = try values.decodeIfPresent(String.self, forKey: "pay_later_name")
        self.payLaterRedirectURL = try values.decodeIfPresent(String.self, forKey: "pay_later_redirect_url")
        self.payNowAssetURLsDescriptive = try values.decodeIfPresent(String.self, forKey: "pay_now_asset_urls_descriptive")
        self.payNowAssetURLsStandard = try values.decodeIfPresent(String.self, forKey: "pay_now_asset_urls_standard")
        self.payNowName = try values.decodeIfPresent(String.self, forKey: "pay_now_name")
        self.payNowRedirectURL = try values.decodeIfPresent(String.self, forKey: "pay_now_redirect_url")
        self.payOverTimeAssetURLsDescriptive = try values.decodeIfPresent(String.self, forKey: "pay_over_time_asset_urls_descriptive")
        self.payOverTimeAssetURLsStandard = try values.decodeIfPresent(String.self, forKey: "pay_over_time_asset_urls_standard")
        self.payOverTimeName = try values.decodeIfPresent(String.self, forKey: "pay_over_time_name")
        self.payOverTimeRedirectURL = try values.decodeIfPresent(String.self, forKey: "pay_over_time_redirect_url")
        self.paymentMethodCategories = try values.decodeIfPresent(String.self, forKey: "payment_method_categories")
        self.purchaseCountry = try values.decodeIfPresent(String.self, forKey: "purchase_country")
        self.purchaseType = try values.decodeIfPresent(String.self, forKey: "purchase_type")
        self.redirectURL = try values.decodeIfPresent(String.self, forKey: "redirect_url")
        self.shippingDelay = try values.decodeIfPresent(Int.self, forKey: "shipping_delay")
        self.shippingFirstName = try values.decodeIfPresent(String.self, forKey: "shipping_first_name")
        self.shippingLastName = try values.decodeIfPresent(String.self, forKey: "shipping_last_name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(backgroundImageURL, forKey: "background_image_url")
        try values.encodeIfPresent(clientToken, forKey: "client_token")
        try values.encodeIfPresent(firstName, forKey: "first_name")
        try values.encodeIfPresent(lastName, forKey: "last_name")
        try values.encodeIfPresent(locale, forKey: "locale")
        try values.encodeIfPresent(logoURL, forKey: "logo_url")
        try values.encodeIfPresent(pageTitle, forKey: "page_title")
        try values.encodeIfPresent(payLaterAssetURLsDescriptive, forKey: "pay_later_asset_urls_descriptive")
        try values.encodeIfPresent(payLaterAssetURLsStandard, forKey: "pay_later_asset_urls_standard")
        try values.encodeIfPresent(payLaterName, forKey: "pay_later_name")
        try values.encodeIfPresent(payLaterRedirectURL, forKey: "pay_later_redirect_url")
        try values.encodeIfPresent(payNowAssetURLsDescriptive, forKey: "pay_now_asset_urls_descriptive")
        try values.encodeIfPresent(payNowAssetURLsStandard, forKey: "pay_now_asset_urls_standard")
        try values.encodeIfPresent(payNowName, forKey: "pay_now_name")
        try values.encodeIfPresent(payNowRedirectURL, forKey: "pay_now_redirect_url")
        try values.encodeIfPresent(payOverTimeAssetURLsDescriptive, forKey: "pay_over_time_asset_urls_descriptive")
        try values.encodeIfPresent(payOverTimeAssetURLsStandard, forKey: "pay_over_time_asset_urls_standard")
        try values.encodeIfPresent(payOverTimeName, forKey: "pay_over_time_name")
        try values.encodeIfPresent(payOverTimeRedirectURL, forKey: "pay_over_time_redirect_url")
        try values.encodeIfPresent(paymentMethodCategories, forKey: "payment_method_categories")
        try values.encodeIfPresent(purchaseCountry, forKey: "purchase_country")
        try values.encodeIfPresent(purchaseType, forKey: "purchase_type")
        try values.encodeIfPresent(redirectURL, forKey: "redirect_url")
        try values.encodeIfPresent(shippingDelay, forKey: "shipping_delay")
        try values.encodeIfPresent(shippingFirstName, forKey: "shipping_first_name")
        try values.encodeIfPresent(shippingLastName, forKey: "shipping_last_name")
    }
}
