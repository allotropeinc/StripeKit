// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// `Exchange Rate` objects allow you to determine the rates that Stripe is
/// currently using to convert from one currency to another. Since this number is
/// variable throughout the day, there are various reasons why you might want to
/// know the current rate (for example, to dynamically price an item for a user
/// with a default payment in a foreign currency).
/// 
/// If you want a guarantee that the charge is made with a certain exchange rate
/// you expect is current, you can pass in `exchange_rate` to charges endpoints.
/// If the value is no longer up to date, the charge won't go through. Please
/// refer to our [Exchange Rates API](https://stripe.com/docs/exchange-rates) guide for more
/// details.
public struct ExchangeRate: Codable {
    /// Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency.
    public var rates: [String: Double]

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case exchangeRate = "exchange_rate"
    }

    public init(id: String, object: Object, rates: [String: Double]) {
        self.id = id
        self.object = object
        self.rates = rates
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.object = try values.decode(Object.self, forKey: "object")
        self.rates = try values.decode([String: Double].self, forKey: "rates")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(object, forKey: "object")
        try values.encode(rates, forKey: "rates")
    }
}
