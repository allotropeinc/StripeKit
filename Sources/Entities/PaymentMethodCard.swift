// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Payment_method_card
public struct PaymentMethodCard: Codable {
    /// Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    public var brand: String
    /// Checks on Card address and CVC if provided.
    public var checks: PaymentMethodCardChecks?
    /// Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    public var country: String?
    /// Two-digit number representing the card's expiration month.
    public var expMonth: Int
    /// Four-digit number representing the card's expiration year.
    public var expYear: Int
    /// Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
    /// 
    /// *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
    public var fingerprint: String?
    /// Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    public var funding: String
    /// Details of the original PaymentMethod that created this object.
    public var generatedFrom: PaymentMethodCardGeneratedCard?
    /// The last four digits of the card.
    public var last4: String
    /// Contains information about card networks that can be used to process the payment.
    public var networks: Networks?
    /// Contains details on how this Card maybe be used for 3D Secure authentication.
    public var threeDSecureUsage: ThreeDSecureUsage?
    /// If this Card is part of a card wallet, this contains the details of the card wallet.
    public var wallet: PaymentMethodCardWallet?

    public init(brand: String, checks: PaymentMethodCardChecks? = nil, country: String? = nil, expMonth: Int, expYear: Int, fingerprint: String? = nil, funding: String, generatedFrom: PaymentMethodCardGeneratedCard? = nil, last4: String, networks: Networks? = nil, threeDSecureUsage: ThreeDSecureUsage? = nil, wallet: PaymentMethodCardWallet? = nil) {
        self.brand = brand
        self.checks = checks
        self.country = country
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.generatedFrom = generatedFrom
        self.last4 = last4
        self.networks = networks
        self.threeDSecureUsage = threeDSecureUsage
        self.wallet = wallet
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.brand = try values.decode(String.self, forKey: "brand")
        self.checks = try values.decodeIfPresent(PaymentMethodCardChecks.self, forKey: "checks")
        self.country = try values.decodeIfPresent(String.self, forKey: "country")
        self.expMonth = try values.decode(Int.self, forKey: "exp_month")
        self.expYear = try values.decode(Int.self, forKey: "exp_year")
        self.fingerprint = try values.decodeIfPresent(String.self, forKey: "fingerprint")
        self.funding = try values.decode(String.self, forKey: "funding")
        self.generatedFrom = try values.decodeIfPresent(PaymentMethodCardGeneratedCard.self, forKey: "generated_from")
        self.last4 = try values.decode(String.self, forKey: "last4")
        self.networks = try values.decodeIfPresent(Networks.self, forKey: "networks")
        self.threeDSecureUsage = try values.decodeIfPresent(ThreeDSecureUsage.self, forKey: "three_d_secure_usage")
        self.wallet = try values.decodeIfPresent(PaymentMethodCardWallet.self, forKey: "wallet")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(brand, forKey: "brand")
        try values.encodeIfPresent(checks, forKey: "checks")
        try values.encodeIfPresent(country, forKey: "country")
        try values.encode(expMonth, forKey: "exp_month")
        try values.encode(expYear, forKey: "exp_year")
        try values.encodeIfPresent(fingerprint, forKey: "fingerprint")
        try values.encode(funding, forKey: "funding")
        try values.encodeIfPresent(generatedFrom, forKey: "generated_from")
        try values.encode(last4, forKey: "last4")
        try values.encodeIfPresent(networks, forKey: "networks")
        try values.encodeIfPresent(threeDSecureUsage, forKey: "three_d_secure_usage")
        try values.encodeIfPresent(wallet, forKey: "wallet")
    }
}
