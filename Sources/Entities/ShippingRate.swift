// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Shipping rates describe the price of shipping presented to your customers and can be
/// applied to [Checkout Sessions](https://stripe.com/docs/payments/checkout/shipping)
/// and [Orders](https://stripe.com/docs/orders/shipping) to collect shipping costs.
public struct ShippingRate: Codable {
    /// Whether the shipping rate can be used for new purchases. Defaults to `true`.
    public var isActive: Bool
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
    public var deliveryEstimate: ShippingRateDeliveryEstimate?
    /// The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
    public var displayName: String?
    /// ShippingRateFixedAmount
    public var fixedAmount: ShippingRateFixedAmount?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
    public var taxBehavior: TaxBehavior?
    /// A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`.
    public var taxCode: TaxCode?
    /// The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
    public var type: `Type`

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case shippingRate = "shipping_rate"
    }

    /// Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
    public enum TaxBehavior: String, Codable, CaseIterable {
        case exclusive
        case inclusive
        case unspecified
    }

    /// A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`.
    public final class TaxCode: Codable {
        public let string: String?
        /// TaxProductResourceTaxCode
        ///
        /// [Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes.
        public let taxCode: StripeKit.TaxCode?

        public init(string: String? = nil, taxCode: StripeKit.TaxCode? = nil) {
            self.string = string
            self.taxCode = taxCode
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.taxCode = try? container.decode(StripeKit.TaxCode.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = taxCode { try container.encode(value) }
        }
    }

    /// The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
    public enum `Type`: String, Codable, CaseIterable {
        case fixedAmount = "fixed_amount"
    }

    public init(isActive: Bool, created: Int, deliveryEstimate: ShippingRateDeliveryEstimate? = nil, displayName: String? = nil, fixedAmount: ShippingRateFixedAmount? = nil, id: String, isLivemode: Bool, metadata: [String: String], object: Object, taxBehavior: TaxBehavior? = nil, taxCode: TaxCode? = nil, type: `Type`) {
        self.isActive = isActive
        self.created = created
        self.deliveryEstimate = deliveryEstimate
        self.displayName = displayName
        self.fixedAmount = fixedAmount
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.taxBehavior = taxBehavior
        self.taxCode = taxCode
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.isActive = try values.decode(Bool.self, forKey: "active")
        self.created = try values.decode(Int.self, forKey: "created")
        self.deliveryEstimate = try values.decodeIfPresent(ShippingRateDeliveryEstimate.self, forKey: "delivery_estimate")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "display_name")
        self.fixedAmount = try values.decodeIfPresent(ShippingRateFixedAmount.self, forKey: "fixed_amount")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.taxBehavior = try values.decodeIfPresent(TaxBehavior.self, forKey: "tax_behavior")
        self.taxCode = try values.decodeIfPresent(TaxCode.self, forKey: "tax_code")
        self.type = try values.decode(`Type`.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(isActive, forKey: "active")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(deliveryEstimate, forKey: "delivery_estimate")
        try values.encodeIfPresent(displayName, forKey: "display_name")
        try values.encodeIfPresent(fixedAmount, forKey: "fixed_amount")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(taxBehavior, forKey: "tax_behavior")
        try values.encodeIfPresent(taxCode, forKey: "tax_code")
        try values.encode(type, forKey: "type")
    }
}
