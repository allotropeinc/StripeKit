// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// GelatoVerificationSession
///
/// A VerificationSession guides you through the process of collecting and verifying the identities
/// of your users. It contains details about the type of verification, such as what [verification
/// check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
/// each verification in your system.
/// 
/// A VerificationSession transitions through [multiple
/// statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
/// the verification flow. The VerificationSession contains the user’s verified data after
/// verification checks are complete.
/// 
/// Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
public struct IdentityVerificationSession: Codable {
    /// The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more.
    public var clientSecret: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Unique identifier for the object.
    public var id: String
    /// If present, this property tells you the last error encountered when processing the verification.
    public var lastError: GelatoSessionLastError?
    /// ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)
    public var lastVerificationReport: LastVerificationReport?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// GelatoVerificationSessionOptions
    public var options: GelatoVerificationSessionOptions
    /// Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.
    public var redaction: VerificationSessionRedaction?
    /// Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
    public var status: Status
    /// The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
    public var type: `Type`
    /// The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.
    public var url: String?
    /// The user’s verified data.
    public var verifiedOutputs: GelatoVerifiedOutputs?

    /// ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)
    public struct LastVerificationReport: Codable {
        public var string: String?
        /// GelatoVerificationReport
        ///
        /// A VerificationReport is the result of an attempt to collect and verify data from a user.
        /// The collection of verification checks performed is determined from the `type` and `options`
        /// parameters used. You can find the result of each verification check performed in the
        /// appropriate sub-resource: `document`, `id_number`, `selfie`.
        /// 
        /// Each VerificationReport contains a copy of any data collected by the user as well as
        /// reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
        /// API. To configure and create VerificationReports, use the
        /// [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
        /// 
        /// Related guides: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
        public var identityVerificationReport: IdentityVerificationReport?

        public init(string: String? = nil, identityVerificationReport: IdentityVerificationReport? = nil) {
            self.string = string
            self.identityVerificationReport = identityVerificationReport
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.identityVerificationReport = try? container.decode(IdentityVerificationReport.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = identityVerificationReport { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case identityVerificationSession = "identity.verification_session"
    }

    /// Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
    public enum Status: String, Codable, CaseIterable {
        case canceled
        case processing
        case requiresInput = "requires_input"
        case verified
    }

    /// The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
    public enum `Type`: String, Codable, CaseIterable {
        case document
        case idNumber = "id_number"
    }

    public init(clientSecret: String? = nil, created: Int, id: String, lastError: GelatoSessionLastError? = nil, lastVerificationReport: LastVerificationReport? = nil, isLivemode: Bool, metadata: [String: String], object: Object, options: GelatoVerificationSessionOptions, redaction: VerificationSessionRedaction? = nil, status: Status, type: `Type`, url: String? = nil, verifiedOutputs: GelatoVerifiedOutputs? = nil) {
        self.clientSecret = clientSecret
        self.created = created
        self.id = id
        self.lastError = lastError
        self.lastVerificationReport = lastVerificationReport
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.options = options
        self.redaction = redaction
        self.status = status
        self.type = type
        self.url = url
        self.verifiedOutputs = verifiedOutputs
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.clientSecret = try values.decodeIfPresent(String.self, forKey: "client_secret")
        self.created = try values.decode(Int.self, forKey: "created")
        self.id = try values.decode(String.self, forKey: "id")
        self.lastError = try values.decodeIfPresent(GelatoSessionLastError.self, forKey: "last_error")
        self.lastVerificationReport = try values.decodeIfPresent(LastVerificationReport.self, forKey: "last_verification_report")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.options = try values.decode(GelatoVerificationSessionOptions.self, forKey: "options")
        self.redaction = try values.decodeIfPresent(VerificationSessionRedaction.self, forKey: "redaction")
        self.status = try values.decode(Status.self, forKey: "status")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
        self.verifiedOutputs = try values.decodeIfPresent(GelatoVerifiedOutputs.self, forKey: "verified_outputs")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(clientSecret, forKey: "client_secret")
        try values.encode(created, forKey: "created")
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(lastError, forKey: "last_error")
        try values.encodeIfPresent(lastVerificationReport, forKey: "last_verification_report")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encode(options, forKey: "options")
        try values.encodeIfPresent(redaction, forKey: "redaction")
        try values.encode(status, forKey: "status")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(url, forKey: "url")
        try values.encodeIfPresent(verifiedOutputs, forKey: "verified_outputs")
    }
}
