// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Pending Updates store the changes pending from a previous update that will be applied
/// to the Subscription upon successful payment.
public struct SubscriptionsResourcePendingUpdate: Codable {
    /// If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
    public var billingCycleAnchor: Int?
    /// The point after which the changes reflected by this update will be discarded and no longer applied.
    public var expiresAt: Int
    /// List of subscription items, each with an attached plan, that will be set if the update is applied.
    public var subscriptionItems: [SubscriptionItem]?
    /// Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
    public var trialEnd: Int?
    /// Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    public var isTrialFromPlan: Bool?

    public init(billingCycleAnchor: Int? = nil, expiresAt: Int, subscriptionItems: [SubscriptionItem]? = nil, trialEnd: Int? = nil, isTrialFromPlan: Bool? = nil) {
        self.billingCycleAnchor = billingCycleAnchor
        self.expiresAt = expiresAt
        self.subscriptionItems = subscriptionItems
        self.trialEnd = trialEnd
        self.isTrialFromPlan = isTrialFromPlan
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.billingCycleAnchor = try values.decodeIfPresent(Int.self, forKey: "billing_cycle_anchor")
        self.expiresAt = try values.decode(Int.self, forKey: "expires_at")
        self.subscriptionItems = try values.decodeIfPresent([SubscriptionItem].self, forKey: "subscription_items")
        self.trialEnd = try values.decodeIfPresent(Int.self, forKey: "trial_end")
        self.isTrialFromPlan = try values.decodeIfPresent(Bool.self, forKey: "trial_from_plan")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(billingCycleAnchor, forKey: "billing_cycle_anchor")
        try values.encode(expiresAt, forKey: "expires_at")
        try values.encodeIfPresent(subscriptionItems, forKey: "subscription_items")
        try values.encodeIfPresent(trialEnd, forKey: "trial_end")
        try values.encodeIfPresent(isTrialFromPlan, forKey: "trial_from_plan")
    }
}
