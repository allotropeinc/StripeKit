// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Three_d_secure_details
public struct ThreeDSecureDetails: Codable {
    /// For authenticated transactions: how the customer was authenticated by
    /// the issuing bank.
    public var authenticationFlow: AuthenticationFlow?
    /// Indicates the outcome of 3D Secure authentication.
    public var result: Result?
    /// Additional information about why 3D Secure succeeded or failed based
    /// on the `result`.
    public var resultReason: ResultReason?
    /// The version of 3D Secure that was used.
    public var version: Version?

    /// For authenticated transactions: how the customer was authenticated by
    /// the issuing bank.
    public enum AuthenticationFlow: String, Codable, CaseIterable {
        case challenge
        case frictionless
    }

    /// Indicates the outcome of 3D Secure authentication.
    public enum Result: String, Codable, CaseIterable {
        case attemptAcknowledged = "attempt_acknowledged"
        case authenticated
        case exempted
        case failed
        case notSupported = "not_supported"
        case processingError = "processing_error"
    }

    /// Additional information about why 3D Secure succeeded or failed based
    /// on the `result`.
    public enum ResultReason: String, Codable, CaseIterable {
        case abandoned
        case bypassed
        case canceled
        case cardNotEnrolled = "card_not_enrolled"
        case networkNotSupported = "network_not_supported"
        case protocolError = "protocol_error"
        case rejected
    }

    /// The version of 3D Secure that was used.
    public enum Version: String, Codable, CaseIterable {
        case _102 = "1.0.2"
        case _210 = "2.1.0"
        case _220 = "2.2.0"
    }

    public init(authenticationFlow: AuthenticationFlow? = nil, result: Result? = nil, resultReason: ResultReason? = nil, version: Version? = nil) {
        self.authenticationFlow = authenticationFlow
        self.result = result
        self.resultReason = resultReason
        self.version = version
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.authenticationFlow = try values.decodeIfPresent(AuthenticationFlow.self, forKey: "authentication_flow")
        self.result = try values.decodeIfPresent(Result.self, forKey: "result")
        self.resultReason = try values.decodeIfPresent(ResultReason.self, forKey: "result_reason")
        self.version = try values.decodeIfPresent(Version.self, forKey: "version")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(authenticationFlow, forKey: "authentication_flow")
        try values.encodeIfPresent(result, forKey: "result")
        try values.encodeIfPresent(resultReason, forKey: "result_reason")
        try values.encodeIfPresent(version, forKey: "version")
    }
}
