// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Shows last VerificationSession error
public struct GelatoSessionLastError: Codable {
    /// A short machine-readable string giving the reason for the verification or user-session failure.
    public var code: Code?
    /// A message that explains the reason for verification or user-session failure.
    public var reason: String?

    /// A short machine-readable string giving the reason for the verification or user-session failure.
    public enum Code: String, Codable, CaseIterable {
        case abandoned
        case consentDeclined = "consent_declined"
        case countryNotSupported = "country_not_supported"
        case deviceNotSupported = "device_not_supported"
        case documentExpired = "document_expired"
        case documentTypeNotSupported = "document_type_not_supported"
        case documentUnverifiedOther = "document_unverified_other"
        case idNumberInsufficientDocumentData = "id_number_insufficient_document_data"
        case idNumberMismatch = "id_number_mismatch"
        case idNumberUnverifiedOther = "id_number_unverified_other"
        case selfieDocumentMissingPhoto = "selfie_document_missing_photo"
        case selfieFaceMismatch = "selfie_face_mismatch"
        case selfieManipulated = "selfie_manipulated"
        case selfieUnverifiedOther = "selfie_unverified_other"
        case underSupportedAge = "under_supported_age"
    }

    public init(code: Code? = nil, reason: String? = nil) {
        self.code = code
        self.reason = reason
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.code = try values.decodeIfPresent(Code.self, forKey: "code")
        self.reason = try values.decodeIfPresent(String.self, forKey: "reason")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(code, forKey: "code")
        try values.encodeIfPresent(reason, forKey: "reason")
    }
}
