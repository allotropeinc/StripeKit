// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Payment_method_details_p24
public struct PaymentMethodDetailsP24: Codable {
    /// The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
    public var bank: Bank?
    /// Unique reference for this Przelewy24 payment.
    public var reference: String?
    /// Owner's verified full name. Values are verified or provided by Przelewy24 directly
    /// (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    /// Przelewy24 rarely provides this information so the attribute is usually empty.
    public var verifiedName: String?

    /// The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
    public enum Bank: String, Codable, CaseIterable {
        case aliorBank = "alior_bank"
        case bankMillennium = "bank_millennium"
        case bankNowyBfgSa = "bank_nowy_bfg_sa"
        case bankPekaoSa = "bank_pekao_sa"
        case bankiSpbdzielcze = "banki_spbdzielcze"
        case blik
        case bnpParibas = "bnp_paribas"
        case boz
        case citiHandlowy = "citi_handlowy"
        case creditAgricole = "credit_agricole"
        case envelobank
        case etransferPocztowy24 = "etransfer_pocztowy24"
        case getinBank = "getin_bank"
        case ideabank
        case ing
        case inteligo
        case mbankMtransfer = "mbank_mtransfer"
        case nestPrzelew = "nest_przelew"
        case noblePay = "noble_pay"
        case pbacZIpko = "pbac_z_ipko"
        case plusBank = "plus_bank"
        case santanderPrzelew24 = "santander_przelew24"
        case tmobileUsbugiBankowe = "tmobile_usbugi_bankowe"
        case toyotaBank = "toyota_bank"
        case volkswagenBank = "volkswagen_bank"
    }

    public init(bank: Bank? = nil, reference: String? = nil, verifiedName: String? = nil) {
        self.bank = bank
        self.reference = reference
        self.verifiedName = verifiedName
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.bank = try values.decodeIfPresent(Bank.self, forKey: "bank")
        self.reference = try values.decodeIfPresent(String.self, forKey: "reference")
        self.verifiedName = try values.decodeIfPresent(String.self, forKey: "verified_name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(bank, forKey: "bank")
        try values.encodeIfPresent(reference, forKey: "reference")
        try values.encodeIfPresent(verifiedName, forKey: "verified_name")
    }
}
