// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Payment_method_details_sofort
public struct PaymentMethodDetailsSofort: Codable {
    /// Bank code of bank associated with the bank account.
    public var bankCode: String?
    /// Name of the bank associated with the bank account.
    public var bankName: String?
    /// Bank Identifier Code of the bank associated with the bank account.
    public var bic: String?
    /// Two-letter ISO code representing the country the bank account is located in.
    public var country: String?
    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public var generatedSepaDebit: GeneratedSepaDebit?
    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public var generatedSepaDebitMandate: GeneratedSepaDebitMandate?
    /// Last four characters of the IBAN.
    public var ibanLast4: String?
    /// Preferred language of the SOFORT authorization page that the customer is redirected to.
    /// Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
    public var preferredLanguage: PreferredLanguage?
    /// Owner's verified full name. Values are verified or provided by SOFORT directly
    /// (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedName: String?

    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public struct GeneratedSepaDebit: Codable {
        public var string: String?
        /// PaymentMethod objects represent your customer's payment instruments.
        /// You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
        /// Customer objects to store instrument details for future payments.
        /// 
        /// Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public struct GeneratedSepaDebitMandate: Codable {
        public var string: String?
        /// A Mandate is a record of the permission a customer has given you to debit their payment method.
        public var mandate: Mandate?

        public init(string: String? = nil, mandate: Mandate? = nil) {
            self.string = string
            self.mandate = mandate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.mandate = try? container.decode(Mandate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = mandate { try container.encode(value) }
        }
    }

    /// Preferred language of the SOFORT authorization page that the customer is redirected to.
    /// Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
    public enum PreferredLanguage: String, Codable, CaseIterable {
        case de
        case en
        case es
        case fr
        case it
        case nl
        case pl
    }

    public init(bankCode: String? = nil, bankName: String? = nil, bic: String? = nil, country: String? = nil, generatedSepaDebit: GeneratedSepaDebit? = nil, generatedSepaDebitMandate: GeneratedSepaDebitMandate? = nil, ibanLast4: String? = nil, preferredLanguage: PreferredLanguage? = nil, verifiedName: String? = nil) {
        self.bankCode = bankCode
        self.bankName = bankName
        self.bic = bic
        self.country = country
        self.generatedSepaDebit = generatedSepaDebit
        self.generatedSepaDebitMandate = generatedSepaDebitMandate
        self.ibanLast4 = ibanLast4
        self.preferredLanguage = preferredLanguage
        self.verifiedName = verifiedName
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.bankCode = try values.decodeIfPresent(String.self, forKey: "bank_code")
        self.bankName = try values.decodeIfPresent(String.self, forKey: "bank_name")
        self.bic = try values.decodeIfPresent(String.self, forKey: "bic")
        self.country = try values.decodeIfPresent(String.self, forKey: "country")
        self.generatedSepaDebit = try values.decodeIfPresent(GeneratedSepaDebit.self, forKey: "generated_sepa_debit")
        self.generatedSepaDebitMandate = try values.decodeIfPresent(GeneratedSepaDebitMandate.self, forKey: "generated_sepa_debit_mandate")
        self.ibanLast4 = try values.decodeIfPresent(String.self, forKey: "iban_last4")
        self.preferredLanguage = try values.decodeIfPresent(PreferredLanguage.self, forKey: "preferred_language")
        self.verifiedName = try values.decodeIfPresent(String.self, forKey: "verified_name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(bankCode, forKey: "bank_code")
        try values.encodeIfPresent(bankName, forKey: "bank_name")
        try values.encodeIfPresent(bic, forKey: "bic")
        try values.encodeIfPresent(country, forKey: "country")
        try values.encodeIfPresent(generatedSepaDebit, forKey: "generated_sepa_debit")
        try values.encodeIfPresent(generatedSepaDebitMandate, forKey: "generated_sepa_debit_mandate")
        try values.encodeIfPresent(ibanLast4, forKey: "iban_last4")
        try values.encodeIfPresent(preferredLanguage, forKey: "preferred_language")
        try values.encodeIfPresent(verifiedName, forKey: "verified_name")
    }
}
