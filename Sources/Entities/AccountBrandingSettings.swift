// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AccountBrandingSettings: Codable {
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px.
    public var icon: Icon?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px.
    public var logo: Logo?
    /// A CSS hex color value representing the primary branding color for this account
    public var primaryColor: String?
    /// A CSS hex color value representing the secondary branding color for this account
    public var secondaryColor: String?

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px.
    public struct Icon: Codable {
        public var string: String?
        /// This is an object representing a file hosted on Stripe's servers. The
        /// file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
        /// request (for example, when uploading dispute evidence) or it may have
        /// been created by Stripe (for example, the results of a [Sigma scheduled
        /// query](#scheduled_queries)).
        /// 
        /// Related guide: [File Upload Guide](https://stripe.com/docs/file-upload).
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px.
    public struct Logo: Codable {
        public var string: String?
        /// This is an object representing a file hosted on Stripe's servers. The
        /// file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
        /// request (for example, when uploading dispute evidence) or it may have
        /// been created by Stripe (for example, the results of a [Sigma scheduled
        /// query](#scheduled_queries)).
        /// 
        /// Related guide: [File Upload Guide](https://stripe.com/docs/file-upload).
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    public init(icon: Icon? = nil, logo: Logo? = nil, primaryColor: String? = nil, secondaryColor: String? = nil) {
        self.icon = icon
        self.logo = logo
        self.primaryColor = primaryColor
        self.secondaryColor = secondaryColor
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.icon = try values.decodeIfPresent(Icon.self, forKey: "icon")
        self.logo = try values.decodeIfPresent(Logo.self, forKey: "logo")
        self.primaryColor = try values.decodeIfPresent(String.self, forKey: "primary_color")
        self.secondaryColor = try values.decodeIfPresent(String.self, forKey: "secondary_color")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(icon, forKey: "icon")
        try values.encodeIfPresent(logo, forKey: "logo")
        try values.encodeIfPresent(primaryColor, forKey: "primary_color")
        try values.encodeIfPresent(secondaryColor, forKey: "secondary_color")
    }
}
