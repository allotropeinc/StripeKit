// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CheckoutSessionPaymentMethodOptions: Codable {
    /// CheckoutAcssDebitPaymentMethodOptions
    public var acssDebit: CheckoutAcssDebitPaymentMethodOptions?
    /// CheckoutAffirmPaymentMethodOptions
    public var affirm: CheckoutAffirmPaymentMethodOptions?
    /// CheckoutAfterpayClearpayPaymentMethodOptions
    public var afterpayClearpay: CheckoutAfterpayClearpayPaymentMethodOptions?
    /// CheckoutAlipayPaymentMethodOptions
    public var alipay: CheckoutAlipayPaymentMethodOptions?
    /// CheckoutAuBecsDebitPaymentMethodOptions
    public var auBecsDebit: CheckoutAuBecsDebitPaymentMethodOptions?
    /// CheckoutBacsDebitPaymentMethodOptions
    public var bacsDebit: CheckoutBacsDebitPaymentMethodOptions?
    /// CheckoutBancontactPaymentMethodOptions
    public var bancontact: CheckoutBancontactPaymentMethodOptions?
    /// CheckoutBoletoPaymentMethodOptions
    public var boleto: CheckoutBoletoPaymentMethodOptions?
    /// CheckoutCardPaymentMethodOptions
    public var card: CheckoutCardPaymentMethodOptions?
    /// CheckoutCustomerBalancePaymentMethodOptions
    public var customerBalance: CheckoutCustomerBalancePaymentMethodOptions?
    /// CheckoutEpsPaymentMethodOptions
    public var eps: CheckoutEpsPaymentMethodOptions?
    /// CheckoutFpxPaymentMethodOptions
    public var fpx: CheckoutFpxPaymentMethodOptions?
    /// CheckoutGiropayPaymentMethodOptions
    public var giropay: CheckoutGiropayPaymentMethodOptions?
    /// CheckoutGrabPayPaymentMethodOptions
    public var grabpay: CheckoutGrabPayPaymentMethodOptions?
    /// CheckoutIdealPaymentMethodOptions
    public var ideal: CheckoutIdealPaymentMethodOptions?
    /// CheckoutKlarnaPaymentMethodOptions
    public var klarna: CheckoutKlarnaPaymentMethodOptions?
    /// CheckoutKonbiniPaymentMethodOptions
    public var konbini: CheckoutKonbiniPaymentMethodOptions?
    /// CheckoutOxxoPaymentMethodOptions
    public var oxxo: CheckoutOxxoPaymentMethodOptions?
    /// CheckoutP24PaymentMethodOptions
    public var p24: CheckoutP24PaymentMethodOptions?
    /// CheckoutPaynowPaymentMethodOptions
    public var paynow: CheckoutPaynowPaymentMethodOptions?
    /// CheckoutSepaDebitPaymentMethodOptions
    public var sepaDebit: CheckoutSepaDebitPaymentMethodOptions?
    /// CheckoutSofortPaymentMethodOptions
    public var sofort: CheckoutSofortPaymentMethodOptions?
    /// CheckoutUsBankAccountPaymentMethodOptions
    public var usBankAccount: CheckoutUsBankAccountPaymentMethodOptions?

    public init(acssDebit: CheckoutAcssDebitPaymentMethodOptions? = nil, affirm: CheckoutAffirmPaymentMethodOptions? = nil, afterpayClearpay: CheckoutAfterpayClearpayPaymentMethodOptions? = nil, alipay: CheckoutAlipayPaymentMethodOptions? = nil, auBecsDebit: CheckoutAuBecsDebitPaymentMethodOptions? = nil, bacsDebit: CheckoutBacsDebitPaymentMethodOptions? = nil, bancontact: CheckoutBancontactPaymentMethodOptions? = nil, boleto: CheckoutBoletoPaymentMethodOptions? = nil, card: CheckoutCardPaymentMethodOptions? = nil, customerBalance: CheckoutCustomerBalancePaymentMethodOptions? = nil, eps: CheckoutEpsPaymentMethodOptions? = nil, fpx: CheckoutFpxPaymentMethodOptions? = nil, giropay: CheckoutGiropayPaymentMethodOptions? = nil, grabpay: CheckoutGrabPayPaymentMethodOptions? = nil, ideal: CheckoutIdealPaymentMethodOptions? = nil, klarna: CheckoutKlarnaPaymentMethodOptions? = nil, konbini: CheckoutKonbiniPaymentMethodOptions? = nil, oxxo: CheckoutOxxoPaymentMethodOptions? = nil, p24: CheckoutP24PaymentMethodOptions? = nil, paynow: CheckoutPaynowPaymentMethodOptions? = nil, sepaDebit: CheckoutSepaDebitPaymentMethodOptions? = nil, sofort: CheckoutSofortPaymentMethodOptions? = nil, usBankAccount: CheckoutUsBankAccountPaymentMethodOptions? = nil) {
        self.acssDebit = acssDebit
        self.affirm = affirm
        self.afterpayClearpay = afterpayClearpay
        self.alipay = alipay
        self.auBecsDebit = auBecsDebit
        self.bacsDebit = bacsDebit
        self.bancontact = bancontact
        self.boleto = boleto
        self.card = card
        self.customerBalance = customerBalance
        self.eps = eps
        self.fpx = fpx
        self.giropay = giropay
        self.grabpay = grabpay
        self.ideal = ideal
        self.klarna = klarna
        self.konbini = konbini
        self.oxxo = oxxo
        self.p24 = p24
        self.paynow = paynow
        self.sepaDebit = sepaDebit
        self.sofort = sofort
        self.usBankAccount = usBankAccount
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.acssDebit = try values.decodeIfPresent(CheckoutAcssDebitPaymentMethodOptions.self, forKey: "acss_debit")
        self.affirm = try values.decodeIfPresent(CheckoutAffirmPaymentMethodOptions.self, forKey: "affirm")
        self.afterpayClearpay = try values.decodeIfPresent(CheckoutAfterpayClearpayPaymentMethodOptions.self, forKey: "afterpay_clearpay")
        self.alipay = try values.decodeIfPresent(CheckoutAlipayPaymentMethodOptions.self, forKey: "alipay")
        self.auBecsDebit = try values.decodeIfPresent(CheckoutAuBecsDebitPaymentMethodOptions.self, forKey: "au_becs_debit")
        self.bacsDebit = try values.decodeIfPresent(CheckoutBacsDebitPaymentMethodOptions.self, forKey: "bacs_debit")
        self.bancontact = try values.decodeIfPresent(CheckoutBancontactPaymentMethodOptions.self, forKey: "bancontact")
        self.boleto = try values.decodeIfPresent(CheckoutBoletoPaymentMethodOptions.self, forKey: "boleto")
        self.card = try values.decodeIfPresent(CheckoutCardPaymentMethodOptions.self, forKey: "card")
        self.customerBalance = try values.decodeIfPresent(CheckoutCustomerBalancePaymentMethodOptions.self, forKey: "customer_balance")
        self.eps = try values.decodeIfPresent(CheckoutEpsPaymentMethodOptions.self, forKey: "eps")
        self.fpx = try values.decodeIfPresent(CheckoutFpxPaymentMethodOptions.self, forKey: "fpx")
        self.giropay = try values.decodeIfPresent(CheckoutGiropayPaymentMethodOptions.self, forKey: "giropay")
        self.grabpay = try values.decodeIfPresent(CheckoutGrabPayPaymentMethodOptions.self, forKey: "grabpay")
        self.ideal = try values.decodeIfPresent(CheckoutIdealPaymentMethodOptions.self, forKey: "ideal")
        self.klarna = try values.decodeIfPresent(CheckoutKlarnaPaymentMethodOptions.self, forKey: "klarna")
        self.konbini = try values.decodeIfPresent(CheckoutKonbiniPaymentMethodOptions.self, forKey: "konbini")
        self.oxxo = try values.decodeIfPresent(CheckoutOxxoPaymentMethodOptions.self, forKey: "oxxo")
        self.p24 = try values.decodeIfPresent(CheckoutP24PaymentMethodOptions.self, forKey: "p24")
        self.paynow = try values.decodeIfPresent(CheckoutPaynowPaymentMethodOptions.self, forKey: "paynow")
        self.sepaDebit = try values.decodeIfPresent(CheckoutSepaDebitPaymentMethodOptions.self, forKey: "sepa_debit")
        self.sofort = try values.decodeIfPresent(CheckoutSofortPaymentMethodOptions.self, forKey: "sofort")
        self.usBankAccount = try values.decodeIfPresent(CheckoutUsBankAccountPaymentMethodOptions.self, forKey: "us_bank_account")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(acssDebit, forKey: "acss_debit")
        try values.encodeIfPresent(affirm, forKey: "affirm")
        try values.encodeIfPresent(afterpayClearpay, forKey: "afterpay_clearpay")
        try values.encodeIfPresent(alipay, forKey: "alipay")
        try values.encodeIfPresent(auBecsDebit, forKey: "au_becs_debit")
        try values.encodeIfPresent(bacsDebit, forKey: "bacs_debit")
        try values.encodeIfPresent(bancontact, forKey: "bancontact")
        try values.encodeIfPresent(boleto, forKey: "boleto")
        try values.encodeIfPresent(card, forKey: "card")
        try values.encodeIfPresent(customerBalance, forKey: "customer_balance")
        try values.encodeIfPresent(eps, forKey: "eps")
        try values.encodeIfPresent(fpx, forKey: "fpx")
        try values.encodeIfPresent(giropay, forKey: "giropay")
        try values.encodeIfPresent(grabpay, forKey: "grabpay")
        try values.encodeIfPresent(ideal, forKey: "ideal")
        try values.encodeIfPresent(klarna, forKey: "klarna")
        try values.encodeIfPresent(konbini, forKey: "konbini")
        try values.encodeIfPresent(oxxo, forKey: "oxxo")
        try values.encodeIfPresent(p24, forKey: "p24")
        try values.encodeIfPresent(paynow, forKey: "paynow")
        try values.encodeIfPresent(sepaDebit, forKey: "sepa_debit")
        try values.encodeIfPresent(sofort, forKey: "sofort")
        try values.encodeIfPresent(usBankAccount, forKey: "us_bank_account")
    }
}
