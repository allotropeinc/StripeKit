// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// PortalConfiguration
///
/// A portal configuration describes the functionality and behavior of a portal session.
public struct BillingPortalConfiguration: Codable {
    /// Whether the configuration is active and can be used to create portal sessions.
    public var isActive: Bool
    /// ID of the Connect Application that created the configuration.
    public var application: Application?
    /// PortalBusinessProfile
    public var businessProfile: PortalBusinessProfile
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.
    public var defaultReturnURL: String?
    /// PortalFeatures
    public var features: PortalFeatures
    /// Unique identifier for the object.
    public var id: String
    /// Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session.
    public var isDefault: Bool
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Time at which the object was last updated. Measured in seconds since the Unix epoch.
    public var updated: Int

    /// ID of the Connect Application that created the configuration.
    public final class Application: Codable {
        public let string: String?
        public let application: StripeKit.Application?
        public let deletedApplication: DeletedApplication?

        public init(string: String? = nil, application: StripeKit.Application? = nil, deletedApplication: DeletedApplication? = nil) {
            self.string = string
            self.application = application
            self.deletedApplication = deletedApplication
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.application = try? container.decode(StripeKit.Application.self)
            self.deletedApplication = try? container.decode(DeletedApplication.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = application { try container.encode(value) }
            if let value = deletedApplication { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case billingPortalConfiguration = "billing_portal.configuration"
    }

    public init(isActive: Bool, application: Application? = nil, businessProfile: PortalBusinessProfile, created: Int, defaultReturnURL: String? = nil, features: PortalFeatures, id: String, isDefault: Bool, isLivemode: Bool, metadata: [String: String]? = nil, object: Object, updated: Int) {
        self.isActive = isActive
        self.application = application
        self.businessProfile = businessProfile
        self.created = created
        self.defaultReturnURL = defaultReturnURL
        self.features = features
        self.id = id
        self.isDefault = isDefault
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.updated = updated
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.isActive = try values.decode(Bool.self, forKey: "active")
        self.application = try values.decodeIfPresent(Application.self, forKey: "application")
        self.businessProfile = try values.decode(PortalBusinessProfile.self, forKey: "business_profile")
        self.created = try values.decode(Int.self, forKey: "created")
        self.defaultReturnURL = try values.decodeIfPresent(String.self, forKey: "default_return_url")
        self.features = try values.decode(PortalFeatures.self, forKey: "features")
        self.id = try values.decode(String.self, forKey: "id")
        self.isDefault = try values.decode(Bool.self, forKey: "is_default")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decodeIfPresent([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.updated = try values.decode(Int.self, forKey: "updated")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(isActive, forKey: "active")
        try values.encodeIfPresent(application, forKey: "application")
        try values.encode(businessProfile, forKey: "business_profile")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(defaultReturnURL, forKey: "default_return_url")
        try values.encode(features, forKey: "features")
        try values.encode(id, forKey: "id")
        try values.encode(isDefault, forKey: "is_default")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encode(updated, forKey: "updated")
    }
}
