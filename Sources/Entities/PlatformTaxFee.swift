// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// PlatformTax
public struct PlatformTaxFee: Codable {
    /// The Connected account that incurred this charge.
    public var account: String
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The payment object that caused this tax to be inflicted.
    public var sourceTransaction: String
    /// The type of tax (VAT).
    public var type: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case platformTaxFee = "platform_tax_fee"
    }

    public init(account: String, id: String, object: Object, sourceTransaction: String, type: String) {
        self.account = account
        self.id = id
        self.object = object
        self.sourceTransaction = sourceTransaction
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.account = try values.decode(String.self, forKey: "account")
        self.id = try values.decode(String.self, forKey: "id")
        self.object = try values.decode(Object.self, forKey: "object")
        self.sourceTransaction = try values.decode(String.self, forKey: "source_transaction")
        self.type = try values.decode(String.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(account, forKey: "account")
        try values.encode(id, forKey: "id")
        try values.encode(object, forKey: "object")
        try values.encode(sourceTransaction, forKey: "source_transaction")
        try values.encode(type, forKey: "type")
    }
}
