// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct IssuingAuthorizationRequest: Codable {
    /// The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
    public var amount: Int
    /// Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var amountDetails: IssuingAuthorizationAmountDetails?
    /// Whether this request was approved.
    public var isApproved: Bool
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var merchantAmount: Int
    /// The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var merchantCurrency: String
    /// The reason for the approval or decline.
    public var reason: Reason

    /// The reason for the approval or decline.
    public enum Reason: String, Codable, CaseIterable {
        case accountDisabled = "account_disabled"
        case cardActive = "card_active"
        case cardInactive = "card_inactive"
        case cardholderInactive = "cardholder_inactive"
        case cardholderVerificationRequired = "cardholder_verification_required"
        case insufficientFunds = "insufficient_funds"
        case notAllowed = "not_allowed"
        case spendingControls = "spending_controls"
        case suspectedFraud = "suspected_fraud"
        case verificationFailed = "verification_failed"
        case webhookApproved = "webhook_approved"
        case webhookDeclined = "webhook_declined"
        case webhookTimeout = "webhook_timeout"
    }

    public init(amount: Int, amountDetails: IssuingAuthorizationAmountDetails? = nil, isApproved: Bool, created: Int, currency: String, merchantAmount: Int, merchantCurrency: String, reason: Reason) {
        self.amount = amount
        self.amountDetails = amountDetails
        self.isApproved = isApproved
        self.created = created
        self.currency = currency
        self.merchantAmount = merchantAmount
        self.merchantCurrency = merchantCurrency
        self.reason = reason
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amount = try values.decode(Int.self, forKey: "amount")
        self.amountDetails = try values.decodeIfPresent(IssuingAuthorizationAmountDetails.self, forKey: "amount_details")
        self.isApproved = try values.decode(Bool.self, forKey: "approved")
        self.created = try values.decode(Int.self, forKey: "created")
        self.currency = try values.decode(String.self, forKey: "currency")
        self.merchantAmount = try values.decode(Int.self, forKey: "merchant_amount")
        self.merchantCurrency = try values.decode(String.self, forKey: "merchant_currency")
        self.reason = try values.decode(Reason.self, forKey: "reason")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(amount, forKey: "amount")
        try values.encodeIfPresent(amountDetails, forKey: "amount_details")
        try values.encode(isApproved, forKey: "approved")
        try values.encode(created, forKey: "created")
        try values.encode(currency, forKey: "currency")
        try values.encode(merchantAmount, forKey: "merchant_amount")
        try values.encode(merchantCurrency, forKey: "merchant_currency")
        try values.encode(reason, forKey: "reason")
    }
}
