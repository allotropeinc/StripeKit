// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct IssuingTransactionFlightDataLeg: Codable {
    /// The three-letter IATA airport code of the flight's destination.
    public var arrivalAirportCode: String?
    /// The airline carrier code.
    public var carrier: String?
    /// The three-letter IATA airport code that the flight departed from.
    public var departureAirportCode: String?
    /// The flight number.
    public var flightNumber: String?
    /// The flight's service class.
    public var serviceClass: String?
    /// Whether a stopover is allowed on this flight.
    public var isStopoverAllowed: Bool?

    public init(arrivalAirportCode: String? = nil, carrier: String? = nil, departureAirportCode: String? = nil, flightNumber: String? = nil, serviceClass: String? = nil, isStopoverAllowed: Bool? = nil) {
        self.arrivalAirportCode = arrivalAirportCode
        self.carrier = carrier
        self.departureAirportCode = departureAirportCode
        self.flightNumber = flightNumber
        self.serviceClass = serviceClass
        self.isStopoverAllowed = isStopoverAllowed
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.arrivalAirportCode = try values.decodeIfPresent(String.self, forKey: "arrival_airport_code")
        self.carrier = try values.decodeIfPresent(String.self, forKey: "carrier")
        self.departureAirportCode = try values.decodeIfPresent(String.self, forKey: "departure_airport_code")
        self.flightNumber = try values.decodeIfPresent(String.self, forKey: "flight_number")
        self.serviceClass = try values.decodeIfPresent(String.self, forKey: "service_class")
        self.isStopoverAllowed = try values.decodeIfPresent(Bool.self, forKey: "stopover_allowed")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(arrivalAirportCode, forKey: "arrival_airport_code")
        try values.encodeIfPresent(carrier, forKey: "carrier")
        try values.encodeIfPresent(departureAirportCode, forKey: "departure_airport_code")
        try values.encodeIfPresent(flightNumber, forKey: "flight_number")
        try values.encodeIfPresent(serviceClass, forKey: "service_class")
        try values.encodeIfPresent(isStopoverAllowed, forKey: "stopover_allowed")
    }
}
