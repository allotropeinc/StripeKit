// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PaymentPagesCheckoutSessionShippingCost: Codable {
    /// Total shipping cost before any discounts or taxes are applied.
    public var amountSubtotal: Int
    /// Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.
    public var amountTax: Int
    /// Total shipping cost after discounts and taxes are applied.
    public var amountTotal: Int
    /// The ID of the ShippingRate for this order.
    public var shippingRate: ShippingRate?
    /// The taxes applied to the shipping rate.
    public var taxes: [LineItemsTaxAmount]?

    /// The ID of the ShippingRate for this order.
    public final class ShippingRate: Codable {
        public let string: String?
        /// Shipping rates describe the price of shipping presented to your customers and can be
        /// applied to [Checkout Sessions](https://stripe.com/docs/payments/checkout/shipping)
        /// and [Orders](https://stripe.com/docs/orders/shipping) to collect shipping costs.
        public let shippingRate: StripeKit.ShippingRate?

        public init(string: String? = nil, shippingRate: StripeKit.ShippingRate? = nil) {
            self.string = string
            self.shippingRate = shippingRate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.shippingRate = try? container.decode(StripeKit.ShippingRate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = shippingRate { try container.encode(value) }
        }
    }

    public init(amountSubtotal: Int, amountTax: Int, amountTotal: Int, shippingRate: ShippingRate? = nil, taxes: [LineItemsTaxAmount]? = nil) {
        self.amountSubtotal = amountSubtotal
        self.amountTax = amountTax
        self.amountTotal = amountTotal
        self.shippingRate = shippingRate
        self.taxes = taxes
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amountSubtotal = try values.decode(Int.self, forKey: "amount_subtotal")
        self.amountTax = try values.decode(Int.self, forKey: "amount_tax")
        self.amountTotal = try values.decode(Int.self, forKey: "amount_total")
        self.shippingRate = try values.decodeIfPresent(ShippingRate.self, forKey: "shipping_rate")
        self.taxes = try values.decodeIfPresent([LineItemsTaxAmount].self, forKey: "taxes")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(amountSubtotal, forKey: "amount_subtotal")
        try values.encode(amountTax, forKey: "amount_tax")
        try values.encode(amountTotal, forKey: "amount_total")
        try values.encodeIfPresent(shippingRate, forKey: "shipping_rate")
        try values.encodeIfPresent(taxes, forKey: "taxes")
    }
}
