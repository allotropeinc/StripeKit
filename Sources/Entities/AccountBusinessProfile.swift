// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AccountBusinessProfile: Codable {
    /// [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
    public var mcc: String?
    /// The customer-facing business name.
    public var name: String?
    /// Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.
    public var productDescription: String?
    /// A publicly available mailing address for sending support issues to.
    public var supportAddress: Address?
    /// A publicly available email address for sending support issues to.
    public var supportEmail: String?
    /// A publicly available phone number to call with support issues.
    public var supportPhone: String?
    /// A publicly available website for handling support issues.
    public var supportURL: String?
    /// The business's publicly available website.
    public var url: String?

    public init(mcc: String? = nil, name: String? = nil, productDescription: String? = nil, supportAddress: Address? = nil, supportEmail: String? = nil, supportPhone: String? = nil, supportURL: String? = nil, url: String? = nil) {
        self.mcc = mcc
        self.name = name
        self.productDescription = productDescription
        self.supportAddress = supportAddress
        self.supportEmail = supportEmail
        self.supportPhone = supportPhone
        self.supportURL = supportURL
        self.url = url
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.mcc = try values.decodeIfPresent(String.self, forKey: "mcc")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.productDescription = try values.decodeIfPresent(String.self, forKey: "product_description")
        self.supportAddress = try values.decodeIfPresent(Address.self, forKey: "support_address")
        self.supportEmail = try values.decodeIfPresent(String.self, forKey: "support_email")
        self.supportPhone = try values.decodeIfPresent(String.self, forKey: "support_phone")
        self.supportURL = try values.decodeIfPresent(String.self, forKey: "support_url")
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(mcc, forKey: "mcc")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(productDescription, forKey: "product_description")
        try values.encodeIfPresent(supportAddress, forKey: "support_address")
        try values.encodeIfPresent(supportEmail, forKey: "support_email")
        try values.encodeIfPresent(supportPhone, forKey: "support_phone")
        try values.encodeIfPresent(supportURL, forKey: "support_url")
        try values.encodeIfPresent(url, forKey: "url")
    }
}
