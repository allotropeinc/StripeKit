// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GelatoVerifiedOutputs: Codable {
    /// The user's verified address.
    public var address: Address?
    /// The userâ€™s verified date of birth.
    public var dob: GelatoDataVerifiedOutputsDate?
    /// The user's verified first name.
    public var firstName: String?
    /// The user's verified id number.
    public var idNumber: String?
    /// The user's verified id number type.
    public var idNumberType: IDNumberType?
    /// The user's verified last name.
    public var lastName: String?

    /// The user's verified id number type.
    public enum IDNumberType: String, Codable, CaseIterable {
        case brCpf = "br_cpf"
        case sgNric = "sg_nric"
        case usSsn = "us_ssn"
    }

    public init(address: Address? = nil, dob: GelatoDataVerifiedOutputsDate? = nil, firstName: String? = nil, idNumber: String? = nil, idNumberType: IDNumberType? = nil, lastName: String? = nil) {
        self.address = address
        self.dob = dob
        self.firstName = firstName
        self.idNumber = idNumber
        self.idNumberType = idNumberType
        self.lastName = lastName
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.address = try values.decodeIfPresent(Address.self, forKey: "address")
        self.dob = try values.decodeIfPresent(GelatoDataVerifiedOutputsDate.self, forKey: "dob")
        self.firstName = try values.decodeIfPresent(String.self, forKey: "first_name")
        self.idNumber = try values.decodeIfPresent(String.self, forKey: "id_number")
        self.idNumberType = try values.decodeIfPresent(IDNumberType.self, forKey: "id_number_type")
        self.lastName = try values.decodeIfPresent(String.self, forKey: "last_name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(address, forKey: "address")
        try values.encodeIfPresent(dob, forKey: "dob")
        try values.encodeIfPresent(firstName, forKey: "first_name")
        try values.encodeIfPresent(idNumber, forKey: "id_number")
        try values.encodeIfPresent(idNumberType, forKey: "id_number_type")
        try values.encodeIfPresent(lastName, forKey: "last_name")
    }
}
