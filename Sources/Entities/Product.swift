// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Products describe the specific goods or services you offer to your customers.
/// For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
/// They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.
/// 
/// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
/// [share a Payment Link](https://stripe.com/docs/payments/payment-links/overview),
/// [accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
/// and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
public struct Product: Codable {
    /// Whether the product is currently available for purchase.
    public var isActive: Bool
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product.
    public var defaultPrice: DefaultPrice?
    /// The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
    public var description: String?
    /// Unique identifier for the object.
    public var id: String
    /// A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
    public var images: [String]
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// The product's name, meant to be displayable to the customer.
    public var name: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The dimensions of this product for shipping purposes.
    public var packageDimensions: PackageDimensions?
    /// Whether this product is shipped (i.e., physical goods).
    public var isShippable: Bool?
    /// Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.
    public var statementDescriptor: String?
    /// A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
    public var taxCode: TaxCode?
    /// A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
    public var unitLabel: String?
    /// Time at which the object was last updated. Measured in seconds since the Unix epoch.
    public var updated: Int
    /// A URL of a publicly-accessible webpage for this product.
    public var url: String?

    /// The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product.
    public struct DefaultPrice: Codable {
        public var string: String?
        /// Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
        /// [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
        /// 
        /// For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
        public var price: Price?

        public init(string: String? = nil, price: Price? = nil) {
            self.string = string
            self.price = price
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.price = try? container.decode(Price.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = price { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case product
    }

    /// A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
    public final class TaxCode: Codable {
        public let string: String?
        /// TaxProductResourceTaxCode
        ///
        /// [Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes.
        public let taxCode: StripeKit.TaxCode?

        public init(string: String? = nil, taxCode: StripeKit.TaxCode? = nil) {
            self.string = string
            self.taxCode = taxCode
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.taxCode = try? container.decode(StripeKit.TaxCode.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = taxCode { try container.encode(value) }
        }
    }

    public init(isActive: Bool, created: Int, defaultPrice: DefaultPrice? = nil, description: String? = nil, id: String, images: [String], isLivemode: Bool, metadata: [String: String], name: String, object: Object, packageDimensions: PackageDimensions? = nil, isShippable: Bool? = nil, statementDescriptor: String? = nil, taxCode: TaxCode? = nil, unitLabel: String? = nil, updated: Int, url: String? = nil) {
        self.isActive = isActive
        self.created = created
        self.defaultPrice = defaultPrice
        self.description = description
        self.id = id
        self.images = images
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.name = name
        self.object = object
        self.packageDimensions = packageDimensions
        self.isShippable = isShippable
        self.statementDescriptor = statementDescriptor
        self.taxCode = taxCode
        self.unitLabel = unitLabel
        self.updated = updated
        self.url = url
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.isActive = try values.decode(Bool.self, forKey: "active")
        self.created = try values.decode(Int.self, forKey: "created")
        self.defaultPrice = try values.decodeIfPresent(DefaultPrice.self, forKey: "default_price")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.id = try values.decode(String.self, forKey: "id")
        self.images = try values.decode([String].self, forKey: "images")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.name = try values.decode(String.self, forKey: "name")
        self.object = try values.decode(Object.self, forKey: "object")
        self.packageDimensions = try values.decodeIfPresent(PackageDimensions.self, forKey: "package_dimensions")
        self.isShippable = try values.decodeIfPresent(Bool.self, forKey: "shippable")
        self.statementDescriptor = try values.decodeIfPresent(String.self, forKey: "statement_descriptor")
        self.taxCode = try values.decodeIfPresent(TaxCode.self, forKey: "tax_code")
        self.unitLabel = try values.decodeIfPresent(String.self, forKey: "unit_label")
        self.updated = try values.decode(Int.self, forKey: "updated")
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(isActive, forKey: "active")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(defaultPrice, forKey: "default_price")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(id, forKey: "id")
        try values.encode(images, forKey: "images")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(metadata, forKey: "metadata")
        try values.encode(name, forKey: "name")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(packageDimensions, forKey: "package_dimensions")
        try values.encodeIfPresent(isShippable, forKey: "shippable")
        try values.encodeIfPresent(statementDescriptor, forKey: "statement_descriptor")
        try values.encodeIfPresent(taxCode, forKey: "tax_code")
        try values.encodeIfPresent(unitLabel, forKey: "unit_label")
        try values.encode(updated, forKey: "updated")
        try values.encodeIfPresent(url, forKey: "url")
    }
}
