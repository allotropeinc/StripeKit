// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Setup_attempt_payment_method_details_ideal
public struct SetupAttemptPaymentMethodDetailsIdeal: Codable {
    /// The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
    public var bank: Bank?
    /// The Bank Identifier Code of the customer's bank.
    public var bic: Bic?
    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public var generatedSepaDebit: GeneratedSepaDebit?
    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public var generatedSepaDebitMandate: GeneratedSepaDebitMandate?
    /// Last four characters of the IBAN.
    public var ibanLast4: String?
    /// Owner's verified full name. Values are verified or provided by iDEAL directly
    /// (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedName: String?

    /// The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
    public enum Bank: String, Codable, CaseIterable {
        case abnAmro = "abn_amro"
        case asnBank = "asn_bank"
        case bunq
        case handelsbanken
        case ing
        case knab
        case moneyou
        case rabobank
        case regiobank
        case revolut
        case snsBank = "sns_bank"
        case triodosBank = "triodos_bank"
        case vanLanschot = "van_lanschot"
    }

    /// The Bank Identifier Code of the customer's bank.
    public enum Bic: String, Codable, CaseIterable {
        case abnanl2a = "ABNANL2A"
        case asnbnl21 = "ASNBNL21"
        case bunqnl2a = "BUNQNL2A"
        case fvlbnl22 = "FVLBNL22"
        case handnl2a = "HANDNL2A"
        case ingbnl2a = "INGBNL2A"
        case knabnl2h = "KNABNL2H"
        case moyonl21 = "MOYONL21"
        case rabonl2u = "RABONL2U"
        case rbrbnl21 = "RBRBNL21"
        case revolt21 = "REVOLT21"
        case snsbnl2a = "SNSBNL2A"
        case trionl2u = "TRIONL2U"
    }

    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public struct GeneratedSepaDebit: Codable {
        public var string: String?
        /// PaymentMethod objects represent your customer's payment instruments.
        /// You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
        /// Customer objects to store instrument details for future payments.
        /// 
        /// Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public struct GeneratedSepaDebitMandate: Codable {
        public var string: String?
        /// A Mandate is a record of the permission a customer has given you to debit their payment method.
        public var mandate: Mandate?

        public init(string: String? = nil, mandate: Mandate? = nil) {
            self.string = string
            self.mandate = mandate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.mandate = try? container.decode(Mandate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = mandate { try container.encode(value) }
        }
    }

    public init(bank: Bank? = nil, bic: Bic? = nil, generatedSepaDebit: GeneratedSepaDebit? = nil, generatedSepaDebitMandate: GeneratedSepaDebitMandate? = nil, ibanLast4: String? = nil, verifiedName: String? = nil) {
        self.bank = bank
        self.bic = bic
        self.generatedSepaDebit = generatedSepaDebit
        self.generatedSepaDebitMandate = generatedSepaDebitMandate
        self.ibanLast4 = ibanLast4
        self.verifiedName = verifiedName
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.bank = try values.decodeIfPresent(Bank.self, forKey: "bank")
        self.bic = try values.decodeIfPresent(Bic.self, forKey: "bic")
        self.generatedSepaDebit = try values.decodeIfPresent(GeneratedSepaDebit.self, forKey: "generated_sepa_debit")
        self.generatedSepaDebitMandate = try values.decodeIfPresent(GeneratedSepaDebitMandate.self, forKey: "generated_sepa_debit_mandate")
        self.ibanLast4 = try values.decodeIfPresent(String.self, forKey: "iban_last4")
        self.verifiedName = try values.decodeIfPresent(String.self, forKey: "verified_name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(bank, forKey: "bank")
        try values.encodeIfPresent(bic, forKey: "bic")
        try values.encodeIfPresent(generatedSepaDebit, forKey: "generated_sepa_debit")
        try values.encodeIfPresent(generatedSepaDebitMandate, forKey: "generated_sepa_debit_mandate")
        try values.encodeIfPresent(ibanLast4, forKey: "iban_last4")
        try values.encodeIfPresent(verifiedName, forKey: "verified_name")
    }
}
