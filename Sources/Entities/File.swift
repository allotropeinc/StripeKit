// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// This is an object representing a file hosted on Stripe's servers. The
/// file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
/// request (for example, when uploading dispute evidence) or it may have
/// been created by Stripe (for example, the results of a [Sigma scheduled
/// query](#scheduled_queries)).
/// 
/// Related guide: [File Upload Guide](https://stripe.com/docs/file-upload).
public struct File: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The time at which the file expires and is no longer available in epoch seconds.
    public var expiresAt: Int?
    /// A filename for the file, suitable for saving to a filesystem.
    public var filename: String?
    /// Unique identifier for the object.
    public var id: String
    /// FileFileLinkList
    ///
    /// A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
    public var links: Links?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
    public var purpose: Purpose
    /// The size in bytes of the file object.
    public var size: Int
    /// A user friendly title for the document.
    public var title: String?
    /// The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`).
    public var type: String?
    /// The URL from which the file can be downloaded using your live secret API key.
    public var url: String?

    /// FileFileLinkList
    ///
    /// A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
    public struct Links: Codable {
        /// Details about each object.
        public var data: [FileLink]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [FileLink], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.data = try values.decode([FileLink].self, forKey: "data")
            self.hasMore = try values.decode(Bool.self, forKey: "has_more")
            self.object = try values.decode(Object.self, forKey: "object")
            self.url = try values.decode(String.self, forKey: "url")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(data, forKey: "data")
            try values.encode(hasMore, forKey: "has_more")
            try values.encode(object, forKey: "object")
            try values.encode(url, forKey: "url")
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case file
    }

    /// The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
    public enum Purpose: String, Codable, CaseIterable {
        case accountRequirement = "account_requirement"
        case additionalVerification = "additional_verification"
        case businessIcon = "business_icon"
        case businessLogo = "business_logo"
        case customerSignature = "customer_signature"
        case disputeEvidence = "dispute_evidence"
        case documentProviderIdentityDocument = "document_provider_identity_document"
        case financeReportRun = "finance_report_run"
        case identityDocument = "identity_document"
        case identityDocumentDownloadable = "identity_document_downloadable"
        case pciDocument = "pci_document"
        case selfie
        case sigmaScheduledQuery = "sigma_scheduled_query"
        case taxDocumentUserUpload = "tax_document_user_upload"
    }

    public init(created: Int, expiresAt: Int? = nil, filename: String? = nil, id: String, links: Links? = nil, object: Object, purpose: Purpose, size: Int, title: String? = nil, type: String? = nil, url: String? = nil) {
        self.created = created
        self.expiresAt = expiresAt
        self.filename = filename
        self.id = id
        self.links = links
        self.object = object
        self.purpose = purpose
        self.size = size
        self.title = title
        self.type = type
        self.url = url
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.created = try values.decode(Int.self, forKey: "created")
        self.expiresAt = try values.decodeIfPresent(Int.self, forKey: "expires_at")
        self.filename = try values.decodeIfPresent(String.self, forKey: "filename")
        self.id = try values.decode(String.self, forKey: "id")
        self.links = try values.decodeIfPresent(Links.self, forKey: "links")
        self.object = try values.decode(Object.self, forKey: "object")
        self.purpose = try values.decode(Purpose.self, forKey: "purpose")
        self.size = try values.decode(Int.self, forKey: "size")
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.type = try values.decodeIfPresent(String.self, forKey: "type")
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(expiresAt, forKey: "expires_at")
        try values.encodeIfPresent(filename, forKey: "filename")
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(links, forKey: "links")
        try values.encode(object, forKey: "object")
        try values.encode(purpose, forKey: "purpose")
        try values.encode(size, forKey: "size")
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(url, forKey: "url")
    }
}
