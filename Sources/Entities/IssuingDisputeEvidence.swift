// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct IssuingDisputeEvidence: Codable {
    /// IssuingDisputeCanceledEvidence
    public var canceled: IssuingDisputeCanceledEvidence?
    /// IssuingDisputeDuplicateEvidence
    public var duplicate: IssuingDisputeDuplicateEvidence?
    /// IssuingDisputeFraudulentEvidence
    public var fraudulent: IssuingDisputeFraudulentEvidence?
    /// IssuingDisputeMerchandiseNotAsDescribedEvidence
    public var merchandiseNotAsDescribed: IssuingDisputeMerchandiseNotAsDescribedEvidence?
    /// IssuingDisputeNotReceivedEvidence
    public var notReceived: IssuingDisputeNotReceivedEvidence?
    /// IssuingDisputeOtherEvidence
    public var other: IssuingDisputeOtherEvidence?
    /// The reason for filing the dispute. Its value will match the field containing the evidence.
    public var reason: Reason
    /// IssuingDisputeServiceNotAsDescribedEvidence
    public var serviceNotAsDescribed: IssuingDisputeServiceNotAsDescribedEvidence?

    /// The reason for filing the dispute. Its value will match the field containing the evidence.
    public enum Reason: String, Codable, CaseIterable {
        case canceled
        case duplicate
        case fraudulent
        case merchandiseNotAsDescribed = "merchandise_not_as_described"
        case notReceived = "not_received"
        case other
        case serviceNotAsDescribed = "service_not_as_described"
    }

    public init(canceled: IssuingDisputeCanceledEvidence? = nil, duplicate: IssuingDisputeDuplicateEvidence? = nil, fraudulent: IssuingDisputeFraudulentEvidence? = nil, merchandiseNotAsDescribed: IssuingDisputeMerchandiseNotAsDescribedEvidence? = nil, notReceived: IssuingDisputeNotReceivedEvidence? = nil, other: IssuingDisputeOtherEvidence? = nil, reason: Reason, serviceNotAsDescribed: IssuingDisputeServiceNotAsDescribedEvidence? = nil) {
        self.canceled = canceled
        self.duplicate = duplicate
        self.fraudulent = fraudulent
        self.merchandiseNotAsDescribed = merchandiseNotAsDescribed
        self.notReceived = notReceived
        self.other = other
        self.reason = reason
        self.serviceNotAsDescribed = serviceNotAsDescribed
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.canceled = try values.decodeIfPresent(IssuingDisputeCanceledEvidence.self, forKey: "canceled")
        self.duplicate = try values.decodeIfPresent(IssuingDisputeDuplicateEvidence.self, forKey: "duplicate")
        self.fraudulent = try values.decodeIfPresent(IssuingDisputeFraudulentEvidence.self, forKey: "fraudulent")
        self.merchandiseNotAsDescribed = try values.decodeIfPresent(IssuingDisputeMerchandiseNotAsDescribedEvidence.self, forKey: "merchandise_not_as_described")
        self.notReceived = try values.decodeIfPresent(IssuingDisputeNotReceivedEvidence.self, forKey: "not_received")
        self.other = try values.decodeIfPresent(IssuingDisputeOtherEvidence.self, forKey: "other")
        self.reason = try values.decode(Reason.self, forKey: "reason")
        self.serviceNotAsDescribed = try values.decodeIfPresent(IssuingDisputeServiceNotAsDescribedEvidence.self, forKey: "service_not_as_described")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(canceled, forKey: "canceled")
        try values.encodeIfPresent(duplicate, forKey: "duplicate")
        try values.encodeIfPresent(fraudulent, forKey: "fraudulent")
        try values.encodeIfPresent(merchandiseNotAsDescribed, forKey: "merchandise_not_as_described")
        try values.encodeIfPresent(notReceived, forKey: "not_received")
        try values.encodeIfPresent(other, forKey: "other")
        try values.encode(reason, forKey: "reason")
        try values.encodeIfPresent(serviceNotAsDescribed, forKey: "service_not_as_described")
    }
}
