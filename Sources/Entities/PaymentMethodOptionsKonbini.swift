// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Payment_method_options_konbini
public struct PaymentMethodOptionsKonbini: Codable {
    /// An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.
    public var confirmationNumber: String?
    /// The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
    public var expiresAfterDays: Int?
    /// The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set.
    public var expiresAt: Int?
    /// A product descriptor of up to 22 characters, which will appear to customers at the convenience store.
    public var productDescription: String?
    /// Indicates that you intend to make future payments with this PaymentIntent's payment method.
    /// 
    /// Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
    /// 
    /// When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    public var setupFutureUsage: SetupFutureUsage?

    /// Indicates that you intend to make future payments with this PaymentIntent's payment method.
    /// 
    /// Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
    /// 
    /// When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    public enum SetupFutureUsage: String, Codable, CaseIterable {
        case `none`
    }

    public init(confirmationNumber: String? = nil, expiresAfterDays: Int? = nil, expiresAt: Int? = nil, productDescription: String? = nil, setupFutureUsage: SetupFutureUsage? = nil) {
        self.confirmationNumber = confirmationNumber
        self.expiresAfterDays = expiresAfterDays
        self.expiresAt = expiresAt
        self.productDescription = productDescription
        self.setupFutureUsage = setupFutureUsage
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.confirmationNumber = try values.decodeIfPresent(String.self, forKey: "confirmation_number")
        self.expiresAfterDays = try values.decodeIfPresent(Int.self, forKey: "expires_after_days")
        self.expiresAt = try values.decodeIfPresent(Int.self, forKey: "expires_at")
        self.productDescription = try values.decodeIfPresent(String.self, forKey: "product_description")
        self.setupFutureUsage = try values.decodeIfPresent(SetupFutureUsage.self, forKey: "setup_future_usage")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(confirmationNumber, forKey: "confirmation_number")
        try values.encodeIfPresent(expiresAfterDays, forKey: "expires_after_days")
        try values.encodeIfPresent(expiresAt, forKey: "expires_at")
        try values.encodeIfPresent(productDescription, forKey: "product_description")
        try values.encodeIfPresent(setupFutureUsage, forKey: "setup_future_usage")
    }
}
