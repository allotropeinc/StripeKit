// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SourceOwner: Codable {
    /// Owner's address.
    public var address: Address?
    /// Owner's email address.
    public var email: String?
    /// Owner's full name.
    public var name: String?
    /// Owner's phone number (including extension).
    public var phone: String?
    /// Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedAddress: Address?
    /// Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedEmail: String?
    /// Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedName: String?
    /// Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedPhone: String?

    public init(address: Address? = nil, email: String? = nil, name: String? = nil, phone: String? = nil, verifiedAddress: Address? = nil, verifiedEmail: String? = nil, verifiedName: String? = nil, verifiedPhone: String? = nil) {
        self.address = address
        self.email = email
        self.name = name
        self.phone = phone
        self.verifiedAddress = verifiedAddress
        self.verifiedEmail = verifiedEmail
        self.verifiedName = verifiedName
        self.verifiedPhone = verifiedPhone
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.address = try values.decodeIfPresent(Address.self, forKey: "address")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.phone = try values.decodeIfPresent(String.self, forKey: "phone")
        self.verifiedAddress = try values.decodeIfPresent(Address.self, forKey: "verified_address")
        self.verifiedEmail = try values.decodeIfPresent(String.self, forKey: "verified_email")
        self.verifiedName = try values.decodeIfPresent(String.self, forKey: "verified_name")
        self.verifiedPhone = try values.decodeIfPresent(String.self, forKey: "verified_phone")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(address, forKey: "address")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(phone, forKey: "phone")
        try values.encodeIfPresent(verifiedAddress, forKey: "verified_address")
        try values.encodeIfPresent(verifiedEmail, forKey: "verified_email")
        try values.encodeIfPresent(verifiedName, forKey: "verified_name")
        try values.encodeIfPresent(verifiedPhone, forKey: "verified_phone")
    }
}
