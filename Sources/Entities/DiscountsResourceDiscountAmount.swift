// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct DiscountsResourceDiscountAmount: Codable {
    /// The amount, in %s, of the discount.
    public var amount: Int
    /// The discount that was applied to get this discount amount.
    public var discount: Discount

    /// The discount that was applied to get this discount amount.
    public final class Discount: Codable {
        public let string: String?
        /// A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
        /// It contains information about when the discount began, when it will end, and what it is applied to.
        /// 
        /// Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
        public let discount: StripeKit.Discount?
        public let deletedDiscount: DeletedDiscount?

        public init(string: String? = nil, discount: StripeKit.Discount? = nil, deletedDiscount: DeletedDiscount? = nil) {
            self.string = string
            self.discount = discount
            self.deletedDiscount = deletedDiscount
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.discount = try? container.decode(StripeKit.Discount.self)
            self.deletedDiscount = try? container.decode(DeletedDiscount.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = discount { try container.encode(value) }
            if let value = deletedDiscount { try container.encode(value) }
        }
    }

    public init(amount: Int, discount: Discount) {
        self.amount = amount
        self.discount = discount
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amount = try values.decode(Int.self, forKey: "amount")
        self.discount = try values.decode(Discount.self, forKey: "discount")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(amount, forKey: "amount")
        try values.encode(discount, forKey: "discount")
    }
}
