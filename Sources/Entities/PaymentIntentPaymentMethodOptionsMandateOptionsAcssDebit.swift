// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Payment_intent_payment_method_options_mandate_options_acss_debit
public struct PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit: Codable {
    /// A URL for custom mandate text
    public var customMandateURL: String?
    /// Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
    public var intervalDescription: String?
    /// Payment schedule for the mandate.
    public var paymentSchedule: PaymentSchedule?
    /// Transaction type of the mandate.
    public var transactionType: TransactionType?

    /// Payment schedule for the mandate.
    public enum PaymentSchedule: String, Codable, CaseIterable {
        case combined
        case interval
        case sporadic
    }

    /// Transaction type of the mandate.
    public enum TransactionType: String, Codable, CaseIterable {
        case business
        case personal
    }

    public init(customMandateURL: String? = nil, intervalDescription: String? = nil, paymentSchedule: PaymentSchedule? = nil, transactionType: TransactionType? = nil) {
        self.customMandateURL = customMandateURL
        self.intervalDescription = intervalDescription
        self.paymentSchedule = paymentSchedule
        self.transactionType = transactionType
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.customMandateURL = try values.decodeIfPresent(String.self, forKey: "custom_mandate_url")
        self.intervalDescription = try values.decodeIfPresent(String.self, forKey: "interval_description")
        self.paymentSchedule = try values.decodeIfPresent(PaymentSchedule.self, forKey: "payment_schedule")
        self.transactionType = try values.decodeIfPresent(TransactionType.self, forKey: "transaction_type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(customMandateURL, forKey: "custom_mandate_url")
        try values.encodeIfPresent(intervalDescription, forKey: "interval_description")
        try values.encodeIfPresent(paymentSchedule, forKey: "payment_schedule")
        try values.encodeIfPresent(transactionType, forKey: "transaction_type")
    }
}
