// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A coupon contains information about a percent-off or amount-off discount you
/// might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
/// [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
public struct Coupon: Codable {
    /// Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
    public var amountOff: Int?
    /// CouponAppliesTo
    public var appliesTo: CouponAppliesTo?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
    public var currency: String?
    /// Coupons defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
    public var currencyOptions: [String: CouponCurrencyOption]?
    /// One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
    public var duration: Duration
    /// If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
    public var durationInMonths: Int?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
    public var maxRedemptions: Int?
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// Name of the coupon displayed to customers on for instance invoices or receipts.
    public var name: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
    public var percentOff: Double?
    /// Date after which the coupon can no longer be redeemed.
    public var redeemBy: Int?
    /// Number of times this coupon has been applied to a customer.
    public var timesRedeemed: Int
    /// Taking account of the above properties, whether this coupon can still be applied to a customer.
    public var isValid: Bool

    /// One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
    public enum Duration: String, Codable, CaseIterable {
        case forever
        case once
        case repeating
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case coupon
    }

    public init(amountOff: Int? = nil, appliesTo: CouponAppliesTo? = nil, created: Int, currency: String? = nil, currencyOptions: [String: CouponCurrencyOption]? = nil, duration: Duration, durationInMonths: Int? = nil, id: String, isLivemode: Bool, maxRedemptions: Int? = nil, metadata: [String: String]? = nil, name: String? = nil, object: Object, percentOff: Double? = nil, redeemBy: Int? = nil, timesRedeemed: Int, isValid: Bool) {
        self.amountOff = amountOff
        self.appliesTo = appliesTo
        self.created = created
        self.currency = currency
        self.currencyOptions = currencyOptions
        self.duration = duration
        self.durationInMonths = durationInMonths
        self.id = id
        self.isLivemode = isLivemode
        self.maxRedemptions = maxRedemptions
        self.metadata = metadata
        self.name = name
        self.object = object
        self.percentOff = percentOff
        self.redeemBy = redeemBy
        self.timesRedeemed = timesRedeemed
        self.isValid = isValid
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amountOff = try values.decodeIfPresent(Int.self, forKey: "amount_off")
        self.appliesTo = try values.decodeIfPresent(CouponAppliesTo.self, forKey: "applies_to")
        self.created = try values.decode(Int.self, forKey: "created")
        self.currency = try values.decodeIfPresent(String.self, forKey: "currency")
        self.currencyOptions = try values.decodeIfPresent([String: CouponCurrencyOption].self, forKey: "currency_options")
        self.duration = try values.decode(Duration.self, forKey: "duration")
        self.durationInMonths = try values.decodeIfPresent(Int.self, forKey: "duration_in_months")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.maxRedemptions = try values.decodeIfPresent(Int.self, forKey: "max_redemptions")
        self.metadata = try values.decodeIfPresent([String: String].self, forKey: "metadata")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.object = try values.decode(Object.self, forKey: "object")
        self.percentOff = try values.decodeIfPresent(Double.self, forKey: "percent_off")
        self.redeemBy = try values.decodeIfPresent(Int.self, forKey: "redeem_by")
        self.timesRedeemed = try values.decode(Int.self, forKey: "times_redeemed")
        self.isValid = try values.decode(Bool.self, forKey: "valid")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(amountOff, forKey: "amount_off")
        try values.encodeIfPresent(appliesTo, forKey: "applies_to")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(currency, forKey: "currency")
        try values.encodeIfPresent(currencyOptions, forKey: "currency_options")
        try values.encode(duration, forKey: "duration")
        try values.encodeIfPresent(durationInMonths, forKey: "duration_in_months")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encodeIfPresent(maxRedemptions, forKey: "max_redemptions")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(percentOff, forKey: "percent_off")
        try values.encodeIfPresent(redeemBy, forKey: "redeem_by")
        try values.encode(timesRedeemed, forKey: "times_redeemed")
        try values.encode(isValid, forKey: "valid")
    }
}
