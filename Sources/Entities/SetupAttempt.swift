// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// PaymentFlowsSetupIntentSetupAttempt
///
/// A SetupAttempt describes one attempted confirmation of a SetupIntent,
/// whether that confirmation was successful or unsuccessful. You can use
/// SetupAttempts to inspect details of a specific attempt at setting up a
/// payment method using a SetupIntent.
public struct SetupAttempt: Codable {
    /// The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation.
    public var application: Application?
    /// If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
    /// 
    /// It can only be used for this Stripe Accountâ€™s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    public var isAttachToSelf: Bool?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation.
    public var customer: Customer?
    /// Indicates the directions of money movement for which this payment method is intended to be used.
    /// 
    /// Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
    public var flowDirections: [FlowDirection]?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation.
    public var onBehalfOf: OnBehalfOf?
    /// ID of the payment method used with this SetupAttempt.
    public var paymentMethod: PaymentMethod
    /// SetupAttemptPaymentMethodDetails
    public var paymentMethodDetails: SetupAttemptPaymentMethodDetails
    /// The error encountered during this attempt to confirm the SetupIntent, if any.
    public var setupError: APIErrors?
    /// ID of the SetupIntent that this attempt belongs to.
    public var setupIntent: SetupIntent
    /// Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.
    public var status: String
    /// The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.
    public var usage: String

    /// The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation.
    public final class Application: Codable {
        public let string: String?
        public let application: StripeKit.Application?

        public init(string: String? = nil, application: StripeKit.Application? = nil) {
            self.string = string
            self.application = application
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.application = try? container.decode(StripeKit.Application.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = application { try container.encode(value) }
        }
    }

    /// The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation.
    public final class Customer: Codable {
        public let string: String?
        /// This object represents a customer of your business. It lets you create recurring charges and track payments that belong to the same customer.
        /// 
        /// Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
        public let customer: StripeKit.Customer?
        public let deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeKit.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeKit.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    public enum FlowDirection: String, Codable, CaseIterable {
        case inbound
        case outbound
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case setupAttempt = "setup_attempt"
    }

    /// The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation.
    public struct OnBehalfOf: Codable {
        public var string: String?
        /// This is an object representing a Stripe account. You can retrieve it to see
        /// properties on the account like its current e-mail address or if the account is
        /// enabled yet to make live charges.
        /// 
        /// Some properties, marked below, are available only to platforms that want to
        /// [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// ID of the payment method used with this SetupAttempt.
    public final class PaymentMethod: Codable {
        public let string: String?
        /// PaymentMethod objects represent your customer's payment instruments.
        /// You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
        /// Customer objects to store instrument details for future payments.
        /// 
        /// Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
        public let paymentMethod: StripeKit.PaymentMethod?

        public init(string: String? = nil, paymentMethod: StripeKit.PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(StripeKit.PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// ID of the SetupIntent that this attempt belongs to.
    public final class SetupIntent: Codable {
        public let string: String?
        /// A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
        /// For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
        /// Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
        /// 
        /// Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
        /// Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
        /// The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
        /// you through the setup process.
        /// 
        /// Successful SetupIntents result in payment credentials that are optimized for future payments.
        /// For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
        /// [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
        /// in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
        /// If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
        /// it will automatically attach the resulting payment method to that Customer.
        /// We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
        /// PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
        /// 
        /// By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
        /// even as regulations change over time.
        /// 
        /// Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
        public let setupIntent: StripeKit.SetupIntent?

        public init(string: String? = nil, setupIntent: StripeKit.SetupIntent? = nil) {
            self.string = string
            self.setupIntent = setupIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.setupIntent = try? container.decode(StripeKit.SetupIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = setupIntent { try container.encode(value) }
        }
    }

    public init(application: Application? = nil, isAttachToSelf: Bool? = nil, created: Int, customer: Customer? = nil, flowDirections: [FlowDirection]? = nil, id: String, isLivemode: Bool, object: Object, onBehalfOf: OnBehalfOf? = nil, paymentMethod: PaymentMethod, paymentMethodDetails: SetupAttemptPaymentMethodDetails, setupError: APIErrors? = nil, setupIntent: SetupIntent, status: String, usage: String) {
        self.application = application
        self.isAttachToSelf = isAttachToSelf
        self.created = created
        self.customer = customer
        self.flowDirections = flowDirections
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.onBehalfOf = onBehalfOf
        self.paymentMethod = paymentMethod
        self.paymentMethodDetails = paymentMethodDetails
        self.setupError = setupError
        self.setupIntent = setupIntent
        self.status = status
        self.usage = usage
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.application = try values.decodeIfPresent(Application.self, forKey: "application")
        self.isAttachToSelf = try values.decodeIfPresent(Bool.self, forKey: "attach_to_self")
        self.created = try values.decode(Int.self, forKey: "created")
        self.customer = try values.decodeIfPresent(Customer.self, forKey: "customer")
        self.flowDirections = try values.decodeIfPresent([FlowDirection].self, forKey: "flow_directions")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.object = try values.decode(Object.self, forKey: "object")
        self.onBehalfOf = try values.decodeIfPresent(OnBehalfOf.self, forKey: "on_behalf_of")
        self.paymentMethod = try values.decode(PaymentMethod.self, forKey: "payment_method")
        self.paymentMethodDetails = try values.decode(SetupAttemptPaymentMethodDetails.self, forKey: "payment_method_details")
        self.setupError = try values.decodeIfPresent(APIErrors.self, forKey: "setup_error")
        self.setupIntent = try values.decode(SetupIntent.self, forKey: "setup_intent")
        self.status = try values.decode(String.self, forKey: "status")
        self.usage = try values.decode(String.self, forKey: "usage")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(application, forKey: "application")
        try values.encodeIfPresent(isAttachToSelf, forKey: "attach_to_self")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(customer, forKey: "customer")
        try values.encodeIfPresent(flowDirections, forKey: "flow_directions")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(onBehalfOf, forKey: "on_behalf_of")
        try values.encode(paymentMethod, forKey: "payment_method")
        try values.encode(paymentMethodDetails, forKey: "payment_method_details")
        try values.encodeIfPresent(setupError, forKey: "setup_error")
        try values.encode(setupIntent, forKey: "setup_intent")
        try values.encode(status, forKey: "status")
        try values.encode(usage, forKey: "usage")
    }
}
