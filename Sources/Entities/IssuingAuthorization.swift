// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
/// object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
/// purchase to be completed successfully.
/// 
/// Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
public struct IssuingAuthorization: Codable {
    /// The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var amount: Int
    /// Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var amountDetails: IssuingAuthorizationAmountDetails?
    /// Whether the authorization has been approved.
    public var isApproved: Bool
    /// How the card details were provided.
    public var authorizationMethod: AuthorizationMethod
    /// List of balance transactions associated with this authorization.
    public var balanceTransactions: [BalanceTransaction]
    /// IssuingCard
    ///
    /// You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
    public var card: IssuingCard
    /// The cardholder to whom this authorization belongs.
    public var cardholder: Cardholder?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var merchantAmount: Int
    /// The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var merchantCurrency: String
    /// IssuingAuthorizationMerchantData
    public var merchantData: IssuingAuthorizationMerchantData
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook.
    public var pendingRequest: IssuingAuthorizationPendingRequest?
    /// History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization.
    public var requestHistory: [IssuingAuthorizationRequest]
    /// The current status of the authorization in its lifecycle.
    public var status: Status
    /// List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
    public var transactions: [IssuingTransaction]
    /// [Treasury](https://stripe.com/docs/api/treasury) details related to this authorization if it was created on a [FinancialAccount](https://stripe.com/docs/api/treasury/financial_accounts).
    public var treasury: IssuingAuthorizationTreasury?
    /// IssuingAuthorizationVerificationData
    public var verificationData: IssuingAuthorizationVerificationData
    /// The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`.
    public var wallet: String?

    /// How the card details were provided.
    public enum AuthorizationMethod: String, Codable, CaseIterable {
        case chip
        case contactless
        case keyedIn = "keyed_in"
        case online
        case swipe
    }

    /// The cardholder to whom this authorization belongs.
    public struct Cardholder: Codable {
        public var string: String?
        /// An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
        /// 
        /// Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
        public var issuingCardholder: IssuingCardholder?

        public init(string: String? = nil, issuingCardholder: IssuingCardholder? = nil) {
            self.string = string
            self.issuingCardholder = issuingCardholder
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.issuingCardholder = try? container.decode(IssuingCardholder.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = issuingCardholder { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case issuingAuthorization = "issuing.authorization"
    }

    /// The current status of the authorization in its lifecycle.
    public enum Status: String, Codable, CaseIterable {
        case closed
        case pending
        case reversed
    }

    public init(amount: Int, amountDetails: IssuingAuthorizationAmountDetails? = nil, isApproved: Bool, authorizationMethod: AuthorizationMethod, balanceTransactions: [BalanceTransaction], card: IssuingCard, cardholder: Cardholder? = nil, created: Int, currency: String, id: String, isLivemode: Bool, merchantAmount: Int, merchantCurrency: String, merchantData: IssuingAuthorizationMerchantData, metadata: [String: String], object: Object, pendingRequest: IssuingAuthorizationPendingRequest? = nil, requestHistory: [IssuingAuthorizationRequest], status: Status, transactions: [IssuingTransaction], treasury: IssuingAuthorizationTreasury? = nil, verificationData: IssuingAuthorizationVerificationData, wallet: String? = nil) {
        self.amount = amount
        self.amountDetails = amountDetails
        self.isApproved = isApproved
        self.authorizationMethod = authorizationMethod
        self.balanceTransactions = balanceTransactions
        self.card = card
        self.cardholder = cardholder
        self.created = created
        self.currency = currency
        self.id = id
        self.isLivemode = isLivemode
        self.merchantAmount = merchantAmount
        self.merchantCurrency = merchantCurrency
        self.merchantData = merchantData
        self.metadata = metadata
        self.object = object
        self.pendingRequest = pendingRequest
        self.requestHistory = requestHistory
        self.status = status
        self.transactions = transactions
        self.treasury = treasury
        self.verificationData = verificationData
        self.wallet = wallet
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amount = try values.decode(Int.self, forKey: "amount")
        self.amountDetails = try values.decodeIfPresent(IssuingAuthorizationAmountDetails.self, forKey: "amount_details")
        self.isApproved = try values.decode(Bool.self, forKey: "approved")
        self.authorizationMethod = try values.decode(AuthorizationMethod.self, forKey: "authorization_method")
        self.balanceTransactions = try values.decode([BalanceTransaction].self, forKey: "balance_transactions")
        self.card = try values.decode(IssuingCard.self, forKey: "card")
        self.cardholder = try values.decodeIfPresent(Cardholder.self, forKey: "cardholder")
        self.created = try values.decode(Int.self, forKey: "created")
        self.currency = try values.decode(String.self, forKey: "currency")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.merchantAmount = try values.decode(Int.self, forKey: "merchant_amount")
        self.merchantCurrency = try values.decode(String.self, forKey: "merchant_currency")
        self.merchantData = try values.decode(IssuingAuthorizationMerchantData.self, forKey: "merchant_data")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.pendingRequest = try values.decodeIfPresent(IssuingAuthorizationPendingRequest.self, forKey: "pending_request")
        self.requestHistory = try values.decode([IssuingAuthorizationRequest].self, forKey: "request_history")
        self.status = try values.decode(Status.self, forKey: "status")
        self.transactions = try values.decode([IssuingTransaction].self, forKey: "transactions")
        self.treasury = try values.decodeIfPresent(IssuingAuthorizationTreasury.self, forKey: "treasury")
        self.verificationData = try values.decode(IssuingAuthorizationVerificationData.self, forKey: "verification_data")
        self.wallet = try values.decodeIfPresent(String.self, forKey: "wallet")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(amount, forKey: "amount")
        try values.encodeIfPresent(amountDetails, forKey: "amount_details")
        try values.encode(isApproved, forKey: "approved")
        try values.encode(authorizationMethod, forKey: "authorization_method")
        try values.encode(balanceTransactions, forKey: "balance_transactions")
        try values.encode(card, forKey: "card")
        try values.encodeIfPresent(cardholder, forKey: "cardholder")
        try values.encode(created, forKey: "created")
        try values.encode(currency, forKey: "currency")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(merchantAmount, forKey: "merchant_amount")
        try values.encode(merchantCurrency, forKey: "merchant_currency")
        try values.encode(merchantData, forKey: "merchant_data")
        try values.encode(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(pendingRequest, forKey: "pending_request")
        try values.encode(requestHistory, forKey: "request_history")
        try values.encode(status, forKey: "status")
        try values.encode(transactions, forKey: "transactions")
        try values.encodeIfPresent(treasury, forKey: "treasury")
        try values.encode(verificationData, forKey: "verification_data")
        try values.encodeIfPresent(wallet, forKey: "wallet")
    }
}
