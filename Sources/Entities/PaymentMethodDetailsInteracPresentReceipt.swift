// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Payment_method_details_interac_present_receipt
public struct PaymentMethodDetailsInteracPresentReceipt: Codable {
    /// The type of account being debited or credited
    public var accountType: AccountType?
    /// EMV tag 9F26, cryptogram generated by the integrated circuit chip.
    public var applicationCryptogram: String?
    /// Mnenomic of the Application Identifier.
    public var applicationPreferredName: String?
    /// Identifier for this transaction.
    public var authorizationCode: String?
    /// EMV tag 8A. A code returned by the card issuer.
    public var authorizationResponseCode: String?
    /// How the cardholder verified ownership of the card.
    public var cardholderVerificationMethod: String?
    /// EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
    public var dedicatedFileName: String?
    /// The outcome of a series of EMV functions performed by the card reader.
    public var terminalVerificationResults: String?
    /// An indication of various EMV functions performed during the transaction.
    public var transactionStatusInformation: String?

    /// The type of account being debited or credited
    public enum AccountType: String, Codable, CaseIterable {
        case checking
        case savings
        case unknown
    }

    public init(accountType: AccountType? = nil, applicationCryptogram: String? = nil, applicationPreferredName: String? = nil, authorizationCode: String? = nil, authorizationResponseCode: String? = nil, cardholderVerificationMethod: String? = nil, dedicatedFileName: String? = nil, terminalVerificationResults: String? = nil, transactionStatusInformation: String? = nil) {
        self.accountType = accountType
        self.applicationCryptogram = applicationCryptogram
        self.applicationPreferredName = applicationPreferredName
        self.authorizationCode = authorizationCode
        self.authorizationResponseCode = authorizationResponseCode
        self.cardholderVerificationMethod = cardholderVerificationMethod
        self.dedicatedFileName = dedicatedFileName
        self.terminalVerificationResults = terminalVerificationResults
        self.transactionStatusInformation = transactionStatusInformation
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.accountType = try values.decodeIfPresent(AccountType.self, forKey: "account_type")
        self.applicationCryptogram = try values.decodeIfPresent(String.self, forKey: "application_cryptogram")
        self.applicationPreferredName = try values.decodeIfPresent(String.self, forKey: "application_preferred_name")
        self.authorizationCode = try values.decodeIfPresent(String.self, forKey: "authorization_code")
        self.authorizationResponseCode = try values.decodeIfPresent(String.self, forKey: "authorization_response_code")
        self.cardholderVerificationMethod = try values.decodeIfPresent(String.self, forKey: "cardholder_verification_method")
        self.dedicatedFileName = try values.decodeIfPresent(String.self, forKey: "dedicated_file_name")
        self.terminalVerificationResults = try values.decodeIfPresent(String.self, forKey: "terminal_verification_results")
        self.transactionStatusInformation = try values.decodeIfPresent(String.self, forKey: "transaction_status_information")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(accountType, forKey: "account_type")
        try values.encodeIfPresent(applicationCryptogram, forKey: "application_cryptogram")
        try values.encodeIfPresent(applicationPreferredName, forKey: "application_preferred_name")
        try values.encodeIfPresent(authorizationCode, forKey: "authorization_code")
        try values.encodeIfPresent(authorizationResponseCode, forKey: "authorization_response_code")
        try values.encodeIfPresent(cardholderVerificationMethod, forKey: "cardholder_verification_method")
        try values.encodeIfPresent(dedicatedFileName, forKey: "dedicated_file_name")
        try values.encodeIfPresent(terminalVerificationResults, forKey: "terminal_verification_results")
        try values.encodeIfPresent(transactionStatusInformation, forKey: "transaction_status_information")
    }
}
