// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SourceTypeCard: Codable {
    public var addressLine1Check: String?
    public var addressZipCheck: String?
    public var brand: String?
    public var country: String?
    public var cvcCheck: String?
    public var dynamicLast4: String?
    public var expMonth: Int?
    public var expYear: Int?
    public var fingerprint: String?
    public var funding: String?
    public var last4: String?
    public var name: String?
    public var threeDSecure: String?
    public var tokenizationMethod: String?

    public init(addressLine1Check: String? = nil, addressZipCheck: String? = nil, brand: String? = nil, country: String? = nil, cvcCheck: String? = nil, dynamicLast4: String? = nil, expMonth: Int? = nil, expYear: Int? = nil, fingerprint: String? = nil, funding: String? = nil, last4: String? = nil, name: String? = nil, threeDSecure: String? = nil, tokenizationMethod: String? = nil) {
        self.addressLine1Check = addressLine1Check
        self.addressZipCheck = addressZipCheck
        self.brand = brand
        self.country = country
        self.cvcCheck = cvcCheck
        self.dynamicLast4 = dynamicLast4
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.last4 = last4
        self.name = name
        self.threeDSecure = threeDSecure
        self.tokenizationMethod = tokenizationMethod
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.addressLine1Check = try values.decodeIfPresent(String.self, forKey: "address_line1_check")
        self.addressZipCheck = try values.decodeIfPresent(String.self, forKey: "address_zip_check")
        self.brand = try values.decodeIfPresent(String.self, forKey: "brand")
        self.country = try values.decodeIfPresent(String.self, forKey: "country")
        self.cvcCheck = try values.decodeIfPresent(String.self, forKey: "cvc_check")
        self.dynamicLast4 = try values.decodeIfPresent(String.self, forKey: "dynamic_last4")
        self.expMonth = try values.decodeIfPresent(Int.self, forKey: "exp_month")
        self.expYear = try values.decodeIfPresent(Int.self, forKey: "exp_year")
        self.fingerprint = try values.decodeIfPresent(String.self, forKey: "fingerprint")
        self.funding = try values.decodeIfPresent(String.self, forKey: "funding")
        self.last4 = try values.decodeIfPresent(String.self, forKey: "last4")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.threeDSecure = try values.decodeIfPresent(String.self, forKey: "three_d_secure")
        self.tokenizationMethod = try values.decodeIfPresent(String.self, forKey: "tokenization_method")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(addressLine1Check, forKey: "address_line1_check")
        try values.encodeIfPresent(addressZipCheck, forKey: "address_zip_check")
        try values.encodeIfPresent(brand, forKey: "brand")
        try values.encodeIfPresent(country, forKey: "country")
        try values.encodeIfPresent(cvcCheck, forKey: "cvc_check")
        try values.encodeIfPresent(dynamicLast4, forKey: "dynamic_last4")
        try values.encodeIfPresent(expMonth, forKey: "exp_month")
        try values.encodeIfPresent(expYear, forKey: "exp_year")
        try values.encodeIfPresent(fingerprint, forKey: "fingerprint")
        try values.encodeIfPresent(funding, forKey: "funding")
        try values.encodeIfPresent(last4, forKey: "last4")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(threeDSecure, forKey: "three_d_secure")
        try values.encodeIfPresent(tokenizationMethod, forKey: "tokenization_method")
    }
}
