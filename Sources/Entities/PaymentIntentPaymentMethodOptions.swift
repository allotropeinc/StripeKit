// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PaymentIntentPaymentMethodOptions: Codable {
    public var acssDebit: AcssDebit?
    public var affirm: Affirm?
    public var afterpayClearpay: AfterpayClearpay?
    public var alipay: Alipay?
    public var auBecsDebit: AuBecsDebit?
    public var bacsDebit: BacsDebit?
    public var bancontact: Bancontact?
    public var blik: Blik?
    public var boleto: Boleto?
    public var card: Card?
    public var cardPresent: CardPresent?
    public var customerBalance: CustomerBalance?
    public var eps: Eps?
    public var fpx: Fpx?
    public var giropay: Giropay?
    public var grabpay: Grabpay?
    public var ideal: Ideal?
    public var interacPresent: InteracPresent?
    public var klarna: Klarna?
    public var konbini: Konbini?
    public var link: Link?
    public var oxxo: Oxxo?
    public var p24: P24?
    public var paynow: Paynow?
    public var promptpay: Promptpay?
    public var sepaDebit: SepaDebit?
    public var sofort: Sofort?
    public var usBankAccount: UsBankAccount?
    public var wechatPay: WechatPay?

    public struct AcssDebit: Codable {
        /// Payment_intent_payment_method_options_acss_debit
        public var paymentIntentPaymentMethodOptionsAcssDebit: PaymentIntentPaymentMethodOptionsAcssDebit?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentIntentPaymentMethodOptionsAcssDebit: PaymentIntentPaymentMethodOptionsAcssDebit? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentIntentPaymentMethodOptionsAcssDebit = paymentIntentPaymentMethodOptionsAcssDebit
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentPaymentMethodOptionsAcssDebit = try? container.decode(PaymentIntentPaymentMethodOptionsAcssDebit.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentPaymentMethodOptionsAcssDebit { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Affirm: Codable {
        /// Payment_method_options_affirm
        public var paymentMethodOptionsAffirm: PaymentMethodOptionsAffirm?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsAffirm: PaymentMethodOptionsAffirm? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsAffirm = paymentMethodOptionsAffirm
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsAffirm = try? container.decode(PaymentMethodOptionsAffirm.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsAffirm { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct AfterpayClearpay: Codable {
        /// Payment_method_options_afterpay_clearpay
        public var paymentMethodOptionsAfterpayClearpay: PaymentMethodOptionsAfterpayClearpay?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsAfterpayClearpay: PaymentMethodOptionsAfterpayClearpay? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsAfterpayClearpay = paymentMethodOptionsAfterpayClearpay
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsAfterpayClearpay = try? container.decode(PaymentMethodOptionsAfterpayClearpay.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsAfterpayClearpay { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Alipay: Codable {
        /// Payment_method_options_alipay
        public var paymentMethodOptionsAlipay: PaymentMethodOptionsAlipay?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsAlipay: PaymentMethodOptionsAlipay? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsAlipay = paymentMethodOptionsAlipay
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsAlipay = try? container.decode(PaymentMethodOptionsAlipay.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsAlipay { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct AuBecsDebit: Codable {
        /// Payment_intent_payment_method_options_au_becs_debit
        public var paymentIntentPaymentMethodOptionsAuBecsDebit: PaymentIntentPaymentMethodOptionsAuBecsDebit?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentIntentPaymentMethodOptionsAuBecsDebit: PaymentIntentPaymentMethodOptionsAuBecsDebit? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentIntentPaymentMethodOptionsAuBecsDebit = paymentIntentPaymentMethodOptionsAuBecsDebit
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentPaymentMethodOptionsAuBecsDebit = try? container.decode(PaymentIntentPaymentMethodOptionsAuBecsDebit.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentPaymentMethodOptionsAuBecsDebit { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct BacsDebit: Codable {
        /// Payment_method_options_bacs_debit
        public var paymentMethodOptionsBacsDebit: PaymentMethodOptionsBacsDebit?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsBacsDebit: PaymentMethodOptionsBacsDebit? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsBacsDebit = paymentMethodOptionsBacsDebit
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsBacsDebit = try? container.decode(PaymentMethodOptionsBacsDebit.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsBacsDebit { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Bancontact: Codable {
        /// Payment_method_options_bancontact
        public var paymentMethodOptionsBancontact: PaymentMethodOptionsBancontact?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsBancontact: PaymentMethodOptionsBancontact? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsBancontact = paymentMethodOptionsBancontact
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsBancontact = try? container.decode(PaymentMethodOptionsBancontact.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsBancontact { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Blik: Codable {
        /// Payment_intent_payment_method_options_blik
        public var object: [String: AnyJSON]?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(object: [String: AnyJSON]? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.object = object
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.object = try? container.decode([String: AnyJSON].self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = object { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Boleto: Codable {
        /// Payment_method_options_boleto
        public var paymentMethodOptionsBoleto: PaymentMethodOptionsBoleto?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsBoleto: PaymentMethodOptionsBoleto? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsBoleto = paymentMethodOptionsBoleto
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsBoleto = try? container.decode(PaymentMethodOptionsBoleto.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsBoleto { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Card: Codable {
        /// Payment_intent_payment_method_options_card
        public var paymentIntentPaymentMethodOptionsCard: PaymentIntentPaymentMethodOptionsCard?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentIntentPaymentMethodOptionsCard: PaymentIntentPaymentMethodOptionsCard? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentIntentPaymentMethodOptionsCard = paymentIntentPaymentMethodOptionsCard
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentPaymentMethodOptionsCard = try? container.decode(PaymentIntentPaymentMethodOptionsCard.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentPaymentMethodOptionsCard { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct CardPresent: Codable {
        /// Payment_method_options_card_present
        public var paymentMethodOptionsCardPresent: PaymentMethodOptionsCardPresent?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsCardPresent: PaymentMethodOptionsCardPresent? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsCardPresent = paymentMethodOptionsCardPresent
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsCardPresent = try? container.decode(PaymentMethodOptionsCardPresent.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsCardPresent { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct CustomerBalance: Codable {
        /// Payment_method_options_customer_balance
        public var paymentMethodOptionsCustomerBalance: PaymentMethodOptionsCustomerBalance?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsCustomerBalance: PaymentMethodOptionsCustomerBalance? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsCustomerBalance = paymentMethodOptionsCustomerBalance
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsCustomerBalance = try? container.decode(PaymentMethodOptionsCustomerBalance.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsCustomerBalance { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Eps: Codable {
        /// Payment_intent_payment_method_options_eps
        public var paymentIntentPaymentMethodOptionsEps: PaymentIntentPaymentMethodOptionsEps?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentIntentPaymentMethodOptionsEps: PaymentIntentPaymentMethodOptionsEps? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentIntentPaymentMethodOptionsEps = paymentIntentPaymentMethodOptionsEps
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentPaymentMethodOptionsEps = try? container.decode(PaymentIntentPaymentMethodOptionsEps.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentPaymentMethodOptionsEps { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Fpx: Codable {
        /// Payment_method_options_fpx
        public var paymentMethodOptionsFpx: PaymentMethodOptionsFpx?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsFpx: PaymentMethodOptionsFpx? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsFpx = paymentMethodOptionsFpx
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsFpx = try? container.decode(PaymentMethodOptionsFpx.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsFpx { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Giropay: Codable {
        /// Payment_method_options_giropay
        public var paymentMethodOptionsGiropay: PaymentMethodOptionsGiropay?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsGiropay: PaymentMethodOptionsGiropay? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsGiropay = paymentMethodOptionsGiropay
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsGiropay = try? container.decode(PaymentMethodOptionsGiropay.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsGiropay { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Grabpay: Codable {
        /// Payment_method_options_grabpay
        public var paymentMethodOptionsGrabpay: PaymentMethodOptionsGrabpay?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsGrabpay: PaymentMethodOptionsGrabpay? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsGrabpay = paymentMethodOptionsGrabpay
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsGrabpay = try? container.decode(PaymentMethodOptionsGrabpay.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsGrabpay { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Ideal: Codable {
        /// Payment_method_options_ideal
        public var paymentMethodOptionsIdeal: PaymentMethodOptionsIdeal?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsIdeal: PaymentMethodOptionsIdeal? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsIdeal = paymentMethodOptionsIdeal
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsIdeal = try? container.decode(PaymentMethodOptionsIdeal.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsIdeal { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct InteracPresent: Codable {
        /// Payment_method_options_interac_present
        public var object: [String: AnyJSON]?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(object: [String: AnyJSON]? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.object = object
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.object = try? container.decode([String: AnyJSON].self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = object { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Klarna: Codable {
        /// Payment_method_options_klarna
        public var paymentMethodOptionsKlarna: PaymentMethodOptionsKlarna?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsKlarna: PaymentMethodOptionsKlarna? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsKlarna = paymentMethodOptionsKlarna
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsKlarna = try? container.decode(PaymentMethodOptionsKlarna.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsKlarna { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Konbini: Codable {
        /// Payment_method_options_konbini
        public var paymentMethodOptionsKonbini: PaymentMethodOptionsKonbini?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsKonbini: PaymentMethodOptionsKonbini? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsKonbini = paymentMethodOptionsKonbini
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsKonbini = try? container.decode(PaymentMethodOptionsKonbini.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsKonbini { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Link: Codable {
        /// Payment_intent_payment_method_options_link
        public var paymentIntentPaymentMethodOptionsLink: PaymentIntentPaymentMethodOptionsLink?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentIntentPaymentMethodOptionsLink: PaymentIntentPaymentMethodOptionsLink? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentIntentPaymentMethodOptionsLink = paymentIntentPaymentMethodOptionsLink
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentPaymentMethodOptionsLink = try? container.decode(PaymentIntentPaymentMethodOptionsLink.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentPaymentMethodOptionsLink { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Oxxo: Codable {
        /// Payment_method_options_oxxo
        public var paymentMethodOptionsOxxo: PaymentMethodOptionsOxxo?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsOxxo: PaymentMethodOptionsOxxo? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsOxxo = paymentMethodOptionsOxxo
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsOxxo = try? container.decode(PaymentMethodOptionsOxxo.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsOxxo { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct P24: Codable {
        /// Payment_method_options_p24
        public var paymentMethodOptionsP24: PaymentMethodOptionsP24?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsP24: PaymentMethodOptionsP24? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsP24 = paymentMethodOptionsP24
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsP24 = try? container.decode(PaymentMethodOptionsP24.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsP24 { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Paynow: Codable {
        /// Payment_method_options_paynow
        public var paymentMethodOptionsPaynow: PaymentMethodOptionsPaynow?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsPaynow: PaymentMethodOptionsPaynow? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsPaynow = paymentMethodOptionsPaynow
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsPaynow = try? container.decode(PaymentMethodOptionsPaynow.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsPaynow { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Promptpay: Codable {
        /// Payment_method_options_promptpay
        public var paymentMethodOptionsPromptpay: PaymentMethodOptionsPromptpay?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsPromptpay: PaymentMethodOptionsPromptpay? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsPromptpay = paymentMethodOptionsPromptpay
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsPromptpay = try? container.decode(PaymentMethodOptionsPromptpay.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsPromptpay { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct SepaDebit: Codable {
        /// Payment_intent_payment_method_options_sepa_debit
        public var paymentIntentPaymentMethodOptionsSepaDebit: PaymentIntentPaymentMethodOptionsSepaDebit?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentIntentPaymentMethodOptionsSepaDebit: PaymentIntentPaymentMethodOptionsSepaDebit? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentIntentPaymentMethodOptionsSepaDebit = paymentIntentPaymentMethodOptionsSepaDebit
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentPaymentMethodOptionsSepaDebit = try? container.decode(PaymentIntentPaymentMethodOptionsSepaDebit.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentPaymentMethodOptionsSepaDebit { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Sofort: Codable {
        /// Payment_method_options_sofort
        public var paymentMethodOptionsSofort: PaymentMethodOptionsSofort?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsSofort: PaymentMethodOptionsSofort? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsSofort = paymentMethodOptionsSofort
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsSofort = try? container.decode(PaymentMethodOptionsSofort.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsSofort { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct UsBankAccount: Codable {
        /// Payment_intent_payment_method_options_us_bank_account
        public var paymentIntentPaymentMethodOptionsUsBankAccount: PaymentIntentPaymentMethodOptionsUsBankAccount?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentIntentPaymentMethodOptionsUsBankAccount: PaymentIntentPaymentMethodOptionsUsBankAccount? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentIntentPaymentMethodOptionsUsBankAccount = paymentIntentPaymentMethodOptionsUsBankAccount
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentPaymentMethodOptionsUsBankAccount = try? container.decode(PaymentIntentPaymentMethodOptionsUsBankAccount.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentPaymentMethodOptionsUsBankAccount { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct WechatPay: Codable {
        /// Payment_method_options_wechat_pay
        public var paymentMethodOptionsWechatPay: PaymentMethodOptionsWechatPay?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsWechatPay: PaymentMethodOptionsWechatPay? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsWechatPay = paymentMethodOptionsWechatPay
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsWechatPay = try? container.decode(PaymentMethodOptionsWechatPay.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsWechatPay { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public init(acssDebit: AcssDebit? = nil, affirm: Affirm? = nil, afterpayClearpay: AfterpayClearpay? = nil, alipay: Alipay? = nil, auBecsDebit: AuBecsDebit? = nil, bacsDebit: BacsDebit? = nil, bancontact: Bancontact? = nil, blik: Blik? = nil, boleto: Boleto? = nil, card: Card? = nil, cardPresent: CardPresent? = nil, customerBalance: CustomerBalance? = nil, eps: Eps? = nil, fpx: Fpx? = nil, giropay: Giropay? = nil, grabpay: Grabpay? = nil, ideal: Ideal? = nil, interacPresent: InteracPresent? = nil, klarna: Klarna? = nil, konbini: Konbini? = nil, link: Link? = nil, oxxo: Oxxo? = nil, p24: P24? = nil, paynow: Paynow? = nil, promptpay: Promptpay? = nil, sepaDebit: SepaDebit? = nil, sofort: Sofort? = nil, usBankAccount: UsBankAccount? = nil, wechatPay: WechatPay? = nil) {
        self.acssDebit = acssDebit
        self.affirm = affirm
        self.afterpayClearpay = afterpayClearpay
        self.alipay = alipay
        self.auBecsDebit = auBecsDebit
        self.bacsDebit = bacsDebit
        self.bancontact = bancontact
        self.blik = blik
        self.boleto = boleto
        self.card = card
        self.cardPresent = cardPresent
        self.customerBalance = customerBalance
        self.eps = eps
        self.fpx = fpx
        self.giropay = giropay
        self.grabpay = grabpay
        self.ideal = ideal
        self.interacPresent = interacPresent
        self.klarna = klarna
        self.konbini = konbini
        self.link = link
        self.oxxo = oxxo
        self.p24 = p24
        self.paynow = paynow
        self.promptpay = promptpay
        self.sepaDebit = sepaDebit
        self.sofort = sofort
        self.usBankAccount = usBankAccount
        self.wechatPay = wechatPay
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.acssDebit = try values.decodeIfPresent(AcssDebit.self, forKey: "acss_debit")
        self.affirm = try values.decodeIfPresent(Affirm.self, forKey: "affirm")
        self.afterpayClearpay = try values.decodeIfPresent(AfterpayClearpay.self, forKey: "afterpay_clearpay")
        self.alipay = try values.decodeIfPresent(Alipay.self, forKey: "alipay")
        self.auBecsDebit = try values.decodeIfPresent(AuBecsDebit.self, forKey: "au_becs_debit")
        self.bacsDebit = try values.decodeIfPresent(BacsDebit.self, forKey: "bacs_debit")
        self.bancontact = try values.decodeIfPresent(Bancontact.self, forKey: "bancontact")
        self.blik = try values.decodeIfPresent(Blik.self, forKey: "blik")
        self.boleto = try values.decodeIfPresent(Boleto.self, forKey: "boleto")
        self.card = try values.decodeIfPresent(Card.self, forKey: "card")
        self.cardPresent = try values.decodeIfPresent(CardPresent.self, forKey: "card_present")
        self.customerBalance = try values.decodeIfPresent(CustomerBalance.self, forKey: "customer_balance")
        self.eps = try values.decodeIfPresent(Eps.self, forKey: "eps")
        self.fpx = try values.decodeIfPresent(Fpx.self, forKey: "fpx")
        self.giropay = try values.decodeIfPresent(Giropay.self, forKey: "giropay")
        self.grabpay = try values.decodeIfPresent(Grabpay.self, forKey: "grabpay")
        self.ideal = try values.decodeIfPresent(Ideal.self, forKey: "ideal")
        self.interacPresent = try values.decodeIfPresent(InteracPresent.self, forKey: "interac_present")
        self.klarna = try values.decodeIfPresent(Klarna.self, forKey: "klarna")
        self.konbini = try values.decodeIfPresent(Konbini.self, forKey: "konbini")
        self.link = try values.decodeIfPresent(Link.self, forKey: "link")
        self.oxxo = try values.decodeIfPresent(Oxxo.self, forKey: "oxxo")
        self.p24 = try values.decodeIfPresent(P24.self, forKey: "p24")
        self.paynow = try values.decodeIfPresent(Paynow.self, forKey: "paynow")
        self.promptpay = try values.decodeIfPresent(Promptpay.self, forKey: "promptpay")
        self.sepaDebit = try values.decodeIfPresent(SepaDebit.self, forKey: "sepa_debit")
        self.sofort = try values.decodeIfPresent(Sofort.self, forKey: "sofort")
        self.usBankAccount = try values.decodeIfPresent(UsBankAccount.self, forKey: "us_bank_account")
        self.wechatPay = try values.decodeIfPresent(WechatPay.self, forKey: "wechat_pay")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(acssDebit, forKey: "acss_debit")
        try values.encodeIfPresent(affirm, forKey: "affirm")
        try values.encodeIfPresent(afterpayClearpay, forKey: "afterpay_clearpay")
        try values.encodeIfPresent(alipay, forKey: "alipay")
        try values.encodeIfPresent(auBecsDebit, forKey: "au_becs_debit")
        try values.encodeIfPresent(bacsDebit, forKey: "bacs_debit")
        try values.encodeIfPresent(bancontact, forKey: "bancontact")
        try values.encodeIfPresent(blik, forKey: "blik")
        try values.encodeIfPresent(boleto, forKey: "boleto")
        try values.encodeIfPresent(card, forKey: "card")
        try values.encodeIfPresent(cardPresent, forKey: "card_present")
        try values.encodeIfPresent(customerBalance, forKey: "customer_balance")
        try values.encodeIfPresent(eps, forKey: "eps")
        try values.encodeIfPresent(fpx, forKey: "fpx")
        try values.encodeIfPresent(giropay, forKey: "giropay")
        try values.encodeIfPresent(grabpay, forKey: "grabpay")
        try values.encodeIfPresent(ideal, forKey: "ideal")
        try values.encodeIfPresent(interacPresent, forKey: "interac_present")
        try values.encodeIfPresent(klarna, forKey: "klarna")
        try values.encodeIfPresent(konbini, forKey: "konbini")
        try values.encodeIfPresent(link, forKey: "link")
        try values.encodeIfPresent(oxxo, forKey: "oxxo")
        try values.encodeIfPresent(p24, forKey: "p24")
        try values.encodeIfPresent(paynow, forKey: "paynow")
        try values.encodeIfPresent(promptpay, forKey: "promptpay")
        try values.encodeIfPresent(sepaDebit, forKey: "sepa_debit")
        try values.encodeIfPresent(sofort, forKey: "sofort")
        try values.encodeIfPresent(usBankAccount, forKey: "us_bank_account")
        try values.encodeIfPresent(wechatPay, forKey: "wechat_pay")
    }
}
