// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Reporting_report_type
///
/// The Report Type resource corresponds to a particular type of report, such as
/// the "Activity summary" or "Itemized payouts" reports. These objects are
/// identified by an ID belonging to a set of enumerated values. See
/// [API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
/// for those Report Type IDs, along with required and optional parameters.
/// 
/// Note that certain report types can only be run based on your live-mode data (not test-mode
/// data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
public struct ReportingReportType: Codable {
    /// Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
    public var dataAvailableEnd: Int
    /// Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
    public var dataAvailableStart: Int
    /// List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.)
    public var defaultColumns: [String]?
    /// The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Human-readable name of the Report Type
    public var name: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// When this Report Type was latest updated. Measured in seconds since the Unix epoch.
    public var updated: Int
    /// Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.
    public var version: Int

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case reportingReportType = "reporting.report_type"
    }

    public init(dataAvailableEnd: Int, dataAvailableStart: Int, defaultColumns: [String]? = nil, id: String, isLivemode: Bool, name: String, object: Object, updated: Int, version: Int) {
        self.dataAvailableEnd = dataAvailableEnd
        self.dataAvailableStart = dataAvailableStart
        self.defaultColumns = defaultColumns
        self.id = id
        self.isLivemode = isLivemode
        self.name = name
        self.object = object
        self.updated = updated
        self.version = version
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.dataAvailableEnd = try values.decode(Int.self, forKey: "data_available_end")
        self.dataAvailableStart = try values.decode(Int.self, forKey: "data_available_start")
        self.defaultColumns = try values.decodeIfPresent([String].self, forKey: "default_columns")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.name = try values.decode(String.self, forKey: "name")
        self.object = try values.decode(Object.self, forKey: "object")
        self.updated = try values.decode(Int.self, forKey: "updated")
        self.version = try values.decode(Int.self, forKey: "version")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(dataAvailableEnd, forKey: "data_available_end")
        try values.encode(dataAvailableStart, forKey: "data_available_start")
        try values.encodeIfPresent(defaultColumns, forKey: "default_columns")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(name, forKey: "name")
        try values.encode(object, forKey: "object")
        try values.encode(updated, forKey: "updated")
        try values.encode(version, forKey: "version")
    }
}
