// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// BankConnectionsResourceLinkedAccount
///
/// A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.
public struct FinancialConnectionsAccount: Codable {
    /// The account holder that this account belongs to.
    public var accountHolder: BankConnectionsResourceAccountholder?
    /// The most recent information about the account's balance.
    public var balance: BankConnectionsResourceBalance?
    /// The state of the most recent attempt to refresh the account balance.
    public var balanceRefresh: BankConnectionsResourceBalanceRefresh?
    /// The type of the account. Account category is further divided in `subcategory`.
    public var category: Category
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// A human-readable name that has been assigned to this account, either by the account holder or by the institution.
    public var displayName: String?
    /// Unique identifier for the object.
    public var id: String
    /// The name of the institution that holds this account.
    public var institutionName: String
    /// The last 4 digits of the account number. If present, this will be 4 numeric characters.
    public var last4: String?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The most recent information about the account's owners.
    public var ownership: Ownership?
    /// The state of the most recent attempt to refresh the account owners.
    public var ownershipRefresh: BankConnectionsResourceOwnershipRefresh?
    /// The list of permissions granted by this account.
    public var permissions: [Permission]?
    /// The status of the link to the account.
    public var status: Status
    /// If `category` is `cash`, one of:
    /// 
    ///  - `checking`
    ///  - `savings`
    ///  - `other`
    /// 
    /// If `category` is `credit`, one of:
    /// 
    ///  - `mortgage`
    ///  - `line_of_credit`
    ///  - `credit_card`
    ///  - `other`
    /// 
    /// If `category` is `investment` or `other`, this will be `other`.
    public var subcategory: Subcategory
    /// The [PaymentMethod type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account.
    public var supportedPaymentMethodTypes: [SupportedPaymentMethodType]

    /// The type of the account. Account category is further divided in `subcategory`.
    public enum Category: String, Codable, CaseIterable {
        case cash
        case credit
        case investment
        case other
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case financialConnectionsAccount = "financial_connections.account"
    }

    /// The most recent information about the account's owners.
    public struct Ownership: Codable {
        public var string: String?
        /// BankConnectionsResourceOwnership
        ///
        /// Describes a snapshot of the owners of an account at a particular point in time.
        public var financialConnectionsAccountOwnership: FinancialConnectionsAccountOwnership?

        public init(string: String? = nil, financialConnectionsAccountOwnership: FinancialConnectionsAccountOwnership? = nil) {
            self.string = string
            self.financialConnectionsAccountOwnership = financialConnectionsAccountOwnership
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.financialConnectionsAccountOwnership = try? container.decode(FinancialConnectionsAccountOwnership.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = financialConnectionsAccountOwnership { try container.encode(value) }
        }
    }

    public enum Permission: String, Codable, CaseIterable {
        case balances
        case ownership
        case paymentMethod = "payment_method"
        case transactions
    }

    /// The status of the link to the account.
    public enum Status: String, Codable, CaseIterable {
        case active
        case disconnected
        case inactive
    }

    /// If `category` is `cash`, one of:
    /// 
    ///  - `checking`
    ///  - `savings`
    ///  - `other`
    /// 
    /// If `category` is `credit`, one of:
    /// 
    ///  - `mortgage`
    ///  - `line_of_credit`
    ///  - `credit_card`
    ///  - `other`
    /// 
    /// If `category` is `investment` or `other`, this will be `other`.
    public enum Subcategory: String, Codable, CaseIterable {
        case checking
        case creditCard = "credit_card"
        case lineOfCredit = "line_of_credit"
        case mortgage
        case other
        case savings
    }

    public enum SupportedPaymentMethodType: String, Codable, CaseIterable {
        case link
        case usBankAccount = "us_bank_account"
    }

    public init(accountHolder: BankConnectionsResourceAccountholder? = nil, balance: BankConnectionsResourceBalance? = nil, balanceRefresh: BankConnectionsResourceBalanceRefresh? = nil, category: Category, created: Int, displayName: String? = nil, id: String, institutionName: String, last4: String? = nil, isLivemode: Bool, object: Object, ownership: Ownership? = nil, ownershipRefresh: BankConnectionsResourceOwnershipRefresh? = nil, permissions: [Permission]? = nil, status: Status, subcategory: Subcategory, supportedPaymentMethodTypes: [SupportedPaymentMethodType]) {
        self.accountHolder = accountHolder
        self.balance = balance
        self.balanceRefresh = balanceRefresh
        self.category = category
        self.created = created
        self.displayName = displayName
        self.id = id
        self.institutionName = institutionName
        self.last4 = last4
        self.isLivemode = isLivemode
        self.object = object
        self.ownership = ownership
        self.ownershipRefresh = ownershipRefresh
        self.permissions = permissions
        self.status = status
        self.subcategory = subcategory
        self.supportedPaymentMethodTypes = supportedPaymentMethodTypes
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.accountHolder = try values.decodeIfPresent(BankConnectionsResourceAccountholder.self, forKey: "account_holder")
        self.balance = try values.decodeIfPresent(BankConnectionsResourceBalance.self, forKey: "balance")
        self.balanceRefresh = try values.decodeIfPresent(BankConnectionsResourceBalanceRefresh.self, forKey: "balance_refresh")
        self.category = try values.decode(Category.self, forKey: "category")
        self.created = try values.decode(Int.self, forKey: "created")
        self.displayName = try values.decodeIfPresent(String.self, forKey: "display_name")
        self.id = try values.decode(String.self, forKey: "id")
        self.institutionName = try values.decode(String.self, forKey: "institution_name")
        self.last4 = try values.decodeIfPresent(String.self, forKey: "last4")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.object = try values.decode(Object.self, forKey: "object")
        self.ownership = try values.decodeIfPresent(Ownership.self, forKey: "ownership")
        self.ownershipRefresh = try values.decodeIfPresent(BankConnectionsResourceOwnershipRefresh.self, forKey: "ownership_refresh")
        self.permissions = try values.decodeIfPresent([Permission].self, forKey: "permissions")
        self.status = try values.decode(Status.self, forKey: "status")
        self.subcategory = try values.decode(Subcategory.self, forKey: "subcategory")
        self.supportedPaymentMethodTypes = try values.decode([SupportedPaymentMethodType].self, forKey: "supported_payment_method_types")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(accountHolder, forKey: "account_holder")
        try values.encodeIfPresent(balance, forKey: "balance")
        try values.encodeIfPresent(balanceRefresh, forKey: "balance_refresh")
        try values.encode(category, forKey: "category")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(displayName, forKey: "display_name")
        try values.encode(id, forKey: "id")
        try values.encode(institutionName, forKey: "institution_name")
        try values.encodeIfPresent(last4, forKey: "last4")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(ownership, forKey: "ownership")
        try values.encodeIfPresent(ownershipRefresh, forKey: "ownership_refresh")
        try values.encodeIfPresent(permissions, forKey: "permissions")
        try values.encode(status, forKey: "status")
        try values.encode(subcategory, forKey: "subcategory")
        try values.encode(supportedPaymentMethodTypes, forKey: "supported_payment_method_types")
    }
}
