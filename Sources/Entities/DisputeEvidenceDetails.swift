// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct DisputeEvidenceDetails: Codable {
    /// Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute.
    public var dueBy: Int?
    /// Whether evidence has been staged for this dispute.
    public var hasEvidence: Bool
    /// Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.
    public var isPastDue: Bool
    /// The number of times evidence has been submitted. Typically, you may only submit evidence once.
    public var submissionCount: Int

    public init(dueBy: Int? = nil, hasEvidence: Bool, isPastDue: Bool, submissionCount: Int) {
        self.dueBy = dueBy
        self.hasEvidence = hasEvidence
        self.isPastDue = isPastDue
        self.submissionCount = submissionCount
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.dueBy = try values.decodeIfPresent(Int.self, forKey: "due_by")
        self.hasEvidence = try values.decode(Bool.self, forKey: "has_evidence")
        self.isPastDue = try values.decode(Bool.self, forKey: "past_due")
        self.submissionCount = try values.decode(Int.self, forKey: "submission_count")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(dueBy, forKey: "due_by")
        try values.encode(hasEvidence, forKey: "has_evidence")
        try values.encode(isPastDue, forKey: "past_due")
        try values.encode(submissionCount, forKey: "submission_count")
    }
}
