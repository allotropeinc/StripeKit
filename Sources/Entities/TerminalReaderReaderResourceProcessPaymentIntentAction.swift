// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Represents a reader action to process a payment intent
public struct TerminalReaderReaderResourceProcessPaymentIntentAction: Codable {
    /// Most recent PaymentIntent processed by the reader.
    public var paymentIntent: PaymentIntent
    /// TerminalReaderReaderResourceProcessConfig
    ///
    /// Represents a per-transaction override of a reader configuration
    public var processConfig: TerminalReaderReaderResourceProcessConfig?

    /// Most recent PaymentIntent processed by the reader.
    public final class PaymentIntent: Codable {
        public let string: String?
        /// A PaymentIntent guides you through the process of collecting a payment from your customer.
        /// We recommend that you create exactly one PaymentIntent for each order or
        /// customer session in your system. You can reference the PaymentIntent later to
        /// see the history of payment attempts for a particular session.
        /// 
        /// A PaymentIntent transitions through
        /// [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
        /// throughout its lifetime as it interfaces with Stripe.js to perform
        /// authentication flows and ultimately creates at most one successful charge.
        /// 
        /// Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
        public let paymentIntent: StripeKit.PaymentIntent?

        public init(string: String? = nil, paymentIntent: StripeKit.PaymentIntent? = nil) {
            self.string = string
            self.paymentIntent = paymentIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentIntent = try? container.decode(StripeKit.PaymentIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentIntent { try container.encode(value) }
        }
    }

    public init(paymentIntent: PaymentIntent, processConfig: TerminalReaderReaderResourceProcessConfig? = nil) {
        self.paymentIntent = paymentIntent
        self.processConfig = processConfig
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.paymentIntent = try values.decode(PaymentIntent.self, forKey: "payment_intent")
        self.processConfig = try values.decodeIfPresent(TerminalReaderReaderResourceProcessConfig.self, forKey: "process_config")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(paymentIntent, forKey: "payment_intent")
        try values.encodeIfPresent(processConfig, forKey: "process_config")
    }
}
