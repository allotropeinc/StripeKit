// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SubscriptionSchedulesResourceDefaultSettings: Codable {
    /// A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
    public var applicationFeePercent: Double?
    /// SubscriptionSchedulesResourceDefaultSettingsAutomaticTax
    public var automaticTax: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax?
    /// Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    public var billingCycleAnchor: BillingCycleAnchor
    /// Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
    public var billingThresholds: SubscriptionBillingThresholds?
    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    public var collectionMethod: CollectionMethod?
    /// ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
    public var defaultPaymentMethod: DefaultPaymentMethod?
    /// The subscription schedule's default invoice settings.
    public var invoiceSettings: InvoiceSettingSubscriptionScheduleSetting?
    /// The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
    public var transferData: SubscriptionTransferData?

    /// Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    public enum BillingCycleAnchor: String, Codable, CaseIterable {
        case automatic
        case phaseStart = "phase_start"
    }

    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    public enum CollectionMethod: String, Codable, CaseIterable {
        case chargeAutomatically = "charge_automatically"
        case sendInvoice = "send_invoice"
    }

    /// ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
    public struct DefaultPaymentMethod: Codable {
        public var string: String?
        /// PaymentMethod objects represent your customer's payment instruments.
        /// You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
        /// Customer objects to store instrument details for future payments.
        /// 
        /// Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    public init(applicationFeePercent: Double? = nil, automaticTax: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax? = nil, billingCycleAnchor: BillingCycleAnchor, billingThresholds: SubscriptionBillingThresholds? = nil, collectionMethod: CollectionMethod? = nil, defaultPaymentMethod: DefaultPaymentMethod? = nil, invoiceSettings: InvoiceSettingSubscriptionScheduleSetting? = nil, transferData: SubscriptionTransferData? = nil) {
        self.applicationFeePercent = applicationFeePercent
        self.automaticTax = automaticTax
        self.billingCycleAnchor = billingCycleAnchor
        self.billingThresholds = billingThresholds
        self.collectionMethod = collectionMethod
        self.defaultPaymentMethod = defaultPaymentMethod
        self.invoiceSettings = invoiceSettings
        self.transferData = transferData
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.applicationFeePercent = try values.decodeIfPresent(Double.self, forKey: "application_fee_percent")
        self.automaticTax = try values.decodeIfPresent(SubscriptionSchedulesResourceDefaultSettingsAutomaticTax.self, forKey: "automatic_tax")
        self.billingCycleAnchor = try values.decode(BillingCycleAnchor.self, forKey: "billing_cycle_anchor")
        self.billingThresholds = try values.decodeIfPresent(SubscriptionBillingThresholds.self, forKey: "billing_thresholds")
        self.collectionMethod = try values.decodeIfPresent(CollectionMethod.self, forKey: "collection_method")
        self.defaultPaymentMethod = try values.decodeIfPresent(DefaultPaymentMethod.self, forKey: "default_payment_method")
        self.invoiceSettings = try values.decodeIfPresent(InvoiceSettingSubscriptionScheduleSetting.self, forKey: "invoice_settings")
        self.transferData = try values.decodeIfPresent(SubscriptionTransferData.self, forKey: "transfer_data")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(applicationFeePercent, forKey: "application_fee_percent")
        try values.encodeIfPresent(automaticTax, forKey: "automatic_tax")
        try values.encode(billingCycleAnchor, forKey: "billing_cycle_anchor")
        try values.encodeIfPresent(billingThresholds, forKey: "billing_thresholds")
        try values.encodeIfPresent(collectionMethod, forKey: "collection_method")
        try values.encodeIfPresent(defaultPaymentMethod, forKey: "default_payment_method")
        try values.encodeIfPresent(invoiceSettings, forKey: "invoice_settings")
        try values.encodeIfPresent(transferData, forKey: "transfer_data")
    }
}
