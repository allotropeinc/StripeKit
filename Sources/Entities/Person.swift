// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// This is an object representing a person associated with a Stripe account.
/// 
/// A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
/// See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.
/// 
/// Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
public struct Person: Codable {
    /// The account the person is associated with.
    public var account: String
    public var address: Address?
    public var addressKana: LegalEntityJapanAddress?
    public var addressKanji: LegalEntityJapanAddress?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// LegalEntityDOB
    public var dob: LegalEntityDob?
    /// The person's email address.
    public var email: String?
    /// The person's first name.
    public var firstName: String?
    /// The Kana variation of the person's first name (Japan only).
    public var firstNameKana: String?
    /// The Kanji variation of the person's first name (Japan only).
    public var firstNameKanji: String?
    /// A list of alternate names or aliases that the person is known by.
    public var fullNameAliases: [String]?
    public var futureRequirements: PersonFutureRequirements?
    /// The person's gender (International regulations require either "male" or "female").
    public var gender: String?
    /// Unique identifier for the object.
    public var id: String
    /// Whether the person's `id_number` was provided.
    public var isIDNumberProvided: Bool?
    /// Whether the person's `id_number_secondary` was provided.
    public var isIDNumberSecondaryProvided: Bool?
    /// The person's last name.
    public var lastName: String?
    /// The Kana variation of the person's last name (Japan only).
    public var lastNameKana: String?
    /// The Kanji variation of the person's last name (Japan only).
    public var lastNameKanji: String?
    /// The person's maiden name.
    public var maidenName: String?
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// The country where the person is a national.
    public var nationality: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The person's phone number.
    public var phone: String?
    /// Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
    public var politicalExposure: PoliticalExposure?
    /// Address
    public var registeredAddress: Address?
    /// PersonRelationship
    public var relationship: PersonRelationship?
    public var requirements: PersonRequirements?
    /// Whether the last four digits of the person's Social Security number have been provided (U.S. only).
    public var isSsnLast4Provided: Bool?
    /// LegalEntityPersonVerification
    public var verification: LegalEntityPersonVerification?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case person
    }

    /// Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
    public enum PoliticalExposure: String, Codable, CaseIterable {
        case existing
        case `none`
    }

    public init(account: String, address: Address? = nil, addressKana: LegalEntityJapanAddress? = nil, addressKanji: LegalEntityJapanAddress? = nil, created: Int, dob: LegalEntityDob? = nil, email: String? = nil, firstName: String? = nil, firstNameKana: String? = nil, firstNameKanji: String? = nil, fullNameAliases: [String]? = nil, futureRequirements: PersonFutureRequirements? = nil, gender: String? = nil, id: String, isIDNumberProvided: Bool? = nil, isIDNumberSecondaryProvided: Bool? = nil, lastName: String? = nil, lastNameKana: String? = nil, lastNameKanji: String? = nil, maidenName: String? = nil, metadata: [String: String]? = nil, nationality: String? = nil, object: Object, phone: String? = nil, politicalExposure: PoliticalExposure? = nil, registeredAddress: Address? = nil, relationship: PersonRelationship? = nil, requirements: PersonRequirements? = nil, isSsnLast4Provided: Bool? = nil, verification: LegalEntityPersonVerification? = nil) {
        self.account = account
        self.address = address
        self.addressKana = addressKana
        self.addressKanji = addressKanji
        self.created = created
        self.dob = dob
        self.email = email
        self.firstName = firstName
        self.firstNameKana = firstNameKana
        self.firstNameKanji = firstNameKanji
        self.fullNameAliases = fullNameAliases
        self.futureRequirements = futureRequirements
        self.gender = gender
        self.id = id
        self.isIDNumberProvided = isIDNumberProvided
        self.isIDNumberSecondaryProvided = isIDNumberSecondaryProvided
        self.lastName = lastName
        self.lastNameKana = lastNameKana
        self.lastNameKanji = lastNameKanji
        self.maidenName = maidenName
        self.metadata = metadata
        self.nationality = nationality
        self.object = object
        self.phone = phone
        self.politicalExposure = politicalExposure
        self.registeredAddress = registeredAddress
        self.relationship = relationship
        self.requirements = requirements
        self.isSsnLast4Provided = isSsnLast4Provided
        self.verification = verification
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.account = try values.decode(String.self, forKey: "account")
        self.address = try values.decodeIfPresent(Address.self, forKey: "address")
        self.addressKana = try values.decodeIfPresent(LegalEntityJapanAddress.self, forKey: "address_kana")
        self.addressKanji = try values.decodeIfPresent(LegalEntityJapanAddress.self, forKey: "address_kanji")
        self.created = try values.decode(Int.self, forKey: "created")
        self.dob = try values.decodeIfPresent(LegalEntityDob.self, forKey: "dob")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.firstName = try values.decodeIfPresent(String.self, forKey: "first_name")
        self.firstNameKana = try values.decodeIfPresent(String.self, forKey: "first_name_kana")
        self.firstNameKanji = try values.decodeIfPresent(String.self, forKey: "first_name_kanji")
        self.fullNameAliases = try values.decodeIfPresent([String].self, forKey: "full_name_aliases")
        self.futureRequirements = try values.decodeIfPresent(PersonFutureRequirements.self, forKey: "future_requirements")
        self.gender = try values.decodeIfPresent(String.self, forKey: "gender")
        self.id = try values.decode(String.self, forKey: "id")
        self.isIDNumberProvided = try values.decodeIfPresent(Bool.self, forKey: "id_number_provided")
        self.isIDNumberSecondaryProvided = try values.decodeIfPresent(Bool.self, forKey: "id_number_secondary_provided")
        self.lastName = try values.decodeIfPresent(String.self, forKey: "last_name")
        self.lastNameKana = try values.decodeIfPresent(String.self, forKey: "last_name_kana")
        self.lastNameKanji = try values.decodeIfPresent(String.self, forKey: "last_name_kanji")
        self.maidenName = try values.decodeIfPresent(String.self, forKey: "maiden_name")
        self.metadata = try values.decodeIfPresent([String: String].self, forKey: "metadata")
        self.nationality = try values.decodeIfPresent(String.self, forKey: "nationality")
        self.object = try values.decode(Object.self, forKey: "object")
        self.phone = try values.decodeIfPresent(String.self, forKey: "phone")
        self.politicalExposure = try values.decodeIfPresent(PoliticalExposure.self, forKey: "political_exposure")
        self.registeredAddress = try values.decodeIfPresent(Address.self, forKey: "registered_address")
        self.relationship = try values.decodeIfPresent(PersonRelationship.self, forKey: "relationship")
        self.requirements = try values.decodeIfPresent(PersonRequirements.self, forKey: "requirements")
        self.isSsnLast4Provided = try values.decodeIfPresent(Bool.self, forKey: "ssn_last_4_provided")
        self.verification = try values.decodeIfPresent(LegalEntityPersonVerification.self, forKey: "verification")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(account, forKey: "account")
        try values.encodeIfPresent(address, forKey: "address")
        try values.encodeIfPresent(addressKana, forKey: "address_kana")
        try values.encodeIfPresent(addressKanji, forKey: "address_kanji")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(dob, forKey: "dob")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encodeIfPresent(firstName, forKey: "first_name")
        try values.encodeIfPresent(firstNameKana, forKey: "first_name_kana")
        try values.encodeIfPresent(firstNameKanji, forKey: "first_name_kanji")
        try values.encodeIfPresent(fullNameAliases, forKey: "full_name_aliases")
        try values.encodeIfPresent(futureRequirements, forKey: "future_requirements")
        try values.encodeIfPresent(gender, forKey: "gender")
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(isIDNumberProvided, forKey: "id_number_provided")
        try values.encodeIfPresent(isIDNumberSecondaryProvided, forKey: "id_number_secondary_provided")
        try values.encodeIfPresent(lastName, forKey: "last_name")
        try values.encodeIfPresent(lastNameKana, forKey: "last_name_kana")
        try values.encodeIfPresent(lastNameKanji, forKey: "last_name_kanji")
        try values.encodeIfPresent(maidenName, forKey: "maiden_name")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encodeIfPresent(nationality, forKey: "nationality")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(phone, forKey: "phone")
        try values.encodeIfPresent(politicalExposure, forKey: "political_exposure")
        try values.encodeIfPresent(registeredAddress, forKey: "registered_address")
        try values.encodeIfPresent(relationship, forKey: "relationship")
        try values.encodeIfPresent(requirements, forKey: "requirements")
        try values.encodeIfPresent(isSsnLast4Provided, forKey: "ssn_last_4_provided")
        try values.encodeIfPresent(verification, forKey: "verification")
    }
}
