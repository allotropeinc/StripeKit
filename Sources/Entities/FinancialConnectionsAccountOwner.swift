// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// BankConnectionsResourceOwner
public struct FinancialConnectionsAccountOwner: Codable {
    /// The email address of the owner.
    public var email: String?
    /// Unique identifier for the object.
    public var id: String
    /// The full name of the owner.
    public var name: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The ownership object that this owner belongs to.
    public var ownership: String
    /// The raw phone number of the owner.
    public var phone: String?
    /// The raw physical address of the owner.
    public var rawAddress: String?
    /// The timestamp of the refresh that updated this owner.
    public var refreshedAt: Int?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case financialConnectionsAccountOwner = "financial_connections.account_owner"
    }

    public init(email: String? = nil, id: String, name: String, object: Object, ownership: String, phone: String? = nil, rawAddress: String? = nil, refreshedAt: Int? = nil) {
        self.email = email
        self.id = id
        self.name = name
        self.object = object
        self.ownership = ownership
        self.phone = phone
        self.rawAddress = rawAddress
        self.refreshedAt = refreshedAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.id = try values.decode(String.self, forKey: "id")
        self.name = try values.decode(String.self, forKey: "name")
        self.object = try values.decode(Object.self, forKey: "object")
        self.ownership = try values.decode(String.self, forKey: "ownership")
        self.phone = try values.decodeIfPresent(String.self, forKey: "phone")
        self.rawAddress = try values.decodeIfPresent(String.self, forKey: "raw_address")
        self.refreshedAt = try values.decodeIfPresent(Int.self, forKey: "refreshed_at")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(email, forKey: "email")
        try values.encode(id, forKey: "id")
        try values.encode(name, forKey: "name")
        try values.encode(object, forKey: "object")
        try values.encode(ownership, forKey: "ownership")
        try values.encodeIfPresent(phone, forKey: "phone")
        try values.encodeIfPresent(rawAddress, forKey: "raw_address")
        try values.encodeIfPresent(refreshedAt, forKey: "refreshed_at")
    }
}
