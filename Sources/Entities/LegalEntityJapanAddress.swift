// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct LegalEntityJapanAddress: Codable {
    /// City/Ward.
    public var city: String?
    /// Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    public var country: String?
    /// Block/Building number.
    public var line1: String?
    /// Building details.
    public var line2: String?
    /// ZIP or postal code.
    public var postalCode: String?
    /// Prefecture.
    public var state: String?
    /// Town/cho-me.
    public var town: String?

    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
        self.city = city
        self.country = country
        self.line1 = line1
        self.line2 = line2
        self.postalCode = postalCode
        self.state = state
        self.town = town
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.city = try values.decodeIfPresent(String.self, forKey: "city")
        self.country = try values.decodeIfPresent(String.self, forKey: "country")
        self.line1 = try values.decodeIfPresent(String.self, forKey: "line1")
        self.line2 = try values.decodeIfPresent(String.self, forKey: "line2")
        self.postalCode = try values.decodeIfPresent(String.self, forKey: "postal_code")
        self.state = try values.decodeIfPresent(String.self, forKey: "state")
        self.town = try values.decodeIfPresent(String.self, forKey: "town")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(city, forKey: "city")
        try values.encodeIfPresent(country, forKey: "country")
        try values.encodeIfPresent(line1, forKey: "line1")
        try values.encodeIfPresent(line2, forKey: "line2")
        try values.encodeIfPresent(postalCode, forKey: "postal_code")
        try values.encodeIfPresent(state, forKey: "state")
        try values.encodeIfPresent(town, forKey: "town")
    }
}
