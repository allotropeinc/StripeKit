// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.
public struct SubscriptionSchedulePhaseConfiguration: Codable {
    /// A list of prices and quantities that will generate invoice items appended to the next invoice for this phase.
    public var addInvoiceItems: [SubscriptionScheduleAddInvoiceItem]
    /// A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
    public var applicationFeePercent: Double?
    /// SchedulesPhaseAutomaticTax
    public var automaticTax: SchedulesPhaseAutomaticTax?
    /// Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    public var billingCycleAnchor: BillingCycleAnchor?
    /// Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
    public var billingThresholds: SubscriptionBillingThresholds?
    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    public var collectionMethod: CollectionMethod?
    /// ID of the coupon to use during this phase of the subscription schedule.
    public var coupon: Coupon?
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String?
    /// ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
    public var defaultPaymentMethod: DefaultPaymentMethod?
    /// The default tax rates to apply to the subscription during this phase of the subscription schedule.
    public var defaultTaxRates: [TaxRate]?
    /// The end of this phase of the subscription schedule.
    public var endDate: Int
    /// The invoice settings applicable during this phase.
    public var invoiceSettings: InvoiceSettingSubscriptionScheduleSetting?
    /// Subscription items to configure the subscription to during this phase of the subscription schedule.
    public var items: [SubscriptionScheduleConfigurationItem]
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered. Updating the underlying subscription's `metadata` directly will not affect the current phase's `metadata`.
    public var metadata: [String: String]?
    /// If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
    public var prorationBehavior: ProrationBehavior
    /// The start of this phase of the subscription schedule.
    public var startDate: Int
    /// The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
    public var transferData: SubscriptionTransferData?
    /// When the trial ends within the phase.
    public var trialEnd: Int?

    /// Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    public enum BillingCycleAnchor: String, Codable, CaseIterable {
        case automatic
        case phaseStart = "phase_start"
    }

    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    public enum CollectionMethod: String, Codable, CaseIterable {
        case chargeAutomatically = "charge_automatically"
        case sendInvoice = "send_invoice"
    }

    /// ID of the coupon to use during this phase of the subscription schedule.
    public final class Coupon: Codable {
        public let string: String?
        /// A coupon contains information about a percent-off or amount-off discount you
        /// might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
        /// [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
        public let coupon: StripeKit.Coupon?
        public let deletedCoupon: DeletedCoupon?

        public init(string: String? = nil, coupon: StripeKit.Coupon? = nil, deletedCoupon: DeletedCoupon? = nil) {
            self.string = string
            self.coupon = coupon
            self.deletedCoupon = deletedCoupon
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.coupon = try? container.decode(StripeKit.Coupon.self)
            self.deletedCoupon = try? container.decode(DeletedCoupon.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = coupon { try container.encode(value) }
            if let value = deletedCoupon { try container.encode(value) }
        }
    }

    /// ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
    public struct DefaultPaymentMethod: Codable {
        public var string: String?
        /// PaymentMethod objects represent your customer's payment instruments.
        /// You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
        /// Customer objects to store instrument details for future payments.
        /// 
        /// Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
    public enum ProrationBehavior: String, Codable, CaseIterable {
        case alwaysInvoice = "always_invoice"
        case createProrations = "create_prorations"
        case `none`
    }

    public init(addInvoiceItems: [SubscriptionScheduleAddInvoiceItem], applicationFeePercent: Double? = nil, automaticTax: SchedulesPhaseAutomaticTax? = nil, billingCycleAnchor: BillingCycleAnchor? = nil, billingThresholds: SubscriptionBillingThresholds? = nil, collectionMethod: CollectionMethod? = nil, coupon: Coupon? = nil, currency: String? = nil, defaultPaymentMethod: DefaultPaymentMethod? = nil, defaultTaxRates: [TaxRate]? = nil, endDate: Int, invoiceSettings: InvoiceSettingSubscriptionScheduleSetting? = nil, items: [SubscriptionScheduleConfigurationItem], metadata: [String: String]? = nil, prorationBehavior: ProrationBehavior, startDate: Int, transferData: SubscriptionTransferData? = nil, trialEnd: Int? = nil) {
        self.addInvoiceItems = addInvoiceItems
        self.applicationFeePercent = applicationFeePercent
        self.automaticTax = automaticTax
        self.billingCycleAnchor = billingCycleAnchor
        self.billingThresholds = billingThresholds
        self.collectionMethod = collectionMethod
        self.coupon = coupon
        self.currency = currency
        self.defaultPaymentMethod = defaultPaymentMethod
        self.defaultTaxRates = defaultTaxRates
        self.endDate = endDate
        self.invoiceSettings = invoiceSettings
        self.items = items
        self.metadata = metadata
        self.prorationBehavior = prorationBehavior
        self.startDate = startDate
        self.transferData = transferData
        self.trialEnd = trialEnd
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.addInvoiceItems = try values.decode([SubscriptionScheduleAddInvoiceItem].self, forKey: "add_invoice_items")
        self.applicationFeePercent = try values.decodeIfPresent(Double.self, forKey: "application_fee_percent")
        self.automaticTax = try values.decodeIfPresent(SchedulesPhaseAutomaticTax.self, forKey: "automatic_tax")
        self.billingCycleAnchor = try values.decodeIfPresent(BillingCycleAnchor.self, forKey: "billing_cycle_anchor")
        self.billingThresholds = try values.decodeIfPresent(SubscriptionBillingThresholds.self, forKey: "billing_thresholds")
        self.collectionMethod = try values.decodeIfPresent(CollectionMethod.self, forKey: "collection_method")
        self.coupon = try values.decodeIfPresent(Coupon.self, forKey: "coupon")
        self.currency = try values.decodeIfPresent(String.self, forKey: "currency")
        self.defaultPaymentMethod = try values.decodeIfPresent(DefaultPaymentMethod.self, forKey: "default_payment_method")
        self.defaultTaxRates = try values.decodeIfPresent([TaxRate].self, forKey: "default_tax_rates")
        self.endDate = try values.decode(Int.self, forKey: "end_date")
        self.invoiceSettings = try values.decodeIfPresent(InvoiceSettingSubscriptionScheduleSetting.self, forKey: "invoice_settings")
        self.items = try values.decode([SubscriptionScheduleConfigurationItem].self, forKey: "items")
        self.metadata = try values.decodeIfPresent([String: String].self, forKey: "metadata")
        self.prorationBehavior = try values.decode(ProrationBehavior.self, forKey: "proration_behavior")
        self.startDate = try values.decode(Int.self, forKey: "start_date")
        self.transferData = try values.decodeIfPresent(SubscriptionTransferData.self, forKey: "transfer_data")
        self.trialEnd = try values.decodeIfPresent(Int.self, forKey: "trial_end")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(addInvoiceItems, forKey: "add_invoice_items")
        try values.encodeIfPresent(applicationFeePercent, forKey: "application_fee_percent")
        try values.encodeIfPresent(automaticTax, forKey: "automatic_tax")
        try values.encodeIfPresent(billingCycleAnchor, forKey: "billing_cycle_anchor")
        try values.encodeIfPresent(billingThresholds, forKey: "billing_thresholds")
        try values.encodeIfPresent(collectionMethod, forKey: "collection_method")
        try values.encodeIfPresent(coupon, forKey: "coupon")
        try values.encodeIfPresent(currency, forKey: "currency")
        try values.encodeIfPresent(defaultPaymentMethod, forKey: "default_payment_method")
        try values.encodeIfPresent(defaultTaxRates, forKey: "default_tax_rates")
        try values.encode(endDate, forKey: "end_date")
        try values.encodeIfPresent(invoiceSettings, forKey: "invoice_settings")
        try values.encode(items, forKey: "items")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encode(prorationBehavior, forKey: "proration_behavior")
        try values.encode(startDate, forKey: "start_date")
        try values.encodeIfPresent(transferData, forKey: "transfer_data")
        try values.encodeIfPresent(trialEnd, forKey: "trial_end")
    }
}
