// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PaymentPagesCheckoutSessionCustomerDetails: Codable {
    /// The customer's address after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022.
    public var address: Address?
    /// The email associated with the Customer, if one exists, on the Checkout Session after a completed Checkout Session or at time of session expiry.
    /// Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.
    public var email: String?
    /// The customer's name after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022.
    public var name: String?
    /// The customer's phone number after a completed Checkout Session.
    public var phone: String?
    /// The customer’s tax exempt status after a completed Checkout Session.
    public var taxExempt: TaxExempt?
    /// The customer’s tax IDs after a completed Checkout Session.
    public var taxIDs: [PaymentPagesCheckoutSessionTaxID]?

    /// The customer’s tax exempt status after a completed Checkout Session.
    public enum TaxExempt: String, Codable, CaseIterable {
        case exempt
        case `none`
        case reverse
    }

    public init(address: Address? = nil, email: String? = nil, name: String? = nil, phone: String? = nil, taxExempt: TaxExempt? = nil, taxIDs: [PaymentPagesCheckoutSessionTaxID]? = nil) {
        self.address = address
        self.email = email
        self.name = name
        self.phone = phone
        self.taxExempt = taxExempt
        self.taxIDs = taxIDs
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.address = try values.decodeIfPresent(Address.self, forKey: "address")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.phone = try values.decodeIfPresent(String.self, forKey: "phone")
        self.taxExempt = try values.decodeIfPresent(TaxExempt.self, forKey: "tax_exempt")
        self.taxIDs = try values.decodeIfPresent([PaymentPagesCheckoutSessionTaxID].self, forKey: "tax_ids")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(address, forKey: "address")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(phone, forKey: "phone")
        try values.encodeIfPresent(taxExempt, forKey: "tax_exempt")
        try values.encodeIfPresent(taxIDs, forKey: "tax_ids")
    }
}
