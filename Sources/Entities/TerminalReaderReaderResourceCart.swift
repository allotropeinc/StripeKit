// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Represents a cart to be displayed on the reader
public struct TerminalReaderReaderResourceCart: Codable {
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// List of line items in the cart.
    public var lineItems: [TerminalReaderReaderResourceLineItem]
    /// Tax amount for the entire cart. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var tax: Int?
    /// Total amount for the entire cart, including tax. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var total: Int

    public init(currency: String, lineItems: [TerminalReaderReaderResourceLineItem], tax: Int? = nil, total: Int) {
        self.currency = currency
        self.lineItems = lineItems
        self.tax = tax
        self.total = total
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.currency = try values.decode(String.self, forKey: "currency")
        self.lineItems = try values.decode([TerminalReaderReaderResourceLineItem].self, forKey: "line_items")
        self.tax = try values.decodeIfPresent(Int.self, forKey: "tax")
        self.total = try values.decode(Int.self, forKey: "total")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(currency, forKey: "currency")
        try values.encode(lineItems, forKey: "line_items")
        try values.encodeIfPresent(tax, forKey: "tax")
        try values.encode(total, forKey: "total")
    }
}
