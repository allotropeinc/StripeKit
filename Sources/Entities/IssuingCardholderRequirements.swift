// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct IssuingCardholderRequirements: Codable {
    /// If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
    public var disabledReason: DisabledReason?
    /// Array of fields that need to be collected in order to verify and re-enable the cardholder.
    public var pastDue: [PastDueItem]?

    /// If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
    public enum DisabledReason: String, Codable, CaseIterable {
        case listed
        case rejectedListed = "rejected.listed"
        case underReview = "under_review"
    }

    public enum PastDueItem: String, Codable, CaseIterable {
        case companyTaxID = "company.tax_id"
        case individualDobDay = "individual.dob.day"
        case individualDobMonth = "individual.dob.month"
        case individualDobYear = "individual.dob.year"
        case individualFirstName = "individual.first_name"
        case individualLastName = "individual.last_name"
        case individualVerificationDocument = "individual.verification.document"
    }

    public init(disabledReason: DisabledReason? = nil, pastDue: [PastDueItem]? = nil) {
        self.disabledReason = disabledReason
        self.pastDue = pastDue
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.disabledReason = try values.decodeIfPresent(DisabledReason.self, forKey: "disabled_reason")
        self.pastDue = try values.decodeIfPresent([PastDueItem].self, forKey: "past_due")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(disabledReason, forKey: "disabled_reason")
        try values.encodeIfPresent(pastDue, forKey: "past_due")
    }
}
