// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.
/// 
/// Related guide: [Disputing Transactions](https://stripe.com/docs/issuing/purchases/disputes)
public final class IssuingDispute: Codable {
    /// Disputed amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).
    public let amount: Int
    /// List of balance transactions associated with the dispute.
    public let balanceTransactions: [BalanceTransaction]?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public let created: Int
    /// The currency the `transaction` was made in.
    public let currency: String
    /// IssuingDisputeEvidence
    public let evidence: IssuingDisputeEvidence
    /// Unique identifier for the object.
    public let id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public let isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public let metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public let object: Object
    /// Current status of the dispute.
    public let status: Status
    /// The transaction being disputed.
    public let transaction: Transaction
    /// [Treasury](https://stripe.com/docs/api/treasury) details related to this dispute if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts
    public let treasury: IssuingDisputeTreasury?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case issuingDispute = "issuing.dispute"
    }

    /// Current status of the dispute.
    public enum Status: String, Codable, CaseIterable {
        case expired
        case lost
        case submitted
        case unsubmitted
        case won
    }

    /// The transaction being disputed.
    public struct Transaction: Codable {
        public var string: String?
        /// Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
        /// your Stripe account, such as a completed purchase or refund, is represented by an Issuing
        /// `Transaction` object.
        /// 
        /// Related guide: [Issued Card Transactions](https://stripe.com/docs/issuing/purchases/transactions).
        public var issuingTransaction: IssuingTransaction?

        public init(string: String? = nil, issuingTransaction: IssuingTransaction? = nil) {
            self.string = string
            self.issuingTransaction = issuingTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.issuingTransaction = try? container.decode(IssuingTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = issuingTransaction { try container.encode(value) }
        }
    }

    public init(amount: Int, balanceTransactions: [BalanceTransaction]? = nil, created: Int, currency: String, evidence: IssuingDisputeEvidence, id: String, isLivemode: Bool, metadata: [String: String], object: Object, status: Status, transaction: Transaction, treasury: IssuingDisputeTreasury? = nil) {
        self.amount = amount
        self.balanceTransactions = balanceTransactions
        self.created = created
        self.currency = currency
        self.evidence = evidence
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.status = status
        self.transaction = transaction
        self.treasury = treasury
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amount = try values.decode(Int.self, forKey: "amount")
        self.balanceTransactions = try values.decodeIfPresent([BalanceTransaction].self, forKey: "balance_transactions")
        self.created = try values.decode(Int.self, forKey: "created")
        self.currency = try values.decode(String.self, forKey: "currency")
        self.evidence = try values.decode(IssuingDisputeEvidence.self, forKey: "evidence")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.status = try values.decode(Status.self, forKey: "status")
        self.transaction = try values.decode(Transaction.self, forKey: "transaction")
        self.treasury = try values.decodeIfPresent(IssuingDisputeTreasury.self, forKey: "treasury")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(amount, forKey: "amount")
        try values.encodeIfPresent(balanceTransactions, forKey: "balance_transactions")
        try values.encode(created, forKey: "created")
        try values.encode(currency, forKey: "currency")
        try values.encode(evidence, forKey: "evidence")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encode(status, forKey: "status")
        try values.encode(transaction, forKey: "transaction")
        try values.encodeIfPresent(treasury, forKey: "treasury")
    }
}
