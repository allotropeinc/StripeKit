// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// PortalSession
///
/// The Billing customer portal is a Stripe-hosted UI for subscription and
/// billing management.
/// 
/// A portal configuration describes the functionality and features that you
/// want to provide to your customers through the portal.
/// 
/// A portal session describes the instantiation of the customer portal for
/// a particular customer. By visiting the session's URL, the customer
/// can manage their subscriptions and billing details. For security reasons,
/// sessions are short-lived and will expire if the customer does not visit the URL.
/// Create sessions on-demand when customers intend to manage their subscriptions
/// and billing details.
/// 
/// Learn more in the [integration guide](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal).
public struct BillingPortalSession: Codable {
    /// The configuration used by this session, describing the features available.
    public var configuration: Configuration
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The ID of the customer for this session.
    public var customer: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
    public var locale: Locale?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays.
    public var onBehalfOf: String?
    /// The URL to redirect customers to when they click on the portal's link to return to your website.
    public var returnURL: String?
    /// The short-lived URL of the session that gives customers access to the customer portal.
    public var url: String

    /// The configuration used by this session, describing the features available.
    public struct Configuration: Codable {
        public var string: String?
        /// PortalConfiguration
        ///
        /// A portal configuration describes the functionality and behavior of a portal session.
        public var billingPortalConfiguration: BillingPortalConfiguration?

        public init(string: String? = nil, billingPortalConfiguration: BillingPortalConfiguration? = nil) {
            self.string = string
            self.billingPortalConfiguration = billingPortalConfiguration
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.billingPortalConfiguration = try? container.decode(BillingPortalConfiguration.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = billingPortalConfiguration { try container.encode(value) }
        }
    }

    /// The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
    public enum Locale: String, Codable, CaseIterable {
        case auto
        case bg
        case cs
        case da
        case de
        case el
        case en
        case enAU = "en-AU"
        case enCA = "en-CA"
        case enGB = "en-GB"
        case enIE = "en-IE"
        case enIN = "en-IN"
        case enNZ = "en-NZ"
        case enSG = "en-SG"
        case es
        case es419 = "es-419"
        case et
        case fi
        case fil
        case fr
        case frCA = "fr-CA"
        case hr
        case hu
        case id
        case it
        case ja
        case ko
        case lt
        case lv
        case ms
        case mt
        case nb
        case nl
        case pl
        case pt
        case ptBR = "pt-BR"
        case ro
        case ru
        case sk
        case sl
        case sv
        case th
        case tr
        case vi
        case zh
        case zhHK = "zh-HK"
        case zhTW = "zh-TW"
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case billingPortalSession = "billing_portal.session"
    }

    public init(configuration: Configuration, created: Int, customer: String, id: String, isLivemode: Bool, locale: Locale? = nil, object: Object, onBehalfOf: String? = nil, returnURL: String? = nil, url: String) {
        self.configuration = configuration
        self.created = created
        self.customer = customer
        self.id = id
        self.isLivemode = isLivemode
        self.locale = locale
        self.object = object
        self.onBehalfOf = onBehalfOf
        self.returnURL = returnURL
        self.url = url
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.configuration = try values.decode(Configuration.self, forKey: "configuration")
        self.created = try values.decode(Int.self, forKey: "created")
        self.customer = try values.decode(String.self, forKey: "customer")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.locale = try values.decodeIfPresent(Locale.self, forKey: "locale")
        self.object = try values.decode(Object.self, forKey: "object")
        self.onBehalfOf = try values.decodeIfPresent(String.self, forKey: "on_behalf_of")
        self.returnURL = try values.decodeIfPresent(String.self, forKey: "return_url")
        self.url = try values.decode(String.self, forKey: "url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(configuration, forKey: "configuration")
        try values.encode(created, forKey: "created")
        try values.encode(customer, forKey: "customer")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encodeIfPresent(locale, forKey: "locale")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(onBehalfOf, forKey: "on_behalf_of")
        try values.encodeIfPresent(returnURL, forKey: "return_url")
        try values.encode(url, forKey: "url")
    }
}
