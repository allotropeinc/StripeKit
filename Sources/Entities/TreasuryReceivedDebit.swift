// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// TreasuryReceivedDebitsResourceReceivedDebit
///
/// ReceivedDebits represent funds pulled from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts). These are not initiated from the FinancialAccount.
public final class TreasuryReceivedDebit: Codable {
    /// Amount (in cents) transferred.
    public let amount: Int
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public let created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public let currency: String
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public let description: String
    /// Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn't have sufficient funds, is closed, or is frozen.
    public let failureCode: FailureCode?
    /// The FinancialAccount that funds were pulled from.
    public let financialAccount: String?
    /// A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
    public let hostedRegulatoryReceiptURL: String?
    /// Unique identifier for the object.
    public let id: String
    /// TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails
    public let initiatingPaymentMethodDetails: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails?
    /// TreasuryReceivedDebitsResourceLinkedFlows
    public let linkedFlows: TreasuryReceivedDebitsResourceLinkedFlows
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public let isLivemode: Bool
    /// The network used for the ReceivedDebit.
    public let network: Network
    /// String representing the object's type. Objects of the same type share the same value.
    public let object: Object
    /// Details describing when a ReceivedDebit might be reversed.
    public let reversalDetails: TreasuryReceivedDebitsResourceReversalDetails?
    /// Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`.
    public let status: Status
    /// The Transaction associated with this object.
    public let transaction: Transaction?

    /// Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn't have sufficient funds, is closed, or is frozen.
    public enum FailureCode: String, Codable, CaseIterable {
        case accountClosed = "account_closed"
        case accountFrozen = "account_frozen"
        case insufficientFunds = "insufficient_funds"
        case other
    }

    /// The network used for the ReceivedDebit.
    public enum Network: String, Codable, CaseIterable {
        case ach
        case card
        case stripe
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case treasuryReceivedDebit = "treasury.received_debit"
    }

    /// Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`.
    public enum Status: String, Codable, CaseIterable {
        case failed
        case succeeded
    }

    /// The Transaction associated with this object.
    public struct Transaction: Codable {
        public var string: String?
        /// TreasuryTransactionsResourceTransaction
        ///
        /// Transactions represent changes to a [FinancialAccount's](https://stripe.com/docs/api#financial_accounts) balance.
        public var treasuryTransaction: TreasuryTransaction?

        public init(string: String? = nil, treasuryTransaction: TreasuryTransaction? = nil) {
            self.string = string
            self.treasuryTransaction = treasuryTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.treasuryTransaction = try? container.decode(TreasuryTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = treasuryTransaction { try container.encode(value) }
        }
    }

    public init(amount: Int, created: Int, currency: String, description: String, failureCode: FailureCode? = nil, financialAccount: String? = nil, hostedRegulatoryReceiptURL: String? = nil, id: String, initiatingPaymentMethodDetails: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails? = nil, linkedFlows: TreasuryReceivedDebitsResourceLinkedFlows, isLivemode: Bool, network: Network, object: Object, reversalDetails: TreasuryReceivedDebitsResourceReversalDetails? = nil, status: Status, transaction: Transaction? = nil) {
        self.amount = amount
        self.created = created
        self.currency = currency
        self.description = description
        self.failureCode = failureCode
        self.financialAccount = financialAccount
        self.hostedRegulatoryReceiptURL = hostedRegulatoryReceiptURL
        self.id = id
        self.initiatingPaymentMethodDetails = initiatingPaymentMethodDetails
        self.linkedFlows = linkedFlows
        self.isLivemode = isLivemode
        self.network = network
        self.object = object
        self.reversalDetails = reversalDetails
        self.status = status
        self.transaction = transaction
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amount = try values.decode(Int.self, forKey: "amount")
        self.created = try values.decode(Int.self, forKey: "created")
        self.currency = try values.decode(String.self, forKey: "currency")
        self.description = try values.decode(String.self, forKey: "description")
        self.failureCode = try values.decodeIfPresent(FailureCode.self, forKey: "failure_code")
        self.financialAccount = try values.decodeIfPresent(String.self, forKey: "financial_account")
        self.hostedRegulatoryReceiptURL = try values.decodeIfPresent(String.self, forKey: "hosted_regulatory_receipt_url")
        self.id = try values.decode(String.self, forKey: "id")
        self.initiatingPaymentMethodDetails = try values.decodeIfPresent(TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails.self, forKey: "initiating_payment_method_details")
        self.linkedFlows = try values.decode(TreasuryReceivedDebitsResourceLinkedFlows.self, forKey: "linked_flows")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.network = try values.decode(Network.self, forKey: "network")
        self.object = try values.decode(Object.self, forKey: "object")
        self.reversalDetails = try values.decodeIfPresent(TreasuryReceivedDebitsResourceReversalDetails.self, forKey: "reversal_details")
        self.status = try values.decode(Status.self, forKey: "status")
        self.transaction = try values.decodeIfPresent(Transaction.self, forKey: "transaction")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(amount, forKey: "amount")
        try values.encode(created, forKey: "created")
        try values.encode(currency, forKey: "currency")
        try values.encode(description, forKey: "description")
        try values.encodeIfPresent(failureCode, forKey: "failure_code")
        try values.encodeIfPresent(financialAccount, forKey: "financial_account")
        try values.encodeIfPresent(hostedRegulatoryReceiptURL, forKey: "hosted_regulatory_receipt_url")
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(initiatingPaymentMethodDetails, forKey: "initiating_payment_method_details")
        try values.encode(linkedFlows, forKey: "linked_flows")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(network, forKey: "network")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(reversalDetails, forKey: "reversal_details")
        try values.encode(status, forKey: "status")
        try values.encodeIfPresent(transaction, forKey: "transaction")
    }
}
