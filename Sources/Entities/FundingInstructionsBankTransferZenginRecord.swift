// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Zengin Records contain Japan bank account details per the Zengin format.
public struct FundingInstructionsBankTransferZenginRecord: Codable {
    /// The account holder name
    public var accountHolderName: String?
    /// The account number
    public var accountNumber: String?
    /// The bank account type. In Japan, this can only be `futsu` or `toza`.
    public var accountType: String?
    /// The bank code of the account
    public var bankCode: String?
    /// The bank name of the account
    public var bankName: String?
    /// The branch code of the account
    public var branchCode: String?
    /// The branch name of the account
    public var branchName: String?

    public init(accountHolderName: String? = nil, accountNumber: String? = nil, accountType: String? = nil, bankCode: String? = nil, bankName: String? = nil, branchCode: String? = nil, branchName: String? = nil) {
        self.accountHolderName = accountHolderName
        self.accountNumber = accountNumber
        self.accountType = accountType
        self.bankCode = bankCode
        self.bankName = bankName
        self.branchCode = branchCode
        self.branchName = branchName
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.accountHolderName = try values.decodeIfPresent(String.self, forKey: "account_holder_name")
        self.accountNumber = try values.decodeIfPresent(String.self, forKey: "account_number")
        self.accountType = try values.decodeIfPresent(String.self, forKey: "account_type")
        self.bankCode = try values.decodeIfPresent(String.self, forKey: "bank_code")
        self.bankName = try values.decodeIfPresent(String.self, forKey: "bank_name")
        self.branchCode = try values.decodeIfPresent(String.self, forKey: "branch_code")
        self.branchName = try values.decodeIfPresent(String.self, forKey: "branch_name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(accountHolderName, forKey: "account_holder_name")
        try values.encodeIfPresent(accountNumber, forKey: "account_number")
        try values.encodeIfPresent(accountType, forKey: "account_type")
        try values.encodeIfPresent(bankCode, forKey: "bank_code")
        try values.encodeIfPresent(bankName, forKey: "bank_name")
        try values.encodeIfPresent(branchCode, forKey: "branch_code")
        try values.encodeIfPresent(branchName, forKey: "branch_name")
    }
}
