// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AccountCapabilities: Codable {
    /// The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
    public var acssDebitPayments: AcssDebitPayments?
    /// The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.
    public var affirmPayments: AffirmPayments?
    /// The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
    public var afterpayClearpayPayments: AfterpayClearpayPayments?
    /// The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
    public var auBecsDebitPayments: AuBecsDebitPayments?
    /// The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
    public var bacsDebitPayments: BacsDebitPayments?
    /// The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
    public var bancontactPayments: BancontactPayments?
    /// The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
    public var bankTransferPayments: BankTransferPayments?
    /// The status of the blik payments capability of the account, or whether the account can directly process blik charges.
    public var blikPayments: BlikPayments?
    /// The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
    public var boletoPayments: BoletoPayments?
    /// The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
    public var cardIssuing: CardIssuing?
    /// The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
    public var cardPayments: CardPayments?
    /// The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
    public var cartesBancairesPayments: CartesBancairesPayments?
    /// The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
    public var epsPayments: EpsPayments?
    /// The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
    public var fpxPayments: FpxPayments?
    /// The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
    public var giropayPayments: GiropayPayments?
    /// The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
    public var grabpayPayments: GrabpayPayments?
    /// The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
    public var idealPayments: IdealPayments?
    /// The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
    public var jcbPayments: JcbPayments?
    /// The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
    public var klarnaPayments: KlarnaPayments?
    /// The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
    public var konbiniPayments: KonbiniPayments?
    /// The status of the legacy payments capability of the account.
    public var legacyPayments: LegacyPayments?
    /// The status of the link_payments capability of the account, or whether the account can directly process Link charges.
    public var linkPayments: LinkPayments?
    /// The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
    public var oxxoPayments: OxxoPayments?
    /// The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
    public var p24Payments: P24Payments?
    /// The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
    public var paynowPayments: PaynowPayments?
    /// The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.
    public var promptpayPayments: PromptpayPayments?
    /// The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
    public var sepaDebitPayments: SepaDebitPayments?
    /// The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
    public var sofortPayments: SofortPayments?
    /// The status of the tax reporting 1099-K (US) capability of the account.
    public var taxReportingUs1099K: TaxReportingUs1099K?
    /// The status of the tax reporting 1099-MISC (US) capability of the account.
    public var taxReportingUs1099Misc: TaxReportingUs1099Misc?
    /// The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
    public var transfers: Transfers?
    /// The status of the banking capability, or whether the account can have bank accounts.
    public var treasury: Treasury?
    /// The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
    public var usBankAccountAchPayments: UsBankAccountAchPayments?

    /// The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
    public enum AcssDebitPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.
    public enum AffirmPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
    public enum AfterpayClearpayPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
    public enum AuBecsDebitPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
    public enum BacsDebitPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
    public enum BancontactPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
    public enum BankTransferPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the blik payments capability of the account, or whether the account can directly process blik charges.
    public enum BlikPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
    public enum BoletoPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
    public enum CardIssuing: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
    public enum CardPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
    public enum CartesBancairesPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
    public enum EpsPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
    public enum FpxPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
    public enum GiropayPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
    public enum GrabpayPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
    public enum IdealPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
    public enum JcbPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
    public enum KlarnaPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
    public enum KonbiniPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the legacy payments capability of the account.
    public enum LegacyPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the link_payments capability of the account, or whether the account can directly process Link charges.
    public enum LinkPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
    public enum OxxoPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
    public enum P24Payments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
    public enum PaynowPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.
    public enum PromptpayPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
    public enum SepaDebitPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
    public enum SofortPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the tax reporting 1099-K (US) capability of the account.
    public enum TaxReportingUs1099K: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the tax reporting 1099-MISC (US) capability of the account.
    public enum TaxReportingUs1099Misc: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
    public enum Transfers: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the banking capability, or whether the account can have bank accounts.
    public enum Treasury: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
    public enum UsBankAccountAchPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    public init(acssDebitPayments: AcssDebitPayments? = nil, affirmPayments: AffirmPayments? = nil, afterpayClearpayPayments: AfterpayClearpayPayments? = nil, auBecsDebitPayments: AuBecsDebitPayments? = nil, bacsDebitPayments: BacsDebitPayments? = nil, bancontactPayments: BancontactPayments? = nil, bankTransferPayments: BankTransferPayments? = nil, blikPayments: BlikPayments? = nil, boletoPayments: BoletoPayments? = nil, cardIssuing: CardIssuing? = nil, cardPayments: CardPayments? = nil, cartesBancairesPayments: CartesBancairesPayments? = nil, epsPayments: EpsPayments? = nil, fpxPayments: FpxPayments? = nil, giropayPayments: GiropayPayments? = nil, grabpayPayments: GrabpayPayments? = nil, idealPayments: IdealPayments? = nil, jcbPayments: JcbPayments? = nil, klarnaPayments: KlarnaPayments? = nil, konbiniPayments: KonbiniPayments? = nil, legacyPayments: LegacyPayments? = nil, linkPayments: LinkPayments? = nil, oxxoPayments: OxxoPayments? = nil, p24Payments: P24Payments? = nil, paynowPayments: PaynowPayments? = nil, promptpayPayments: PromptpayPayments? = nil, sepaDebitPayments: SepaDebitPayments? = nil, sofortPayments: SofortPayments? = nil, taxReportingUs1099K: TaxReportingUs1099K? = nil, taxReportingUs1099Misc: TaxReportingUs1099Misc? = nil, transfers: Transfers? = nil, treasury: Treasury? = nil, usBankAccountAchPayments: UsBankAccountAchPayments? = nil) {
        self.acssDebitPayments = acssDebitPayments
        self.affirmPayments = affirmPayments
        self.afterpayClearpayPayments = afterpayClearpayPayments
        self.auBecsDebitPayments = auBecsDebitPayments
        self.bacsDebitPayments = bacsDebitPayments
        self.bancontactPayments = bancontactPayments
        self.bankTransferPayments = bankTransferPayments
        self.blikPayments = blikPayments
        self.boletoPayments = boletoPayments
        self.cardIssuing = cardIssuing
        self.cardPayments = cardPayments
        self.cartesBancairesPayments = cartesBancairesPayments
        self.epsPayments = epsPayments
        self.fpxPayments = fpxPayments
        self.giropayPayments = giropayPayments
        self.grabpayPayments = grabpayPayments
        self.idealPayments = idealPayments
        self.jcbPayments = jcbPayments
        self.klarnaPayments = klarnaPayments
        self.konbiniPayments = konbiniPayments
        self.legacyPayments = legacyPayments
        self.linkPayments = linkPayments
        self.oxxoPayments = oxxoPayments
        self.p24Payments = p24Payments
        self.paynowPayments = paynowPayments
        self.promptpayPayments = promptpayPayments
        self.sepaDebitPayments = sepaDebitPayments
        self.sofortPayments = sofortPayments
        self.taxReportingUs1099K = taxReportingUs1099K
        self.taxReportingUs1099Misc = taxReportingUs1099Misc
        self.transfers = transfers
        self.treasury = treasury
        self.usBankAccountAchPayments = usBankAccountAchPayments
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.acssDebitPayments = try values.decodeIfPresent(AcssDebitPayments.self, forKey: "acss_debit_payments")
        self.affirmPayments = try values.decodeIfPresent(AffirmPayments.self, forKey: "affirm_payments")
        self.afterpayClearpayPayments = try values.decodeIfPresent(AfterpayClearpayPayments.self, forKey: "afterpay_clearpay_payments")
        self.auBecsDebitPayments = try values.decodeIfPresent(AuBecsDebitPayments.self, forKey: "au_becs_debit_payments")
        self.bacsDebitPayments = try values.decodeIfPresent(BacsDebitPayments.self, forKey: "bacs_debit_payments")
        self.bancontactPayments = try values.decodeIfPresent(BancontactPayments.self, forKey: "bancontact_payments")
        self.bankTransferPayments = try values.decodeIfPresent(BankTransferPayments.self, forKey: "bank_transfer_payments")
        self.blikPayments = try values.decodeIfPresent(BlikPayments.self, forKey: "blik_payments")
        self.boletoPayments = try values.decodeIfPresent(BoletoPayments.self, forKey: "boleto_payments")
        self.cardIssuing = try values.decodeIfPresent(CardIssuing.self, forKey: "card_issuing")
        self.cardPayments = try values.decodeIfPresent(CardPayments.self, forKey: "card_payments")
        self.cartesBancairesPayments = try values.decodeIfPresent(CartesBancairesPayments.self, forKey: "cartes_bancaires_payments")
        self.epsPayments = try values.decodeIfPresent(EpsPayments.self, forKey: "eps_payments")
        self.fpxPayments = try values.decodeIfPresent(FpxPayments.self, forKey: "fpx_payments")
        self.giropayPayments = try values.decodeIfPresent(GiropayPayments.self, forKey: "giropay_payments")
        self.grabpayPayments = try values.decodeIfPresent(GrabpayPayments.self, forKey: "grabpay_payments")
        self.idealPayments = try values.decodeIfPresent(IdealPayments.self, forKey: "ideal_payments")
        self.jcbPayments = try values.decodeIfPresent(JcbPayments.self, forKey: "jcb_payments")
        self.klarnaPayments = try values.decodeIfPresent(KlarnaPayments.self, forKey: "klarna_payments")
        self.konbiniPayments = try values.decodeIfPresent(KonbiniPayments.self, forKey: "konbini_payments")
        self.legacyPayments = try values.decodeIfPresent(LegacyPayments.self, forKey: "legacy_payments")
        self.linkPayments = try values.decodeIfPresent(LinkPayments.self, forKey: "link_payments")
        self.oxxoPayments = try values.decodeIfPresent(OxxoPayments.self, forKey: "oxxo_payments")
        self.p24Payments = try values.decodeIfPresent(P24Payments.self, forKey: "p24_payments")
        self.paynowPayments = try values.decodeIfPresent(PaynowPayments.self, forKey: "paynow_payments")
        self.promptpayPayments = try values.decodeIfPresent(PromptpayPayments.self, forKey: "promptpay_payments")
        self.sepaDebitPayments = try values.decodeIfPresent(SepaDebitPayments.self, forKey: "sepa_debit_payments")
        self.sofortPayments = try values.decodeIfPresent(SofortPayments.self, forKey: "sofort_payments")
        self.taxReportingUs1099K = try values.decodeIfPresent(TaxReportingUs1099K.self, forKey: "tax_reporting_us_1099_k")
        self.taxReportingUs1099Misc = try values.decodeIfPresent(TaxReportingUs1099Misc.self, forKey: "tax_reporting_us_1099_misc")
        self.transfers = try values.decodeIfPresent(Transfers.self, forKey: "transfers")
        self.treasury = try values.decodeIfPresent(Treasury.self, forKey: "treasury")
        self.usBankAccountAchPayments = try values.decodeIfPresent(UsBankAccountAchPayments.self, forKey: "us_bank_account_ach_payments")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(acssDebitPayments, forKey: "acss_debit_payments")
        try values.encodeIfPresent(affirmPayments, forKey: "affirm_payments")
        try values.encodeIfPresent(afterpayClearpayPayments, forKey: "afterpay_clearpay_payments")
        try values.encodeIfPresent(auBecsDebitPayments, forKey: "au_becs_debit_payments")
        try values.encodeIfPresent(bacsDebitPayments, forKey: "bacs_debit_payments")
        try values.encodeIfPresent(bancontactPayments, forKey: "bancontact_payments")
        try values.encodeIfPresent(bankTransferPayments, forKey: "bank_transfer_payments")
        try values.encodeIfPresent(blikPayments, forKey: "blik_payments")
        try values.encodeIfPresent(boletoPayments, forKey: "boleto_payments")
        try values.encodeIfPresent(cardIssuing, forKey: "card_issuing")
        try values.encodeIfPresent(cardPayments, forKey: "card_payments")
        try values.encodeIfPresent(cartesBancairesPayments, forKey: "cartes_bancaires_payments")
        try values.encodeIfPresent(epsPayments, forKey: "eps_payments")
        try values.encodeIfPresent(fpxPayments, forKey: "fpx_payments")
        try values.encodeIfPresent(giropayPayments, forKey: "giropay_payments")
        try values.encodeIfPresent(grabpayPayments, forKey: "grabpay_payments")
        try values.encodeIfPresent(idealPayments, forKey: "ideal_payments")
        try values.encodeIfPresent(jcbPayments, forKey: "jcb_payments")
        try values.encodeIfPresent(klarnaPayments, forKey: "klarna_payments")
        try values.encodeIfPresent(konbiniPayments, forKey: "konbini_payments")
        try values.encodeIfPresent(legacyPayments, forKey: "legacy_payments")
        try values.encodeIfPresent(linkPayments, forKey: "link_payments")
        try values.encodeIfPresent(oxxoPayments, forKey: "oxxo_payments")
        try values.encodeIfPresent(p24Payments, forKey: "p24_payments")
        try values.encodeIfPresent(paynowPayments, forKey: "paynow_payments")
        try values.encodeIfPresent(promptpayPayments, forKey: "promptpay_payments")
        try values.encodeIfPresent(sepaDebitPayments, forKey: "sepa_debit_payments")
        try values.encodeIfPresent(sofortPayments, forKey: "sofort_payments")
        try values.encodeIfPresent(taxReportingUs1099K, forKey: "tax_reporting_us_1099_k")
        try values.encodeIfPresent(taxReportingUs1099Misc, forKey: "tax_reporting_us_1099_misc")
        try values.encodeIfPresent(transfers, forKey: "transfers")
        try values.encodeIfPresent(treasury, forKey: "treasury")
        try values.encodeIfPresent(usBankAccountAchPayments, forKey: "us_bank_account_ach_payments")
    }
}
