// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct InvoicesPaymentSettings: Codable {
    /// ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set.
    public var defaultMandate: String?
    /// Payment-method-specific configuration to provide to the invoice’s PaymentIntent.
    public var paymentMethodOptions: InvoicesPaymentMethodOptions?
    /// The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
    public var paymentMethodTypes: [PaymentMethodType]?

    public enum PaymentMethodType: String, Codable, CaseIterable {
        case achCreditTransfer = "ach_credit_transfer"
        case achDebit = "ach_debit"
        case acssDebit = "acss_debit"
        case auBecsDebit = "au_becs_debit"
        case bacsDebit = "bacs_debit"
        case bancontact
        case boleto
        case card
        case customerBalance = "customer_balance"
        case fpx
        case giropay
        case grabpay
        case ideal
        case konbini
        case link
        case paynow
        case promptpay
        case sepaDebit = "sepa_debit"
        case sofort
        case usBankAccount = "us_bank_account"
        case wechatPay = "wechat_pay"
    }

    public init(defaultMandate: String? = nil, paymentMethodOptions: InvoicesPaymentMethodOptions? = nil, paymentMethodTypes: [PaymentMethodType]? = nil) {
        self.defaultMandate = defaultMandate
        self.paymentMethodOptions = paymentMethodOptions
        self.paymentMethodTypes = paymentMethodTypes
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.defaultMandate = try values.decodeIfPresent(String.self, forKey: "default_mandate")
        self.paymentMethodOptions = try values.decodeIfPresent(InvoicesPaymentMethodOptions.self, forKey: "payment_method_options")
        self.paymentMethodTypes = try values.decodeIfPresent([PaymentMethodType].self, forKey: "payment_method_types")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(defaultMandate, forKey: "default_mandate")
        try values.encodeIfPresent(paymentMethodOptions, forKey: "payment_method_options")
        try values.encodeIfPresent(paymentMethodTypes, forKey: "payment_method_types")
    }
}
