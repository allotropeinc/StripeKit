// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct LegalEntityPersonVerification: Codable {
    /// A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.
    public var additionalDocument: LegalEntityPersonVerificationDocument?
    /// A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified".
    public var details: String?
    /// One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.
    public var detailsCode: String?
    /// LegalEntityPersonVerificationDocument
    public var document: LegalEntityPersonVerificationDocument?
    /// The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`.
    public var status: String

    public init(additionalDocument: LegalEntityPersonVerificationDocument? = nil, details: String? = nil, detailsCode: String? = nil, document: LegalEntityPersonVerificationDocument? = nil, status: String) {
        self.additionalDocument = additionalDocument
        self.details = details
        self.detailsCode = detailsCode
        self.document = document
        self.status = status
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.additionalDocument = try values.decodeIfPresent(LegalEntityPersonVerificationDocument.self, forKey: "additional_document")
        self.details = try values.decodeIfPresent(String.self, forKey: "details")
        self.detailsCode = try values.decodeIfPresent(String.self, forKey: "details_code")
        self.document = try values.decodeIfPresent(LegalEntityPersonVerificationDocument.self, forKey: "document")
        self.status = try values.decode(String.self, forKey: "status")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(additionalDocument, forKey: "additional_document")
        try values.encodeIfPresent(details, forKey: "details")
        try values.encodeIfPresent(detailsCode, forKey: "details_code")
        try values.encodeIfPresent(document, forKey: "document")
        try values.encode(status, forKey: "status")
    }
}
