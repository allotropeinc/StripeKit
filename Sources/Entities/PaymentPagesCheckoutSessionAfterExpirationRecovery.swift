// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PaymentPagesCheckoutSessionAfterExpirationRecovery: Codable {
    /// Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false`
    public var allowPromotionCodes: Bool
    /// If `true`, a recovery url will be generated to recover this Checkout Session if it
    /// expires before a transaction is completed. It will be attached to the
    /// Checkout Session object upon expiration.
    public var isEnabled: Bool
    /// The timestamp at which the recovery URL will expire.
    public var expiresAt: Int?
    /// URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session
    public var url: String?

    public init(allowPromotionCodes: Bool, isEnabled: Bool, expiresAt: Int? = nil, url: String? = nil) {
        self.allowPromotionCodes = allowPromotionCodes
        self.isEnabled = isEnabled
        self.expiresAt = expiresAt
        self.url = url
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.allowPromotionCodes = try values.decode(Bool.self, forKey: "allow_promotion_codes")
        self.isEnabled = try values.decode(Bool.self, forKey: "enabled")
        self.expiresAt = try values.decodeIfPresent(Int.self, forKey: "expires_at")
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(allowPromotionCodes, forKey: "allow_promotion_codes")
        try values.encode(isEnabled, forKey: "enabled")
        try values.encodeIfPresent(expiresAt, forKey: "expires_at")
        try values.encodeIfPresent(url, forKey: "url")
    }
}
