// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// This is an object representing a Stripe account. You can retrieve it to see
/// properties on the account like its current e-mail address or if the account is
/// enabled yet to make live charges.
/// 
/// Some properties, marked below, are available only to platforms that want to
/// [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
public struct Account: Codable {
    /// Business information about the account.
    public var businessProfile: AccountBusinessProfile?
    /// The business type.
    public var businessType: BusinessType?
    /// AccountCapabilities
    public var capabilities: AccountCapabilities?
    /// Whether the account can create live charges.
    public var isChargesEnabled: Bool?
    /// LegalEntityCompany
    public var company: LegalEntityCompany?
    /// AccountUnificationAccountController
    public var controller: AccountUnificationAccountController?
    /// The account's country.
    public var country: String?
    /// Time at which the account was connected. Measured in seconds since the Unix epoch.
    public var created: Int?
    /// Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
    public var defaultCurrency: String?
    /// Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
    public var isDetailsSubmitted: Bool?
    /// An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders.
    public var email: String?
    /// ExternalAccountList
    ///
    /// External accounts (bank accounts and debit cards) currently attached to this account
    public var externalAccounts: ExternalAccounts?
    /// AccountFutureRequirements
    public var futureRequirements: AccountFutureRequirements?
    /// Unique identifier for the object.
    public var id: String
    /// Person
    ///
    /// This is an object representing a person associated with a Stripe account.
    /// 
    /// A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
    /// See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.
    /// 
    /// Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
    public var individual: Person?
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Whether Stripe can send payouts to this account.
    public var isPayoutsEnabled: Bool?
    /// AccountRequirements
    public var requirements: AccountRequirements?
    /// Options for customizing how the account functions within Stripe.
    public var settings: AccountSettings?
    /// AccountTOSAcceptance
    public var tosAcceptance: AccountTosAcceptance?
    /// The Stripe account type. Can be `standard`, `express`, or `custom`.
    public var type: `Type`?

    /// The business type.
    public enum BusinessType: String, Codable, CaseIterable {
        case company
        case governmentEntity = "government_entity"
        case individual
        case nonProfit = "non_profit"
    }

    /// ExternalAccountList
    ///
    /// External accounts (bank accounts and debit cards) currently attached to this account
    public struct ExternalAccounts: Codable {
        /// The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
        public var data: [Datum]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// Polymorphic
        public struct Datum: Codable {
            /// These bank accounts are payment methods on `Customer` objects.
            /// 
            /// On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
            /// destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
            /// They can be bank accounts or debit cards as well, and are documented in the links above.
            /// 
            /// Related guide: [Bank Debits and Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
            public var bankAccount: BankAccount?
            /// You can store multiple cards on a customer in order to charge the customer
            /// later. You can also store multiple debit cards on a recipient in order to
            /// transfer to those cards later.
            /// 
            /// Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
            public var card: Card?

            public init(bankAccount: BankAccount? = nil, card: Card? = nil) {
                self.bankAccount = bankAccount
                self.card = card
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.bankAccount = try? container.decode(BankAccount.self)
                self.card = try? container.decode(Card.self)
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                if let value = bankAccount { try container.encode(value) }
                if let value = card { try container.encode(value) }
            }
        }

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [Datum], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.data = try values.decode([Datum].self, forKey: "data")
            self.hasMore = try values.decode(Bool.self, forKey: "has_more")
            self.object = try values.decode(Object.self, forKey: "object")
            self.url = try values.decode(String.self, forKey: "url")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(data, forKey: "data")
            try values.encode(hasMore, forKey: "has_more")
            try values.encode(object, forKey: "object")
            try values.encode(url, forKey: "url")
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case account
    }

    /// The Stripe account type. Can be `standard`, `express`, or `custom`.
    public enum `Type`: String, Codable, CaseIterable {
        case custom
        case express
        case standard
    }

    public init(businessProfile: AccountBusinessProfile? = nil, businessType: BusinessType? = nil, capabilities: AccountCapabilities? = nil, isChargesEnabled: Bool? = nil, company: LegalEntityCompany? = nil, controller: AccountUnificationAccountController? = nil, country: String? = nil, created: Int? = nil, defaultCurrency: String? = nil, isDetailsSubmitted: Bool? = nil, email: String? = nil, externalAccounts: ExternalAccounts? = nil, futureRequirements: AccountFutureRequirements? = nil, id: String, individual: Person? = nil, metadata: [String: String]? = nil, object: Object, isPayoutsEnabled: Bool? = nil, requirements: AccountRequirements? = nil, settings: AccountSettings? = nil, tosAcceptance: AccountTosAcceptance? = nil, type: `Type`? = nil) {
        self.businessProfile = businessProfile
        self.businessType = businessType
        self.capabilities = capabilities
        self.isChargesEnabled = isChargesEnabled
        self.company = company
        self.controller = controller
        self.country = country
        self.created = created
        self.defaultCurrency = defaultCurrency
        self.isDetailsSubmitted = isDetailsSubmitted
        self.email = email
        self.externalAccounts = externalAccounts
        self.futureRequirements = futureRequirements
        self.id = id
        self.individual = individual
        self.metadata = metadata
        self.object = object
        self.isPayoutsEnabled = isPayoutsEnabled
        self.requirements = requirements
        self.settings = settings
        self.tosAcceptance = tosAcceptance
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.businessProfile = try values.decodeIfPresent(AccountBusinessProfile.self, forKey: "business_profile")
        self.businessType = try values.decodeIfPresent(BusinessType.self, forKey: "business_type")
        self.capabilities = try values.decodeIfPresent(AccountCapabilities.self, forKey: "capabilities")
        self.isChargesEnabled = try values.decodeIfPresent(Bool.self, forKey: "charges_enabled")
        self.company = try values.decodeIfPresent(LegalEntityCompany.self, forKey: "company")
        self.controller = try values.decodeIfPresent(AccountUnificationAccountController.self, forKey: "controller")
        self.country = try values.decodeIfPresent(String.self, forKey: "country")
        self.created = try values.decodeIfPresent(Int.self, forKey: "created")
        self.defaultCurrency = try values.decodeIfPresent(String.self, forKey: "default_currency")
        self.isDetailsSubmitted = try values.decodeIfPresent(Bool.self, forKey: "details_submitted")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.externalAccounts = try values.decodeIfPresent(ExternalAccounts.self, forKey: "external_accounts")
        self.futureRequirements = try values.decodeIfPresent(AccountFutureRequirements.self, forKey: "future_requirements")
        self.id = try values.decode(String.self, forKey: "id")
        self.individual = try values.decodeIfPresent(Person.self, forKey: "individual")
        self.metadata = try values.decodeIfPresent([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.isPayoutsEnabled = try values.decodeIfPresent(Bool.self, forKey: "payouts_enabled")
        self.requirements = try values.decodeIfPresent(AccountRequirements.self, forKey: "requirements")
        self.settings = try values.decodeIfPresent(AccountSettings.self, forKey: "settings")
        self.tosAcceptance = try values.decodeIfPresent(AccountTosAcceptance.self, forKey: "tos_acceptance")
        self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(businessProfile, forKey: "business_profile")
        try values.encodeIfPresent(businessType, forKey: "business_type")
        try values.encodeIfPresent(capabilities, forKey: "capabilities")
        try values.encodeIfPresent(isChargesEnabled, forKey: "charges_enabled")
        try values.encodeIfPresent(company, forKey: "company")
        try values.encodeIfPresent(controller, forKey: "controller")
        try values.encodeIfPresent(country, forKey: "country")
        try values.encodeIfPresent(created, forKey: "created")
        try values.encodeIfPresent(defaultCurrency, forKey: "default_currency")
        try values.encodeIfPresent(isDetailsSubmitted, forKey: "details_submitted")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encodeIfPresent(externalAccounts, forKey: "external_accounts")
        try values.encodeIfPresent(futureRequirements, forKey: "future_requirements")
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(individual, forKey: "individual")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(isPayoutsEnabled, forKey: "payouts_enabled")
        try values.encodeIfPresent(requirements, forKey: "requirements")
        try values.encodeIfPresent(settings, forKey: "settings")
        try values.encodeIfPresent(tosAcceptance, forKey: "tos_acceptance")
        try values.encodeIfPresent(type, forKey: "type")
    }
}
