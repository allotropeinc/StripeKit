// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// TerminalConfigurationConfiguration
///
/// A Configurations object represents how features should be configured for terminal readers.
public struct TerminalConfiguration: Codable {
    /// TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig
    public var bbposWiseposE: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig?
    /// Unique identifier for the object.
    public var id: String
    /// Whether this Configuration is the default for your account
    public var isAccountDefault: Bool?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// TerminalConfigurationConfigurationResourceTipping
    public var tipping: TerminalConfigurationConfigurationResourceTipping?
    /// TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig
    public var verifoneP400: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case terminalConfiguration = "terminal.configuration"
    }

    public init(bbposWiseposE: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig? = nil, id: String, isAccountDefault: Bool? = nil, isLivemode: Bool, object: Object, tipping: TerminalConfigurationConfigurationResourceTipping? = nil, verifoneP400: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig? = nil) {
        self.bbposWiseposE = bbposWiseposE
        self.id = id
        self.isAccountDefault = isAccountDefault
        self.isLivemode = isLivemode
        self.object = object
        self.tipping = tipping
        self.verifoneP400 = verifoneP400
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.bbposWiseposE = try values.decodeIfPresent(TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig.self, forKey: "bbpos_wisepos_e")
        self.id = try values.decode(String.self, forKey: "id")
        self.isAccountDefault = try values.decodeIfPresent(Bool.self, forKey: "is_account_default")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.object = try values.decode(Object.self, forKey: "object")
        self.tipping = try values.decodeIfPresent(TerminalConfigurationConfigurationResourceTipping.self, forKey: "tipping")
        self.verifoneP400 = try values.decodeIfPresent(TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig.self, forKey: "verifone_p400")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(bbposWiseposE, forKey: "bbpos_wisepos_e")
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(isAccountDefault, forKey: "is_account_default")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(tipping, forKey: "tipping")
        try values.encodeIfPresent(verifoneP400, forKey: "verifone_p400")
    }
}
