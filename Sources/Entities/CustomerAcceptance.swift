// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Customer_acceptance
public struct CustomerAcceptance: Codable {
    /// The time at which the customer accepted the Mandate.
    public var acceptedAt: Int?
    /// Offline_acceptance
    public var offline: [String: AnyJSON]?
    /// Online_acceptance
    public var online: OnlineAcceptance?
    /// The type of customer acceptance information included with the Mandate. One of `online` or `offline`.
    public var type: `Type`

    /// The type of customer acceptance information included with the Mandate. One of `online` or `offline`.
    public enum `Type`: String, Codable, CaseIterable {
        case offline
        case online
    }

    public init(acceptedAt: Int? = nil, offline: [String: AnyJSON]? = nil, online: OnlineAcceptance? = nil, type: `Type`) {
        self.acceptedAt = acceptedAt
        self.offline = offline
        self.online = online
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.acceptedAt = try values.decodeIfPresent(Int.self, forKey: "accepted_at")
        self.offline = try values.decodeIfPresent([String: AnyJSON].self, forKey: "offline")
        self.online = try values.decodeIfPresent(OnlineAcceptance.self, forKey: "online")
        self.type = try values.decode(`Type`.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(acceptedAt, forKey: "accepted_at")
        try values.encodeIfPresent(offline, forKey: "offline")
        try values.encodeIfPresent(online, forKey: "online")
        try values.encode(type, forKey: "type")
    }
}
