// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
public final class IssuingCard: Codable {
    /// The brand of the card.
    public let brand: String
    /// The reason why the card was canceled.
    public let cancellationReason: CancellationReason?
    /// IssuingCardholder
    ///
    /// An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
    /// 
    /// Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
    public let cardholder: IssuingCardholder
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public let created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK.
    public let currency: String
    /// The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
    public let cvc: String?
    /// The expiration month of the card.
    public let expMonth: Int
    /// The expiration year of the card.
    public let expYear: Int
    /// The financial account this card is attached to.
    public let financialAccount: String?
    /// Unique identifier for the object.
    public let id: String
    /// The last 4 digits of the card number.
    public let last4: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public let isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public let metadata: [String: String]
    /// The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
    public let number: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public let object: Object
    /// The latest card that replaces this card, if any.
    public let replacedBy: ReplacedBy?
    /// The card this card replaces, if any.
    public let replacementFor: ReplacementFor?
    /// The reason why the previous card needed to be replaced.
    public let replacementReason: ReplacementReason?
    /// Where and how the card will be shipped.
    public let shipping: IssuingCardShipping?
    /// IssuingCardAuthorizationControls
    public let spendingControls: IssuingCardAuthorizationControls
    /// Whether authorizations can be approved on this card.
    public let status: Status
    /// The type of the card.
    public let type: `Type`
    /// Information relating to digital wallets (like Apple Pay and Google Pay).
    public let wallets: IssuingCardWallets?

    /// The reason why the card was canceled.
    public enum CancellationReason: String, Codable, CaseIterable {
        case designRejected = "design_rejected"
        case lost
        case stolen
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case issuingCard = "issuing.card"
    }

    /// The latest card that replaces this card, if any.
    public struct ReplacedBy: Codable {
        public var string: String?
        /// You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
        public var issuingCard: IssuingCard?

        public init(string: String? = nil, issuingCard: IssuingCard? = nil) {
            self.string = string
            self.issuingCard = issuingCard
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.issuingCard = try? container.decode(IssuingCard.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = issuingCard { try container.encode(value) }
        }
    }

    /// The card this card replaces, if any.
    public struct ReplacementFor: Codable {
        public var string: String?
        /// You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
        public var issuingCard: IssuingCard?

        public init(string: String? = nil, issuingCard: IssuingCard? = nil) {
            self.string = string
            self.issuingCard = issuingCard
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.issuingCard = try? container.decode(IssuingCard.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = issuingCard { try container.encode(value) }
        }
    }

    /// The reason why the previous card needed to be replaced.
    public enum ReplacementReason: String, Codable, CaseIterable {
        case damaged
        case expired
        case lost
        case stolen
    }

    /// Whether authorizations can be approved on this card.
    public enum Status: String, Codable, CaseIterable {
        case active
        case canceled
        case inactive
    }

    /// The type of the card.
    public enum `Type`: String, Codable, CaseIterable {
        case physical
        case virtual
    }

    public init(brand: String, cancellationReason: CancellationReason? = nil, cardholder: IssuingCardholder, created: Int, currency: String, cvc: String? = nil, expMonth: Int, expYear: Int, financialAccount: String? = nil, id: String, last4: String, isLivemode: Bool, metadata: [String: String], number: String? = nil, object: Object, replacedBy: ReplacedBy? = nil, replacementFor: ReplacementFor? = nil, replacementReason: ReplacementReason? = nil, shipping: IssuingCardShipping? = nil, spendingControls: IssuingCardAuthorizationControls, status: Status, type: `Type`, wallets: IssuingCardWallets? = nil) {
        self.brand = brand
        self.cancellationReason = cancellationReason
        self.cardholder = cardholder
        self.created = created
        self.currency = currency
        self.cvc = cvc
        self.expMonth = expMonth
        self.expYear = expYear
        self.financialAccount = financialAccount
        self.id = id
        self.last4 = last4
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.number = number
        self.object = object
        self.replacedBy = replacedBy
        self.replacementFor = replacementFor
        self.replacementReason = replacementReason
        self.shipping = shipping
        self.spendingControls = spendingControls
        self.status = status
        self.type = type
        self.wallets = wallets
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.brand = try values.decode(String.self, forKey: "brand")
        self.cancellationReason = try values.decodeIfPresent(CancellationReason.self, forKey: "cancellation_reason")
        self.cardholder = try values.decode(IssuingCardholder.self, forKey: "cardholder")
        self.created = try values.decode(Int.self, forKey: "created")
        self.currency = try values.decode(String.self, forKey: "currency")
        self.cvc = try values.decodeIfPresent(String.self, forKey: "cvc")
        self.expMonth = try values.decode(Int.self, forKey: "exp_month")
        self.expYear = try values.decode(Int.self, forKey: "exp_year")
        self.financialAccount = try values.decodeIfPresent(String.self, forKey: "financial_account")
        self.id = try values.decode(String.self, forKey: "id")
        self.last4 = try values.decode(String.self, forKey: "last4")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.number = try values.decodeIfPresent(String.self, forKey: "number")
        self.object = try values.decode(Object.self, forKey: "object")
        self.replacedBy = try values.decodeIfPresent(ReplacedBy.self, forKey: "replaced_by")
        self.replacementFor = try values.decodeIfPresent(ReplacementFor.self, forKey: "replacement_for")
        self.replacementReason = try values.decodeIfPresent(ReplacementReason.self, forKey: "replacement_reason")
        self.shipping = try values.decodeIfPresent(IssuingCardShipping.self, forKey: "shipping")
        self.spendingControls = try values.decode(IssuingCardAuthorizationControls.self, forKey: "spending_controls")
        self.status = try values.decode(Status.self, forKey: "status")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.wallets = try values.decodeIfPresent(IssuingCardWallets.self, forKey: "wallets")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(brand, forKey: "brand")
        try values.encodeIfPresent(cancellationReason, forKey: "cancellation_reason")
        try values.encode(cardholder, forKey: "cardholder")
        try values.encode(created, forKey: "created")
        try values.encode(currency, forKey: "currency")
        try values.encodeIfPresent(cvc, forKey: "cvc")
        try values.encode(expMonth, forKey: "exp_month")
        try values.encode(expYear, forKey: "exp_year")
        try values.encodeIfPresent(financialAccount, forKey: "financial_account")
        try values.encode(id, forKey: "id")
        try values.encode(last4, forKey: "last4")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(metadata, forKey: "metadata")
        try values.encodeIfPresent(number, forKey: "number")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(replacedBy, forKey: "replaced_by")
        try values.encodeIfPresent(replacementFor, forKey: "replacement_for")
        try values.encodeIfPresent(replacementReason, forKey: "replacement_reason")
        try values.encodeIfPresent(shipping, forKey: "shipping")
        try values.encode(spendingControls, forKey: "spending_controls")
        try values.encode(status, forKey: "status")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(wallets, forKey: "wallets")
    }
}
