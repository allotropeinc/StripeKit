// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
public struct IssuingSettlement: Codable {
    /// The Bank Identification Number reflecting this settlement record.
    public var bin: String
    /// The date that the transactions are cleared and posted to user's accounts.
    public var clearingDate: Int
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// The total interchange received as reimbursement for the transactions.
    public var interchangeFees: Int
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// The total net amount required to settle with the network.
    public var netTotal: Int
    /// The card network for this settlement report. One of ["visa"]
    public var network: Network
    /// The total amount of fees owed to the network.
    public var networkFees: Int
    /// The Settlement Identification Number assigned by the network.
    public var networkSettlementIdentifier: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// One of `international` or `uk_national_net`.
    public var settlementService: String
    /// The total number of transactions reflected in this settlement.
    public var transactionCount: Int
    /// The total transaction amount reflected in this settlement.
    public var transactionVolume: Int

    /// The card network for this settlement report. One of ["visa"]
    public enum Network: String, Codable, CaseIterable {
        case visa
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case issuingSettlement = "issuing.settlement"
    }

    public init(bin: String, clearingDate: Int, created: Int, currency: String, id: String, interchangeFees: Int, isLivemode: Bool, metadata: [String: String], netTotal: Int, network: Network, networkFees: Int, networkSettlementIdentifier: String, object: Object, settlementService: String, transactionCount: Int, transactionVolume: Int) {
        self.bin = bin
        self.clearingDate = clearingDate
        self.created = created
        self.currency = currency
        self.id = id
        self.interchangeFees = interchangeFees
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.netTotal = netTotal
        self.network = network
        self.networkFees = networkFees
        self.networkSettlementIdentifier = networkSettlementIdentifier
        self.object = object
        self.settlementService = settlementService
        self.transactionCount = transactionCount
        self.transactionVolume = transactionVolume
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.bin = try values.decode(String.self, forKey: "bin")
        self.clearingDate = try values.decode(Int.self, forKey: "clearing_date")
        self.created = try values.decode(Int.self, forKey: "created")
        self.currency = try values.decode(String.self, forKey: "currency")
        self.id = try values.decode(String.self, forKey: "id")
        self.interchangeFees = try values.decode(Int.self, forKey: "interchange_fees")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.netTotal = try values.decode(Int.self, forKey: "net_total")
        self.network = try values.decode(Network.self, forKey: "network")
        self.networkFees = try values.decode(Int.self, forKey: "network_fees")
        self.networkSettlementIdentifier = try values.decode(String.self, forKey: "network_settlement_identifier")
        self.object = try values.decode(Object.self, forKey: "object")
        self.settlementService = try values.decode(String.self, forKey: "settlement_service")
        self.transactionCount = try values.decode(Int.self, forKey: "transaction_count")
        self.transactionVolume = try values.decode(Int.self, forKey: "transaction_volume")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(bin, forKey: "bin")
        try values.encode(clearingDate, forKey: "clearing_date")
        try values.encode(created, forKey: "created")
        try values.encode(currency, forKey: "currency")
        try values.encode(id, forKey: "id")
        try values.encode(interchangeFees, forKey: "interchange_fees")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(metadata, forKey: "metadata")
        try values.encode(netTotal, forKey: "net_total")
        try values.encode(network, forKey: "network")
        try values.encode(networkFees, forKey: "network_fees")
        try values.encode(networkSettlementIdentifier, forKey: "network_settlement_identifier")
        try values.encode(object, forKey: "object")
        try values.encode(settlementService, forKey: "settlement_service")
        try values.encode(transactionCount, forKey: "transaction_count")
        try values.encode(transactionVolume, forKey: "transaction_volume")
    }
}
