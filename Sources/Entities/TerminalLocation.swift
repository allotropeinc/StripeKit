// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// TerminalLocationLocation
///
/// A Location represents a grouping of readers.
/// 
/// Related guide: [Fleet Management](https://stripe.com/docs/terminal/fleet/locations).
public struct TerminalLocation: Codable {
    public var address: Address
    /// The ID of a configuration that will be used to customize all readers in this location.
    public var configurationOverrides: String?
    /// The display name of the location.
    public var displayName: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case terminalLocation = "terminal.location"
    }

    public init(address: Address, configurationOverrides: String? = nil, displayName: String, id: String, isLivemode: Bool, metadata: [String: String], object: Object) {
        self.address = address
        self.configurationOverrides = configurationOverrides
        self.displayName = displayName
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.address = try values.decode(Address.self, forKey: "address")
        self.configurationOverrides = try values.decodeIfPresent(String.self, forKey: "configuration_overrides")
        self.displayName = try values.decode(String.self, forKey: "display_name")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(address, forKey: "address")
        try values.encodeIfPresent(configurationOverrides, forKey: "configuration_overrides")
        try values.encode(displayName, forKey: "display_name")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
    }
}
