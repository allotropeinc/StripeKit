// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct IssuingTransactionFuelData: Codable {
    /// The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.
    public var type: String
    /// The units for `volume_decimal`. One of `us_gallon` or `liter`.
    public var unit: String
    /// The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
    public var unitCostDecimal: String
    /// The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places.
    public var volumeDecimal: String?

    public init(type: String, unit: String, unitCostDecimal: String, volumeDecimal: String? = nil) {
        self.type = type
        self.unit = unit
        self.unitCostDecimal = unitCostDecimal
        self.volumeDecimal = volumeDecimal
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decode(String.self, forKey: "type")
        self.unit = try values.decode(String.self, forKey: "unit")
        self.unitCostDecimal = try values.decode(String.self, forKey: "unit_cost_decimal")
        self.volumeDecimal = try values.decodeIfPresent(String.self, forKey: "volume_decimal")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(type, forKey: "type")
        try values.encode(unit, forKey: "unit")
        try values.encode(unitCostDecimal, forKey: "unit_cost_decimal")
        try values.encodeIfPresent(volumeDecimal, forKey: "volume_decimal")
    }
}
