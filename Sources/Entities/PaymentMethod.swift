// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// PaymentMethod objects represent your customer's payment instruments.
/// You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
/// Customer objects to store instrument details for future payments.
/// 
/// Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
public struct PaymentMethod: Codable {
    /// Payment_method_acss_debit
    public var acssDebit: PaymentMethodAcssDebit?
    /// Payment_method_affirm
    public var affirm: [String: AnyJSON]?
    /// Payment_method_afterpay_clearpay
    public var afterpayClearpay: [String: AnyJSON]?
    /// PaymentFlowsPrivatePaymentMethodsAlipay
    public var alipay: [String: AnyJSON]?
    /// Payment_method_au_becs_debit
    public var auBecsDebit: PaymentMethodAuBecsDebit?
    /// Payment_method_bacs_debit
    public var bacsDebit: PaymentMethodBacsDebit?
    /// Payment_method_bancontact
    public var bancontact: [String: AnyJSON]?
    /// Billing_details
    public var billingDetails: BillingDetails
    /// Payment_method_blik
    public var blik: [String: AnyJSON]?
    /// Payment_method_boleto
    public var boleto: PaymentMethodBoleto?
    /// Payment_method_card
    public var card: PaymentMethodCard?
    /// Payment_method_card_present
    public var cardPresent: [String: AnyJSON]?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
    public var customer: Customer?
    /// Payment_method_customer_balance
    public var customerBalance: [String: AnyJSON]?
    /// Payment_method_eps
    public var eps: PaymentMethodEps?
    /// Payment_method_fpx
    public var fpx: PaymentMethodFpx?
    /// Payment_method_giropay
    public var giropay: [String: AnyJSON]?
    /// Payment_method_grabpay
    public var grabpay: [String: AnyJSON]?
    /// Unique identifier for the object.
    public var id: String
    /// Payment_method_ideal
    public var ideal: PaymentMethodIdeal?
    /// Payment_method_interac_present
    public var interacPresent: [String: AnyJSON]?
    /// Payment_method_klarna
    public var klarna: PaymentMethodKlarna?
    /// Payment_method_konbini
    public var konbini: [String: AnyJSON]?
    /// Payment_method_link
    public var link: PaymentMethodLink?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Payment_method_oxxo
    public var oxxo: [String: AnyJSON]?
    /// Payment_method_p24
    public var p24: PaymentMethodP24?
    /// Payment_method_paynow
    public var paynow: [String: AnyJSON]?
    /// Payment_method_promptpay
    public var promptpay: [String: AnyJSON]?
    /// RadarRadarOptions
    ///
    /// Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
    public var radarOptions: RadarRadarOptions?
    /// Payment_method_sepa_debit
    public var sepaDebit: PaymentMethodSepaDebit?
    /// Payment_method_sofort
    public var sofort: PaymentMethodSofort?
    /// The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
    public var type: `Type`
    /// Payment_method_us_bank_account
    public var usBankAccount: PaymentMethodUsBankAccount?
    /// Payment_method_wechat_pay
    public var wechatPay: [String: AnyJSON]?

    /// The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
    public final class Customer: Codable {
        public let string: String?
        /// This object represents a customer of your business. It lets you create recurring charges and track payments that belong to the same customer.
        /// 
        /// Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
        public let customer: StripeKit.Customer?

        public init(string: String? = nil, customer: StripeKit.Customer? = nil) {
            self.string = string
            self.customer = customer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeKit.Customer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case paymentMethod = "payment_method"
    }

    /// The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
    public enum `Type`: String, Codable, CaseIterable {
        case acssDebit = "acss_debit"
        case affirm
        case afterpayClearpay = "afterpay_clearpay"
        case alipay
        case auBecsDebit = "au_becs_debit"
        case bacsDebit = "bacs_debit"
        case bancontact
        case blik
        case boleto
        case card
        case cardPresent = "card_present"
        case customerBalance = "customer_balance"
        case eps
        case fpx
        case giropay
        case grabpay
        case ideal
        case interacPresent = "interac_present"
        case klarna
        case konbini
        case link
        case oxxo
        case p24
        case paynow
        case promptpay
        case sepaDebit = "sepa_debit"
        case sofort
        case usBankAccount = "us_bank_account"
        case wechatPay = "wechat_pay"
    }

    public init(acssDebit: PaymentMethodAcssDebit? = nil, affirm: [String: AnyJSON]? = nil, afterpayClearpay: [String: AnyJSON]? = nil, alipay: [String: AnyJSON]? = nil, auBecsDebit: PaymentMethodAuBecsDebit? = nil, bacsDebit: PaymentMethodBacsDebit? = nil, bancontact: [String: AnyJSON]? = nil, billingDetails: BillingDetails, blik: [String: AnyJSON]? = nil, boleto: PaymentMethodBoleto? = nil, card: PaymentMethodCard? = nil, cardPresent: [String: AnyJSON]? = nil, created: Int, customer: Customer? = nil, customerBalance: [String: AnyJSON]? = nil, eps: PaymentMethodEps? = nil, fpx: PaymentMethodFpx? = nil, giropay: [String: AnyJSON]? = nil, grabpay: [String: AnyJSON]? = nil, id: String, ideal: PaymentMethodIdeal? = nil, interacPresent: [String: AnyJSON]? = nil, klarna: PaymentMethodKlarna? = nil, konbini: [String: AnyJSON]? = nil, link: PaymentMethodLink? = nil, isLivemode: Bool, metadata: [String: String]? = nil, object: Object, oxxo: [String: AnyJSON]? = nil, p24: PaymentMethodP24? = nil, paynow: [String: AnyJSON]? = nil, promptpay: [String: AnyJSON]? = nil, radarOptions: RadarRadarOptions? = nil, sepaDebit: PaymentMethodSepaDebit? = nil, sofort: PaymentMethodSofort? = nil, type: `Type`, usBankAccount: PaymentMethodUsBankAccount? = nil, wechatPay: [String: AnyJSON]? = nil) {
        self.acssDebit = acssDebit
        self.affirm = affirm
        self.afterpayClearpay = afterpayClearpay
        self.alipay = alipay
        self.auBecsDebit = auBecsDebit
        self.bacsDebit = bacsDebit
        self.bancontact = bancontact
        self.billingDetails = billingDetails
        self.blik = blik
        self.boleto = boleto
        self.card = card
        self.cardPresent = cardPresent
        self.created = created
        self.customer = customer
        self.customerBalance = customerBalance
        self.eps = eps
        self.fpx = fpx
        self.giropay = giropay
        self.grabpay = grabpay
        self.id = id
        self.ideal = ideal
        self.interacPresent = interacPresent
        self.klarna = klarna
        self.konbini = konbini
        self.link = link
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.oxxo = oxxo
        self.p24 = p24
        self.paynow = paynow
        self.promptpay = promptpay
        self.radarOptions = radarOptions
        self.sepaDebit = sepaDebit
        self.sofort = sofort
        self.type = type
        self.usBankAccount = usBankAccount
        self.wechatPay = wechatPay
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.acssDebit = try values.decodeIfPresent(PaymentMethodAcssDebit.self, forKey: "acss_debit")
        self.affirm = try values.decodeIfPresent([String: AnyJSON].self, forKey: "affirm")
        self.afterpayClearpay = try values.decodeIfPresent([String: AnyJSON].self, forKey: "afterpay_clearpay")
        self.alipay = try values.decodeIfPresent([String: AnyJSON].self, forKey: "alipay")
        self.auBecsDebit = try values.decodeIfPresent(PaymentMethodAuBecsDebit.self, forKey: "au_becs_debit")
        self.bacsDebit = try values.decodeIfPresent(PaymentMethodBacsDebit.self, forKey: "bacs_debit")
        self.bancontact = try values.decodeIfPresent([String: AnyJSON].self, forKey: "bancontact")
        self.billingDetails = try values.decode(BillingDetails.self, forKey: "billing_details")
        self.blik = try values.decodeIfPresent([String: AnyJSON].self, forKey: "blik")
        self.boleto = try values.decodeIfPresent(PaymentMethodBoleto.self, forKey: "boleto")
        self.card = try values.decodeIfPresent(PaymentMethodCard.self, forKey: "card")
        self.cardPresent = try values.decodeIfPresent([String: AnyJSON].self, forKey: "card_present")
        self.created = try values.decode(Int.self, forKey: "created")
        self.customer = try values.decodeIfPresent(Customer.self, forKey: "customer")
        self.customerBalance = try values.decodeIfPresent([String: AnyJSON].self, forKey: "customer_balance")
        self.eps = try values.decodeIfPresent(PaymentMethodEps.self, forKey: "eps")
        self.fpx = try values.decodeIfPresent(PaymentMethodFpx.self, forKey: "fpx")
        self.giropay = try values.decodeIfPresent([String: AnyJSON].self, forKey: "giropay")
        self.grabpay = try values.decodeIfPresent([String: AnyJSON].self, forKey: "grabpay")
        self.id = try values.decode(String.self, forKey: "id")
        self.ideal = try values.decodeIfPresent(PaymentMethodIdeal.self, forKey: "ideal")
        self.interacPresent = try values.decodeIfPresent([String: AnyJSON].self, forKey: "interac_present")
        self.klarna = try values.decodeIfPresent(PaymentMethodKlarna.self, forKey: "klarna")
        self.konbini = try values.decodeIfPresent([String: AnyJSON].self, forKey: "konbini")
        self.link = try values.decodeIfPresent(PaymentMethodLink.self, forKey: "link")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decodeIfPresent([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.oxxo = try values.decodeIfPresent([String: AnyJSON].self, forKey: "oxxo")
        self.p24 = try values.decodeIfPresent(PaymentMethodP24.self, forKey: "p24")
        self.paynow = try values.decodeIfPresent([String: AnyJSON].self, forKey: "paynow")
        self.promptpay = try values.decodeIfPresent([String: AnyJSON].self, forKey: "promptpay")
        self.radarOptions = try values.decodeIfPresent(RadarRadarOptions.self, forKey: "radar_options")
        self.sepaDebit = try values.decodeIfPresent(PaymentMethodSepaDebit.self, forKey: "sepa_debit")
        self.sofort = try values.decodeIfPresent(PaymentMethodSofort.self, forKey: "sofort")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.usBankAccount = try values.decodeIfPresent(PaymentMethodUsBankAccount.self, forKey: "us_bank_account")
        self.wechatPay = try values.decodeIfPresent([String: AnyJSON].self, forKey: "wechat_pay")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(acssDebit, forKey: "acss_debit")
        try values.encodeIfPresent(affirm, forKey: "affirm")
        try values.encodeIfPresent(afterpayClearpay, forKey: "afterpay_clearpay")
        try values.encodeIfPresent(alipay, forKey: "alipay")
        try values.encodeIfPresent(auBecsDebit, forKey: "au_becs_debit")
        try values.encodeIfPresent(bacsDebit, forKey: "bacs_debit")
        try values.encodeIfPresent(bancontact, forKey: "bancontact")
        try values.encode(billingDetails, forKey: "billing_details")
        try values.encodeIfPresent(blik, forKey: "blik")
        try values.encodeIfPresent(boleto, forKey: "boleto")
        try values.encodeIfPresent(card, forKey: "card")
        try values.encodeIfPresent(cardPresent, forKey: "card_present")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(customer, forKey: "customer")
        try values.encodeIfPresent(customerBalance, forKey: "customer_balance")
        try values.encodeIfPresent(eps, forKey: "eps")
        try values.encodeIfPresent(fpx, forKey: "fpx")
        try values.encodeIfPresent(giropay, forKey: "giropay")
        try values.encodeIfPresent(grabpay, forKey: "grabpay")
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(ideal, forKey: "ideal")
        try values.encodeIfPresent(interacPresent, forKey: "interac_present")
        try values.encodeIfPresent(klarna, forKey: "klarna")
        try values.encodeIfPresent(konbini, forKey: "konbini")
        try values.encodeIfPresent(link, forKey: "link")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(oxxo, forKey: "oxxo")
        try values.encodeIfPresent(p24, forKey: "p24")
        try values.encodeIfPresent(paynow, forKey: "paynow")
        try values.encodeIfPresent(promptpay, forKey: "promptpay")
        try values.encodeIfPresent(radarOptions, forKey: "radar_options")
        try values.encodeIfPresent(sepaDebit, forKey: "sepa_debit")
        try values.encodeIfPresent(sofort, forKey: "sofort")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(usBankAccount, forKey: "us_bank_account")
        try values.encodeIfPresent(wechatPay, forKey: "wechat_pay")
    }
}
