// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Payment_method_eps
public struct PaymentMethodEps: Codable {
    /// The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
    public var bank: Bank?

    /// The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
    public enum Bank: String, Codable, CaseIterable {
        case arzteUndApothekerBank = "arzte_und_apotheker_bank"
        case austrianAnadiBankAg = "austrian_anadi_bank_ag"
        case bankAustria = "bank_austria"
        case bankhausCarlSpangler = "bankhaus_carl_spangler"
        case bankhausSchelhammerUndSchatteraAg = "bankhaus_schelhammer_und_schattera_ag"
        case bawagPskAg = "bawag_psk_ag"
        case bksBankAg = "bks_bank_ag"
        case brullKallmusBankAg = "brull_kallmus_bank_ag"
        case btvVierLanderBank = "btv_vier_lander_bank"
        case capitalBankGraweGruppeAg = "capital_bank_grawe_gruppe_ag"
        case dolomitenbank
        case easybankAg = "easybank_ag"
        case ersteBankUndSparkassen = "erste_bank_und_sparkassen"
        case hypoAlpeadriabankInternationalAg = "hypo_alpeadriabank_international_ag"
        case hypoBankBurgenlandAktiengesellschaft = "hypo_bank_burgenland_aktiengesellschaft"
        case hypoNoeLbFurNiederosterreichUWien = "hypo_noe_lb_fur_niederosterreich_u_wien"
        case hypoOberosterreichSalzburgSteiermark = "hypo_oberosterreich_salzburg_steiermark"
        case hypoTirolBankAg = "hypo_tirol_bank_ag"
        case hypoVorarlbergBankAg = "hypo_vorarlberg_bank_ag"
        case marchfelderBank = "marchfelder_bank"
        case oberbankAg = "oberbank_ag"
        case raiffeisenBankengruppeOsterreich = "raiffeisen_bankengruppe_osterreich"
        case schoellerbankAg = "schoellerbank_ag"
        case spardaBankWien = "sparda_bank_wien"
        case volksbankGruppe = "volksbank_gruppe"
        case volkskreditbankAg = "volkskreditbank_ag"
        case vrBankBraunau = "vr_bank_braunau"
    }

    public init(bank: Bank? = nil) {
        self.bank = bank
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.bank = try values.decodeIfPresent(Bank.self, forKey: "bank")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(bank, forKey: "bank")
    }
}
