// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
/// 
/// Plans define the base price, currency, and billing cycle for recurring purchases of products.
/// [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
/// 
/// For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
/// 
/// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).
public struct Plan: Codable {
    /// Whether the plan can be used for new purchases.
    public var isActive: Bool
    /// Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
    public var aggregateUsage: AggregateUsage?
    /// The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
    public var amount: Int?
    /// The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
    public var amountDecimal: String?
    /// Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    public var billingScheme: BillingScheme
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    public var interval: Interval
    /// The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
    public var intervalCount: Int
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// A brief description of the plan, hidden from customers.
    public var nickname: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The product whose pricing this plan determines.
    public var product: Product?
    /// Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    public var tiers: [PlanTier]?
    /// Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
    public var tiersMode: TiersMode?
    /// Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
    public var transformUsage: TransformUsage?
    /// Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
    public var trialPeriodDays: Int?
    /// Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
    public var usageType: UsageType

    /// Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
    public enum AggregateUsage: String, Codable, CaseIterable {
        case lastDuringPeriod = "last_during_period"
        case lastEver = "last_ever"
        case max
        case sum
    }

    /// Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    public enum BillingScheme: String, Codable, CaseIterable {
        case perUnit = "per_unit"
        case tiered
    }

    /// The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    public enum Interval: String, Codable, CaseIterable {
        case day
        case month
        case week
        case year
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case plan
    }

    /// The product whose pricing this plan determines.
    public final class Product: Codable {
        public let string: String?
        /// Products describe the specific goods or services you offer to your customers.
        /// For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
        /// They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
        /// [share a Payment Link](https://stripe.com/docs/payments/payment-links/overview),
        /// [accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
        /// and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
        public let product: StripeKit.Product?
        public let deletedProduct: DeletedProduct?

        public init(string: String? = nil, product: StripeKit.Product? = nil, deletedProduct: DeletedProduct? = nil) {
            self.string = string
            self.product = product
            self.deletedProduct = deletedProduct
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.product = try? container.decode(StripeKit.Product.self)
            self.deletedProduct = try? container.decode(DeletedProduct.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = product { try container.encode(value) }
            if let value = deletedProduct { try container.encode(value) }
        }
    }

    /// Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
    public enum TiersMode: String, Codable, CaseIterable {
        case graduated
        case volume
    }

    /// Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
    public enum UsageType: String, Codable, CaseIterable {
        case licensed
        case metered
    }

    public init(isActive: Bool, aggregateUsage: AggregateUsage? = nil, amount: Int? = nil, amountDecimal: String? = nil, billingScheme: BillingScheme, created: Int, currency: String, id: String, interval: Interval, intervalCount: Int, isLivemode: Bool, metadata: [String: String]? = nil, nickname: String? = nil, object: Object, product: Product? = nil, tiers: [PlanTier]? = nil, tiersMode: TiersMode? = nil, transformUsage: TransformUsage? = nil, trialPeriodDays: Int? = nil, usageType: UsageType) {
        self.isActive = isActive
        self.aggregateUsage = aggregateUsage
        self.amount = amount
        self.amountDecimal = amountDecimal
        self.billingScheme = billingScheme
        self.created = created
        self.currency = currency
        self.id = id
        self.interval = interval
        self.intervalCount = intervalCount
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.nickname = nickname
        self.object = object
        self.product = product
        self.tiers = tiers
        self.tiersMode = tiersMode
        self.transformUsage = transformUsage
        self.trialPeriodDays = trialPeriodDays
        self.usageType = usageType
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.isActive = try values.decode(Bool.self, forKey: "active")
        self.aggregateUsage = try values.decodeIfPresent(AggregateUsage.self, forKey: "aggregate_usage")
        self.amount = try values.decodeIfPresent(Int.self, forKey: "amount")
        self.amountDecimal = try values.decodeIfPresent(String.self, forKey: "amount_decimal")
        self.billingScheme = try values.decode(BillingScheme.self, forKey: "billing_scheme")
        self.created = try values.decode(Int.self, forKey: "created")
        self.currency = try values.decode(String.self, forKey: "currency")
        self.id = try values.decode(String.self, forKey: "id")
        self.interval = try values.decode(Interval.self, forKey: "interval")
        self.intervalCount = try values.decode(Int.self, forKey: "interval_count")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decodeIfPresent([String: String].self, forKey: "metadata")
        self.nickname = try values.decodeIfPresent(String.self, forKey: "nickname")
        self.object = try values.decode(Object.self, forKey: "object")
        self.product = try values.decodeIfPresent(Product.self, forKey: "product")
        self.tiers = try values.decodeIfPresent([PlanTier].self, forKey: "tiers")
        self.tiersMode = try values.decodeIfPresent(TiersMode.self, forKey: "tiers_mode")
        self.transformUsage = try values.decodeIfPresent(TransformUsage.self, forKey: "transform_usage")
        self.trialPeriodDays = try values.decodeIfPresent(Int.self, forKey: "trial_period_days")
        self.usageType = try values.decode(UsageType.self, forKey: "usage_type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(isActive, forKey: "active")
        try values.encodeIfPresent(aggregateUsage, forKey: "aggregate_usage")
        try values.encodeIfPresent(amount, forKey: "amount")
        try values.encodeIfPresent(amountDecimal, forKey: "amount_decimal")
        try values.encode(billingScheme, forKey: "billing_scheme")
        try values.encode(created, forKey: "created")
        try values.encode(currency, forKey: "currency")
        try values.encode(id, forKey: "id")
        try values.encode(interval, forKey: "interval")
        try values.encode(intervalCount, forKey: "interval_count")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encodeIfPresent(nickname, forKey: "nickname")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(product, forKey: "product")
        try values.encodeIfPresent(tiers, forKey: "tiers")
        try values.encodeIfPresent(tiersMode, forKey: "tiers_mode")
        try values.encodeIfPresent(transformUsage, forKey: "transform_usage")
        try values.encodeIfPresent(trialPeriodDays, forKey: "trial_period_days")
        try values.encode(usageType, forKey: "usage_type")
    }
}
