// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Payment_method_ideal
public struct PaymentMethodIdeal: Codable {
    /// The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
    public var bank: Bank?
    /// The Bank Identifier Code of the customer's bank, if the bank was provided.
    public var bic: Bic?

    /// The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
    public enum Bank: String, Codable, CaseIterable {
        case abnAmro = "abn_amro"
        case asnBank = "asn_bank"
        case bunq
        case handelsbanken
        case ing
        case knab
        case moneyou
        case rabobank
        case regiobank
        case revolut
        case snsBank = "sns_bank"
        case triodosBank = "triodos_bank"
        case vanLanschot = "van_lanschot"
    }

    /// The Bank Identifier Code of the customer's bank, if the bank was provided.
    public enum Bic: String, Codable, CaseIterable {
        case abnanl2a = "ABNANL2A"
        case asnbnl21 = "ASNBNL21"
        case bunqnl2a = "BUNQNL2A"
        case fvlbnl22 = "FVLBNL22"
        case handnl2a = "HANDNL2A"
        case ingbnl2a = "INGBNL2A"
        case knabnl2h = "KNABNL2H"
        case moyonl21 = "MOYONL21"
        case rabonl2u = "RABONL2U"
        case rbrbnl21 = "RBRBNL21"
        case revolt21 = "REVOLT21"
        case snsbnl2a = "SNSBNL2A"
        case trionl2u = "TRIONL2U"
    }

    public init(bank: Bank? = nil, bic: Bic? = nil) {
        self.bank = bank
        self.bic = bic
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.bank = try values.decodeIfPresent(Bank.self, forKey: "bank")
        self.bic = try values.decodeIfPresent(Bic.self, forKey: "bic")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(bank, forKey: "bank")
        try values.encodeIfPresent(bic, forKey: "bic")
    }
}
