// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Stores representations of [stock keeping units](http://en.wikipedia.org/wiki/Stock_keeping_unit).
/// SKUs describe specific product variations, taking into account any combination of: attributes,
/// currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents
/// the `size: large`, `color: red` version of that shirt.
/// 
/// Can also be used to manage inventory.
public struct Sku: Codable {
    /// Whether the SKU is available for purchase.
    public var isActive: Bool
    /// A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`.
    public var attributes: [String: String]
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// The URL of an image for this SKU, meant to be displayable to the customer.
    public var image: String?
    /// SKUInventory
    public var inventory: SkuInventory
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The dimensions of this SKU for shipping purposes.
    public var packageDimensions: PackageDimensions?
    /// The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge Â¥100, Japanese Yen being a zero-decimal currency).
    public var price: Int
    /// The ID of the product this SKU is associated with. The product must be currently active.
    public var product: Product
    /// Time at which the object was last updated. Measured in seconds since the Unix epoch.
    public var updated: Int

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case sku
    }

    /// The ID of the product this SKU is associated with. The product must be currently active.
    public final class Product: Codable {
        public let string: String?
        /// Products describe the specific goods or services you offer to your customers.
        /// For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
        /// They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
        /// [share a Payment Link](https://stripe.com/docs/payments/payment-links/overview),
        /// [accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
        /// and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
        public let product: StripeKit.Product?

        public init(string: String? = nil, product: StripeKit.Product? = nil) {
            self.string = string
            self.product = product
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.product = try? container.decode(StripeKit.Product.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = product { try container.encode(value) }
        }
    }

    public init(isActive: Bool, attributes: [String: String], created: Int, currency: String, id: String, image: String? = nil, inventory: SkuInventory, isLivemode: Bool, metadata: [String: String], object: Object, packageDimensions: PackageDimensions? = nil, price: Int, product: Product, updated: Int) {
        self.isActive = isActive
        self.attributes = attributes
        self.created = created
        self.currency = currency
        self.id = id
        self.image = image
        self.inventory = inventory
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.packageDimensions = packageDimensions
        self.price = price
        self.product = product
        self.updated = updated
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.isActive = try values.decode(Bool.self, forKey: "active")
        self.attributes = try values.decode([String: String].self, forKey: "attributes")
        self.created = try values.decode(Int.self, forKey: "created")
        self.currency = try values.decode(String.self, forKey: "currency")
        self.id = try values.decode(String.self, forKey: "id")
        self.image = try values.decodeIfPresent(String.self, forKey: "image")
        self.inventory = try values.decode(SkuInventory.self, forKey: "inventory")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.packageDimensions = try values.decodeIfPresent(PackageDimensions.self, forKey: "package_dimensions")
        self.price = try values.decode(Int.self, forKey: "price")
        self.product = try values.decode(Product.self, forKey: "product")
        self.updated = try values.decode(Int.self, forKey: "updated")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(isActive, forKey: "active")
        try values.encode(attributes, forKey: "attributes")
        try values.encode(created, forKey: "created")
        try values.encode(currency, forKey: "currency")
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(image, forKey: "image")
        try values.encode(inventory, forKey: "inventory")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(packageDimensions, forKey: "package_dimensions")
        try values.encode(price, forKey: "price")
        try values.encode(product, forKey: "product")
        try values.encode(updated, forKey: "updated")
    }
}
