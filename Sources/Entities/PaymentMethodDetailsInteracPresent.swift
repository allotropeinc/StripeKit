// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Payment_method_details_interac_present
public struct PaymentMethodDetailsInteracPresent: Codable {
    /// Card brand. Can be `interac`, `mastercard` or `visa`.
    public var brand: String?
    /// The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
    public var cardholderName: String?
    /// Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    public var country: String?
    /// Authorization response cryptogram.
    public var emvAuthData: String?
    /// Two-digit number representing the card's expiration month.
    public var expMonth: Int
    /// Four-digit number representing the card's expiration year.
    public var expYear: Int
    /// Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
    /// 
    /// *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
    public var fingerprint: String?
    /// Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    public var funding: String?
    /// ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
    public var generatedCard: String?
    /// The last four digits of the card.
    public var last4: String?
    /// Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    public var network: String?
    /// EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
    public var preferredLocales: [String]?
    /// How card details were read in this transaction.
    public var readMethod: ReadMethod?
    /// A collection of fields required to be displayed on receipts. Only required for EMV transactions.
    public var receipt: PaymentMethodDetailsInteracPresentReceipt?

    /// How card details were read in this transaction.
    public enum ReadMethod: String, Codable, CaseIterable {
        case contactEmv = "contact_emv"
        case contactlessEmv = "contactless_emv"
        case contactlessMagstripeMode = "contactless_magstripe_mode"
        case magneticStripeFallback = "magnetic_stripe_fallback"
        case magneticStripeTrack2 = "magnetic_stripe_track2"
    }

    public init(brand: String? = nil, cardholderName: String? = nil, country: String? = nil, emvAuthData: String? = nil, expMonth: Int, expYear: Int, fingerprint: String? = nil, funding: String? = nil, generatedCard: String? = nil, last4: String? = nil, network: String? = nil, preferredLocales: [String]? = nil, readMethod: ReadMethod? = nil, receipt: PaymentMethodDetailsInteracPresentReceipt? = nil) {
        self.brand = brand
        self.cardholderName = cardholderName
        self.country = country
        self.emvAuthData = emvAuthData
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.generatedCard = generatedCard
        self.last4 = last4
        self.network = network
        self.preferredLocales = preferredLocales
        self.readMethod = readMethod
        self.receipt = receipt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.brand = try values.decodeIfPresent(String.self, forKey: "brand")
        self.cardholderName = try values.decodeIfPresent(String.self, forKey: "cardholder_name")
        self.country = try values.decodeIfPresent(String.self, forKey: "country")
        self.emvAuthData = try values.decodeIfPresent(String.self, forKey: "emv_auth_data")
        self.expMonth = try values.decode(Int.self, forKey: "exp_month")
        self.expYear = try values.decode(Int.self, forKey: "exp_year")
        self.fingerprint = try values.decodeIfPresent(String.self, forKey: "fingerprint")
        self.funding = try values.decodeIfPresent(String.self, forKey: "funding")
        self.generatedCard = try values.decodeIfPresent(String.self, forKey: "generated_card")
        self.last4 = try values.decodeIfPresent(String.self, forKey: "last4")
        self.network = try values.decodeIfPresent(String.self, forKey: "network")
        self.preferredLocales = try values.decodeIfPresent([String].self, forKey: "preferred_locales")
        self.readMethod = try values.decodeIfPresent(ReadMethod.self, forKey: "read_method")
        self.receipt = try values.decodeIfPresent(PaymentMethodDetailsInteracPresentReceipt.self, forKey: "receipt")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(brand, forKey: "brand")
        try values.encodeIfPresent(cardholderName, forKey: "cardholder_name")
        try values.encodeIfPresent(country, forKey: "country")
        try values.encodeIfPresent(emvAuthData, forKey: "emv_auth_data")
        try values.encode(expMonth, forKey: "exp_month")
        try values.encode(expYear, forKey: "exp_year")
        try values.encodeIfPresent(fingerprint, forKey: "fingerprint")
        try values.encodeIfPresent(funding, forKey: "funding")
        try values.encodeIfPresent(generatedCard, forKey: "generated_card")
        try values.encodeIfPresent(last4, forKey: "last4")
        try values.encodeIfPresent(network, forKey: "network")
        try values.encodeIfPresent(preferredLocales, forKey: "preferred_locales")
        try values.encodeIfPresent(readMethod, forKey: "read_method")
        try values.encodeIfPresent(receipt, forKey: "receipt")
    }
}
