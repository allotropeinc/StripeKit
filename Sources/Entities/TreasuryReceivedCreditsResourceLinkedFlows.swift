// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TreasuryReceivedCreditsResourceLinkedFlows: Codable {
    /// The CreditReversal created as a result of this ReceivedCredit being reversed.
    public var creditReversal: String?
    /// Set if the ReceivedCredit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object.
    public var issuingAuthorization: String?
    /// Set if the ReceivedCredit is also viewable as an [Issuing transaction](https://stripe.com/docs/api#issuing_transactions) object.
    public var issuingTransaction: String?
    /// ID of the source flow. Set if `network` is `stripe` and the source flow is visible to the user. Examples of source flows include OutboundPayments, payouts, or CreditReversals.
    public var sourceFlow: String?
    /// The expandable object of the source flow.
    public var sourceFlowDetails: TreasuryReceivedCreditsResourceSourceFlowsDetails?
    /// The type of flow that originated the ReceivedCredit (for example, `outbound_payment`).
    public var sourceFlowType: String?

    public init(creditReversal: String? = nil, issuingAuthorization: String? = nil, issuingTransaction: String? = nil, sourceFlow: String? = nil, sourceFlowDetails: TreasuryReceivedCreditsResourceSourceFlowsDetails? = nil, sourceFlowType: String? = nil) {
        self.creditReversal = creditReversal
        self.issuingAuthorization = issuingAuthorization
        self.issuingTransaction = issuingTransaction
        self.sourceFlow = sourceFlow
        self.sourceFlowDetails = sourceFlowDetails
        self.sourceFlowType = sourceFlowType
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.creditReversal = try values.decodeIfPresent(String.self, forKey: "credit_reversal")
        self.issuingAuthorization = try values.decodeIfPresent(String.self, forKey: "issuing_authorization")
        self.issuingTransaction = try values.decodeIfPresent(String.self, forKey: "issuing_transaction")
        self.sourceFlow = try values.decodeIfPresent(String.self, forKey: "source_flow")
        self.sourceFlowDetails = try values.decodeIfPresent(TreasuryReceivedCreditsResourceSourceFlowsDetails.self, forKey: "source_flow_details")
        self.sourceFlowType = try values.decodeIfPresent(String.self, forKey: "source_flow_type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(creditReversal, forKey: "credit_reversal")
        try values.encodeIfPresent(issuingAuthorization, forKey: "issuing_authorization")
        try values.encodeIfPresent(issuingTransaction, forKey: "issuing_transaction")
        try values.encodeIfPresent(sourceFlow, forKey: "source_flow")
        try values.encodeIfPresent(sourceFlowDetails, forKey: "source_flow_details")
        try values.encodeIfPresent(sourceFlowType, forKey: "source_flow_type")
    }
}
