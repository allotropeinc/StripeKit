// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Additional details on the FinancialAccount Features information.
public struct TreasuryFinancialAccountsResourceTogglesSettingStatusDetails: Codable {
    /// Represents the reason why the status is `pending` or `restricted`.
    public var code: Code
    /// Represents what the user should do, if anything, to activate the Feature.
    public var resolution: Resolution?
    /// The `platform_restrictions` that are restricting this Feature.
    public var restriction: Restriction?

    /// Represents the reason why the status is `pending` or `restricted`.
    public enum Code: String, Codable, CaseIterable {
        case activating
        case capabilityNotRequested = "capability_not_requested"
        case financialAccountClosed = "financial_account_closed"
        case rejectedOther = "rejected_other"
        case rejectedUnsupportedBusiness = "rejected_unsupported_business"
        case requirementsPastDue = "requirements_past_due"
        case requirementsPendingVerification = "requirements_pending_verification"
        case restrictedByPlatform = "restricted_by_platform"
        case restrictedOther = "restricted_other"
    }

    /// Represents what the user should do, if anything, to activate the Feature.
    public enum Resolution: String, Codable, CaseIterable {
        case contactStripe = "contact_stripe"
        case provideInformation = "provide_information"
        case removeRestriction = "remove_restriction"
    }

    /// The `platform_restrictions` that are restricting this Feature.
    public enum Restriction: String, Codable, CaseIterable {
        case inboundFlows = "inbound_flows"
        case outboundFlows = "outbound_flows"
    }

    public init(code: Code, resolution: Resolution? = nil, restriction: Restriction? = nil) {
        self.code = code
        self.resolution = resolution
        self.restriction = restriction
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.code = try values.decode(Code.self, forKey: "code")
        self.resolution = try values.decodeIfPresent(Resolution.self, forKey: "resolution")
        self.restriction = try values.decodeIfPresent(Restriction.self, forKey: "restriction")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(code, forKey: "code")
        try values.encodeIfPresent(resolution, forKey: "resolution")
        try values.encodeIfPresent(restriction, forKey: "restriction")
    }
}
