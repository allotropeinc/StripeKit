// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// NotificationWebhookEndpoint
///
/// You can configure [webhook endpoints](https://stripe.com/docs/webhooks/) via the API to be
/// notified about events that happen in your Stripe account or connected
/// accounts.
/// 
/// Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
/// 
/// Related guide: [Setting up Webhooks](https://stripe.com/docs/webhooks/configure).
public struct WebhookEndpoint: Codable {
    /// The API version events are rendered as for this webhook endpoint.
    public var apiVersion: String?
    /// The ID of the associated Connect application.
    public var application: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// An optional description of what the webhook is used for.
    public var description: String?
    /// The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection.
    public var enabledEvents: [String]
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation.
    public var secret: String?
    /// The status of the webhook. It can be `enabled` or `disabled`.
    public var status: String
    /// The URL of the webhook endpoint.
    public var url: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case webhookEndpoint = "webhook_endpoint"
    }

    public init(apiVersion: String? = nil, application: String? = nil, created: Int, description: String? = nil, enabledEvents: [String], id: String, isLivemode: Bool, metadata: [String: String], object: Object, secret: String? = nil, status: String, url: String) {
        self.apiVersion = apiVersion
        self.application = application
        self.created = created
        self.description = description
        self.enabledEvents = enabledEvents
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.secret = secret
        self.status = status
        self.url = url
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.apiVersion = try values.decodeIfPresent(String.self, forKey: "api_version")
        self.application = try values.decodeIfPresent(String.self, forKey: "application")
        self.created = try values.decode(Int.self, forKey: "created")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.enabledEvents = try values.decode([String].self, forKey: "enabled_events")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.secret = try values.decodeIfPresent(String.self, forKey: "secret")
        self.status = try values.decode(String.self, forKey: "status")
        self.url = try values.decode(String.self, forKey: "url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(apiVersion, forKey: "api_version")
        try values.encodeIfPresent(application, forKey: "application")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(enabledEvents, forKey: "enabled_events")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(secret, forKey: "secret")
        try values.encode(status, forKey: "status")
        try values.encode(url, forKey: "url")
    }
}
