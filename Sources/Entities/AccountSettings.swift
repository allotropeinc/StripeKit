// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AccountSettings: Codable {
    /// AccountBacsDebitPaymentsSettings
    public var bacsDebitPayments: AccountBacsDebitPaymentsSettings?
    /// AccountBrandingSettings
    public var branding: AccountBrandingSettings
    /// AccountCardIssuingSettings
    public var cardIssuing: AccountCardIssuingSettings?
    /// AccountCardPaymentsSettings
    public var cardPayments: AccountCardPaymentsSettings
    /// AccountDashboardSettings
    public var dashboard: AccountDashboardSettings
    /// AccountPaymentsSettings
    public var payments: AccountPaymentsSettings
    /// AccountPayoutSettings
    public var payouts: AccountPayoutSettings?
    /// AccountSepaDebitPaymentsSettings
    public var sepaDebitPayments: AccountSepaDebitPaymentsSettings?
    /// AccountTreasurySettings
    public var treasury: AccountTreasurySettings?

    public init(bacsDebitPayments: AccountBacsDebitPaymentsSettings? = nil, branding: AccountBrandingSettings, cardIssuing: AccountCardIssuingSettings? = nil, cardPayments: AccountCardPaymentsSettings, dashboard: AccountDashboardSettings, payments: AccountPaymentsSettings, payouts: AccountPayoutSettings? = nil, sepaDebitPayments: AccountSepaDebitPaymentsSettings? = nil, treasury: AccountTreasurySettings? = nil) {
        self.bacsDebitPayments = bacsDebitPayments
        self.branding = branding
        self.cardIssuing = cardIssuing
        self.cardPayments = cardPayments
        self.dashboard = dashboard
        self.payments = payments
        self.payouts = payouts
        self.sepaDebitPayments = sepaDebitPayments
        self.treasury = treasury
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.bacsDebitPayments = try values.decodeIfPresent(AccountBacsDebitPaymentsSettings.self, forKey: "bacs_debit_payments")
        self.branding = try values.decode(AccountBrandingSettings.self, forKey: "branding")
        self.cardIssuing = try values.decodeIfPresent(AccountCardIssuingSettings.self, forKey: "card_issuing")
        self.cardPayments = try values.decode(AccountCardPaymentsSettings.self, forKey: "card_payments")
        self.dashboard = try values.decode(AccountDashboardSettings.self, forKey: "dashboard")
        self.payments = try values.decode(AccountPaymentsSettings.self, forKey: "payments")
        self.payouts = try values.decodeIfPresent(AccountPayoutSettings.self, forKey: "payouts")
        self.sepaDebitPayments = try values.decodeIfPresent(AccountSepaDebitPaymentsSettings.self, forKey: "sepa_debit_payments")
        self.treasury = try values.decodeIfPresent(AccountTreasurySettings.self, forKey: "treasury")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(bacsDebitPayments, forKey: "bacs_debit_payments")
        try values.encode(branding, forKey: "branding")
        try values.encodeIfPresent(cardIssuing, forKey: "card_issuing")
        try values.encode(cardPayments, forKey: "card_payments")
        try values.encode(dashboard, forKey: "dashboard")
        try values.encode(payments, forKey: "payments")
        try values.encodeIfPresent(payouts, forKey: "payouts")
        try values.encodeIfPresent(sepaDebitPayments, forKey: "sepa_debit_payments")
        try values.encodeIfPresent(treasury, forKey: "treasury")
    }
}
