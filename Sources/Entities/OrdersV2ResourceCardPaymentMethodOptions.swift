// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct OrdersV2ResourceCardPaymentMethodOptions: Codable {
    /// Controls when the funds will be captured from the customer's account.
    public var captureMethod: CaptureMethod
    /// Indicates that you intend to make future payments with the payment method.
    /// 
    /// Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the order's Customer, if present, after the order's PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
    /// 
    /// When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    /// 
    /// If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
    public var setupFutureUsage: SetupFutureUsage?

    /// Controls when the funds will be captured from the customer's account.
    public enum CaptureMethod: String, Codable, CaseIterable {
        case automatic
        case manual
    }

    /// Indicates that you intend to make future payments with the payment method.
    /// 
    /// Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the order's Customer, if present, after the order's PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
    /// 
    /// When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    /// 
    /// If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
    public enum SetupFutureUsage: String, Codable, CaseIterable {
        case `none`
        case offSession = "off_session"
        case onSession = "on_session"
    }

    public init(captureMethod: CaptureMethod, setupFutureUsage: SetupFutureUsage? = nil) {
        self.captureMethod = captureMethod
        self.setupFutureUsage = setupFutureUsage
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.captureMethod = try values.decode(CaptureMethod.self, forKey: "capture_method")
        self.setupFutureUsage = try values.decodeIfPresent(SetupFutureUsage.self, forKey: "setup_future_usage")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(captureMethod, forKey: "capture_method")
        try values.encodeIfPresent(setupFutureUsage, forKey: "setup_future_usage")
    }
}
