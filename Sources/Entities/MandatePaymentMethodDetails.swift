// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Mandate_payment_method_details
public struct MandatePaymentMethodDetails: Codable {
    /// Mandate_acss_debit
    public var acssDebit: MandateAcssDebit?
    /// Mandate_au_becs_debit
    public var auBecsDebit: MandateAuBecsDebit?
    /// Mandate_bacs_debit
    public var bacsDebit: MandateBacsDebit?
    /// Mandate_blik
    public var blik: MandateBlik?
    /// Card_mandate_payment_method_details
    public var card: [String: AnyJSON]?
    /// Mandate_link
    public var link: [String: AnyJSON]?
    /// Mandate_sepa_debit
    public var sepaDebit: MandateSepaDebit?
    /// The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method.
    public var type: String
    /// Mandate_us_bank_account
    public var usBankAccount: [String: AnyJSON]?

    public init(acssDebit: MandateAcssDebit? = nil, auBecsDebit: MandateAuBecsDebit? = nil, bacsDebit: MandateBacsDebit? = nil, blik: MandateBlik? = nil, card: [String: AnyJSON]? = nil, link: [String: AnyJSON]? = nil, sepaDebit: MandateSepaDebit? = nil, type: String, usBankAccount: [String: AnyJSON]? = nil) {
        self.acssDebit = acssDebit
        self.auBecsDebit = auBecsDebit
        self.bacsDebit = bacsDebit
        self.blik = blik
        self.card = card
        self.link = link
        self.sepaDebit = sepaDebit
        self.type = type
        self.usBankAccount = usBankAccount
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.acssDebit = try values.decodeIfPresent(MandateAcssDebit.self, forKey: "acss_debit")
        self.auBecsDebit = try values.decodeIfPresent(MandateAuBecsDebit.self, forKey: "au_becs_debit")
        self.bacsDebit = try values.decodeIfPresent(MandateBacsDebit.self, forKey: "bacs_debit")
        self.blik = try values.decodeIfPresent(MandateBlik.self, forKey: "blik")
        self.card = try values.decodeIfPresent([String: AnyJSON].self, forKey: "card")
        self.link = try values.decodeIfPresent([String: AnyJSON].self, forKey: "link")
        self.sepaDebit = try values.decodeIfPresent(MandateSepaDebit.self, forKey: "sepa_debit")
        self.type = try values.decode(String.self, forKey: "type")
        self.usBankAccount = try values.decodeIfPresent([String: AnyJSON].self, forKey: "us_bank_account")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(acssDebit, forKey: "acss_debit")
        try values.encodeIfPresent(auBecsDebit, forKey: "au_becs_debit")
        try values.encodeIfPresent(bacsDebit, forKey: "bacs_debit")
        try values.encodeIfPresent(blik, forKey: "blik")
        try values.encodeIfPresent(card, forKey: "card")
        try values.encodeIfPresent(link, forKey: "link")
        try values.encodeIfPresent(sepaDebit, forKey: "sepa_debit")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(usBankAccount, forKey: "us_bank_account")
    }
}
