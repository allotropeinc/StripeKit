// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct IssuingTransactionPurchaseDetails: Codable {
    /// Information about the flight that was purchased with this transaction.
    public var flight: IssuingTransactionFlightData?
    /// Information about fuel that was purchased with this transaction.
    public var fuel: IssuingTransactionFuelData?
    /// Information about lodging that was purchased with this transaction.
    public var lodging: IssuingTransactionLodgingData?
    /// The line items in the purchase.
    public var receipt: [IssuingTransactionReceiptData]?
    /// A merchant-specific order number.
    public var reference: String?

    public init(flight: IssuingTransactionFlightData? = nil, fuel: IssuingTransactionFuelData? = nil, lodging: IssuingTransactionLodgingData? = nil, receipt: [IssuingTransactionReceiptData]? = nil, reference: String? = nil) {
        self.flight = flight
        self.fuel = fuel
        self.lodging = lodging
        self.receipt = receipt
        self.reference = reference
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.flight = try values.decodeIfPresent(IssuingTransactionFlightData.self, forKey: "flight")
        self.fuel = try values.decodeIfPresent(IssuingTransactionFuelData.self, forKey: "fuel")
        self.lodging = try values.decodeIfPresent(IssuingTransactionLodgingData.self, forKey: "lodging")
        self.receipt = try values.decodeIfPresent([IssuingTransactionReceiptData].self, forKey: "receipt")
        self.reference = try values.decodeIfPresent(String.self, forKey: "reference")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(flight, forKey: "flight")
        try values.encodeIfPresent(fuel, forKey: "fuel")
        try values.encodeIfPresent(lodging, forKey: "lodging")
        try values.encodeIfPresent(receipt, forKey: "receipt")
        try values.encodeIfPresent(reference, forKey: "reference")
    }
}
