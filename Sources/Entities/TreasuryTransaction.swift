// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// TreasuryTransactionsResourceTransaction
///
/// Transactions represent changes to a [FinancialAccount's](https://stripe.com/docs/api#financial_accounts) balance.
public final class TreasuryTransaction: Codable {
    /// Amount (in cents) transferred.
    public let amount: Int
    /// TreasuryTransactionsResourceBalanceImpact
    ///
    /// Change to a FinancialAccount's balance
    public let balanceImpact: TreasuryTransactionsResourceBalanceImpact
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public let created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public let currency: String
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public let description: String
    /// TreasuryTransactionsResourceTransactionEntryList
    ///
    /// A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.
    public let entries: Entries?
    /// The FinancialAccount associated with this object.
    public let financialAccount: String
    /// ID of the flow that created the Transaction.
    public let flow: String?
    /// Details of the flow that created the Transaction.
    public let flowDetails: TreasuryTransactionsResourceFlowDetails?
    /// Type of the flow that created the Transaction.
    public let flowType: FlowType
    /// Unique identifier for the object.
    public let id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public let isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public let object: Object
    /// Status of the Transaction.
    public let status: Status
    /// TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions
    public let statusTransitions: TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions

    /// TreasuryTransactionsResourceTransactionEntryList
    ///
    /// A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.
    public struct Entries: Codable {
        /// Details about each object.
        public var data: [TreasuryTransactionEntry]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [TreasuryTransactionEntry], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.data = try values.decode([TreasuryTransactionEntry].self, forKey: "data")
            self.hasMore = try values.decode(Bool.self, forKey: "has_more")
            self.object = try values.decode(Object.self, forKey: "object")
            self.url = try values.decode(String.self, forKey: "url")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(data, forKey: "data")
            try values.encode(hasMore, forKey: "has_more")
            try values.encode(object, forKey: "object")
            try values.encode(url, forKey: "url")
        }
    }

    /// Type of the flow that created the Transaction.
    public enum FlowType: String, Codable, CaseIterable {
        case creditReversal = "credit_reversal"
        case debitReversal = "debit_reversal"
        case inboundTransfer = "inbound_transfer"
        case issuingAuthorization = "issuing_authorization"
        case other
        case outboundPayment = "outbound_payment"
        case outboundTransfer = "outbound_transfer"
        case receivedCredit = "received_credit"
        case receivedDebit = "received_debit"
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case treasuryTransaction = "treasury.transaction"
    }

    /// Status of the Transaction.
    public enum Status: String, Codable, CaseIterable {
        case `open`
        case posted
        case void
    }

    public init(amount: Int, balanceImpact: TreasuryTransactionsResourceBalanceImpact, created: Int, currency: String, description: String, entries: Entries? = nil, financialAccount: String, flow: String? = nil, flowDetails: TreasuryTransactionsResourceFlowDetails? = nil, flowType: FlowType, id: String, isLivemode: Bool, object: Object, status: Status, statusTransitions: TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions) {
        self.amount = amount
        self.balanceImpact = balanceImpact
        self.created = created
        self.currency = currency
        self.description = description
        self.entries = entries
        self.financialAccount = financialAccount
        self.flow = flow
        self.flowDetails = flowDetails
        self.flowType = flowType
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.status = status
        self.statusTransitions = statusTransitions
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amount = try values.decode(Int.self, forKey: "amount")
        self.balanceImpact = try values.decode(TreasuryTransactionsResourceBalanceImpact.self, forKey: "balance_impact")
        self.created = try values.decode(Int.self, forKey: "created")
        self.currency = try values.decode(String.self, forKey: "currency")
        self.description = try values.decode(String.self, forKey: "description")
        self.entries = try values.decodeIfPresent(Entries.self, forKey: "entries")
        self.financialAccount = try values.decode(String.self, forKey: "financial_account")
        self.flow = try values.decodeIfPresent(String.self, forKey: "flow")
        self.flowDetails = try values.decodeIfPresent(TreasuryTransactionsResourceFlowDetails.self, forKey: "flow_details")
        self.flowType = try values.decode(FlowType.self, forKey: "flow_type")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.object = try values.decode(Object.self, forKey: "object")
        self.status = try values.decode(Status.self, forKey: "status")
        self.statusTransitions = try values.decode(TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions.self, forKey: "status_transitions")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(amount, forKey: "amount")
        try values.encode(balanceImpact, forKey: "balance_impact")
        try values.encode(created, forKey: "created")
        try values.encode(currency, forKey: "currency")
        try values.encode(description, forKey: "description")
        try values.encodeIfPresent(entries, forKey: "entries")
        try values.encode(financialAccount, forKey: "financial_account")
        try values.encodeIfPresent(flow, forKey: "flow")
        try values.encodeIfPresent(flowDetails, forKey: "flow_details")
        try values.encode(flowType, forKey: "flow_type")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(object, forKey: "object")
        try values.encode(status, forKey: "status")
        try values.encode(statusTransitions, forKey: "status_transitions")
    }
}
