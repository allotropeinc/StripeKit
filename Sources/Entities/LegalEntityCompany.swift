// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct LegalEntityCompany: Codable {
    public var address: Address?
    /// The Kana variation of the company's primary address (Japan only).
    public var addressKana: LegalEntityJapanAddress?
    /// The Kanji variation of the company's primary address (Japan only).
    public var addressKanji: LegalEntityJapanAddress?
    /// Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).
    public var isDirectorsProvided: Bool?
    /// Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.
    public var isExecutivesProvided: Bool?
    /// The company's legal name.
    public var name: String?
    /// The Kana variation of the company's legal name (Japan only).
    public var nameKana: String?
    /// The Kanji variation of the company's legal name (Japan only).
    public var nameKanji: String?
    /// Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).
    public var isOwnersProvided: Bool?
    /// This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct.
    public var ownershipDeclaration: LegalEntityUboDeclaration?
    /// The company's phone number (used for verification).
    public var phone: String?
    /// The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
    public var structure: Structure?
    /// Whether the company's business ID number was provided.
    public var isTaxIDProvided: Bool?
    /// The jurisdiction in which the `tax_id` is registered (Germany-based companies only).
    public var taxIDRegistrar: String?
    /// Whether the company's business VAT number was provided.
    public var isVatIDProvided: Bool?
    /// Information on the verification state of the company.
    public var verification: LegalEntityCompanyVerification?

    /// The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
    public enum Structure: String, Codable, CaseIterable {
        case freeZoneEstablishment = "free_zone_establishment"
        case freeZoneLlc = "free_zone_llc"
        case governmentInstrumentality = "government_instrumentality"
        case governmentalUnit = "governmental_unit"
        case incorporatedNonProfit = "incorporated_non_profit"
        case limitedLiabilityPartnership = "limited_liability_partnership"
        case llc
        case multiMemberLlc = "multi_member_llc"
        case privateCompany = "private_company"
        case privateCorporation = "private_corporation"
        case privatePartnership = "private_partnership"
        case publicCompany = "public_company"
        case publicCorporation = "public_corporation"
        case publicPartnership = "public_partnership"
        case singleMemberLlc = "single_member_llc"
        case soleEstablishment = "sole_establishment"
        case soleProprietorship = "sole_proprietorship"
        case taxExemptGovernmentInstrumentality = "tax_exempt_government_instrumentality"
        case unincorporatedAssociation = "unincorporated_association"
        case unincorporatedNonProfit = "unincorporated_non_profit"
    }

    public init(address: Address? = nil, addressKana: LegalEntityJapanAddress? = nil, addressKanji: LegalEntityJapanAddress? = nil, isDirectorsProvided: Bool? = nil, isExecutivesProvided: Bool? = nil, name: String? = nil, nameKana: String? = nil, nameKanji: String? = nil, isOwnersProvided: Bool? = nil, ownershipDeclaration: LegalEntityUboDeclaration? = nil, phone: String? = nil, structure: Structure? = nil, isTaxIDProvided: Bool? = nil, taxIDRegistrar: String? = nil, isVatIDProvided: Bool? = nil, verification: LegalEntityCompanyVerification? = nil) {
        self.address = address
        self.addressKana = addressKana
        self.addressKanji = addressKanji
        self.isDirectorsProvided = isDirectorsProvided
        self.isExecutivesProvided = isExecutivesProvided
        self.name = name
        self.nameKana = nameKana
        self.nameKanji = nameKanji
        self.isOwnersProvided = isOwnersProvided
        self.ownershipDeclaration = ownershipDeclaration
        self.phone = phone
        self.structure = structure
        self.isTaxIDProvided = isTaxIDProvided
        self.taxIDRegistrar = taxIDRegistrar
        self.isVatIDProvided = isVatIDProvided
        self.verification = verification
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.address = try values.decodeIfPresent(Address.self, forKey: "address")
        self.addressKana = try values.decodeIfPresent(LegalEntityJapanAddress.self, forKey: "address_kana")
        self.addressKanji = try values.decodeIfPresent(LegalEntityJapanAddress.self, forKey: "address_kanji")
        self.isDirectorsProvided = try values.decodeIfPresent(Bool.self, forKey: "directors_provided")
        self.isExecutivesProvided = try values.decodeIfPresent(Bool.self, forKey: "executives_provided")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.nameKana = try values.decodeIfPresent(String.self, forKey: "name_kana")
        self.nameKanji = try values.decodeIfPresent(String.self, forKey: "name_kanji")
        self.isOwnersProvided = try values.decodeIfPresent(Bool.self, forKey: "owners_provided")
        self.ownershipDeclaration = try values.decodeIfPresent(LegalEntityUboDeclaration.self, forKey: "ownership_declaration")
        self.phone = try values.decodeIfPresent(String.self, forKey: "phone")
        self.structure = try values.decodeIfPresent(Structure.self, forKey: "structure")
        self.isTaxIDProvided = try values.decodeIfPresent(Bool.self, forKey: "tax_id_provided")
        self.taxIDRegistrar = try values.decodeIfPresent(String.self, forKey: "tax_id_registrar")
        self.isVatIDProvided = try values.decodeIfPresent(Bool.self, forKey: "vat_id_provided")
        self.verification = try values.decodeIfPresent(LegalEntityCompanyVerification.self, forKey: "verification")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(address, forKey: "address")
        try values.encodeIfPresent(addressKana, forKey: "address_kana")
        try values.encodeIfPresent(addressKanji, forKey: "address_kanji")
        try values.encodeIfPresent(isDirectorsProvided, forKey: "directors_provided")
        try values.encodeIfPresent(isExecutivesProvided, forKey: "executives_provided")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(nameKana, forKey: "name_kana")
        try values.encodeIfPresent(nameKanji, forKey: "name_kanji")
        try values.encodeIfPresent(isOwnersProvided, forKey: "owners_provided")
        try values.encodeIfPresent(ownershipDeclaration, forKey: "ownership_declaration")
        try values.encodeIfPresent(phone, forKey: "phone")
        try values.encodeIfPresent(structure, forKey: "structure")
        try values.encodeIfPresent(isTaxIDProvided, forKey: "tax_id_provided")
        try values.encodeIfPresent(taxIDRegistrar, forKey: "tax_id_registrar")
        try values.encodeIfPresent(isVatIDProvided, forKey: "vat_id_provided")
        try values.encodeIfPresent(verification, forKey: "verification")
    }
}
