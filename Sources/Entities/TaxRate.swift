// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
/// 
/// Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
public struct TaxRate: Codable {
    /// Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
    public var isActive: Bool
    /// Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    public var country: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
    public var description: String?
    /// The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
    public var displayName: String
    /// Unique identifier for the object.
    public var id: String
    /// This specifies if the tax rate is inclusive or exclusive.
    public var isInclusive: Bool
    /// The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customerâ€™s invoice.
    public var jurisdiction: String?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// This represents the tax rate percent out of 100.
    public var percentage: Double
    /// [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States.
    public var state: String?
    /// The high-level tax type, such as `vat` or `sales_tax`.
    public var taxType: TaxType?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case taxRate = "tax_rate"
    }

    /// The high-level tax type, such as `vat` or `sales_tax`.
    public enum TaxType: String, Codable, CaseIterable {
        case gst
        case hst
        case jct
        case pst
        case qst
        case rst
        case salesTax = "sales_tax"
        case vat
    }

    public init(isActive: Bool, country: String? = nil, created: Int, description: String? = nil, displayName: String, id: String, isInclusive: Bool, jurisdiction: String? = nil, isLivemode: Bool, metadata: [String: String]? = nil, object: Object, percentage: Double, state: String? = nil, taxType: TaxType? = nil) {
        self.isActive = isActive
        self.country = country
        self.created = created
        self.description = description
        self.displayName = displayName
        self.id = id
        self.isInclusive = isInclusive
        self.jurisdiction = jurisdiction
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.percentage = percentage
        self.state = state
        self.taxType = taxType
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.isActive = try values.decode(Bool.self, forKey: "active")
        self.country = try values.decodeIfPresent(String.self, forKey: "country")
        self.created = try values.decode(Int.self, forKey: "created")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.displayName = try values.decode(String.self, forKey: "display_name")
        self.id = try values.decode(String.self, forKey: "id")
        self.isInclusive = try values.decode(Bool.self, forKey: "inclusive")
        self.jurisdiction = try values.decodeIfPresent(String.self, forKey: "jurisdiction")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decodeIfPresent([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.percentage = try values.decode(Double.self, forKey: "percentage")
        self.state = try values.decodeIfPresent(String.self, forKey: "state")
        self.taxType = try values.decodeIfPresent(TaxType.self, forKey: "tax_type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(isActive, forKey: "active")
        try values.encodeIfPresent(country, forKey: "country")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(displayName, forKey: "display_name")
        try values.encode(id, forKey: "id")
        try values.encode(isInclusive, forKey: "inclusive")
        try values.encodeIfPresent(jurisdiction, forKey: "jurisdiction")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encode(percentage, forKey: "percentage")
        try values.encodeIfPresent(state, forKey: "state")
        try values.encodeIfPresent(taxType, forKey: "tax_type")
    }
}
