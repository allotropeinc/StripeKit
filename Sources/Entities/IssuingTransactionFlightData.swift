// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct IssuingTransactionFlightData: Codable {
    /// The time that the flight departed.
    public var departureAt: Int?
    /// The name of the passenger.
    public var passengerName: String?
    /// Whether the ticket is refundable.
    public var isRefundable: Bool?
    /// The legs of the trip.
    public var segments: [IssuingTransactionFlightDataLeg]?
    /// The travel agency that issued the ticket.
    public var travelAgency: String?

    public init(departureAt: Int? = nil, passengerName: String? = nil, isRefundable: Bool? = nil, segments: [IssuingTransactionFlightDataLeg]? = nil, travelAgency: String? = nil) {
        self.departureAt = departureAt
        self.passengerName = passengerName
        self.isRefundable = isRefundable
        self.segments = segments
        self.travelAgency = travelAgency
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.departureAt = try values.decodeIfPresent(Int.self, forKey: "departure_at")
        self.passengerName = try values.decodeIfPresent(String.self, forKey: "passenger_name")
        self.isRefundable = try values.decodeIfPresent(Bool.self, forKey: "refundable")
        self.segments = try values.decodeIfPresent([IssuingTransactionFlightDataLeg].self, forKey: "segments")
        self.travelAgency = try values.decodeIfPresent(String.self, forKey: "travel_agency")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(departureAt, forKey: "departure_at")
        try values.encodeIfPresent(passengerName, forKey: "passenger_name")
        try values.encodeIfPresent(isRefundable, forKey: "refundable")
        try values.encodeIfPresent(segments, forKey: "segments")
        try values.encodeIfPresent(travelAgency, forKey: "travel_agency")
    }
}
