// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SetupAttemptPaymentMethodDetails: Codable {
    /// Setup_attempt_payment_method_details_acss_debit
    public var acssDebit: [String: AnyJSON]?
    /// Setup_attempt_payment_method_details_au_becs_debit
    public var auBecsDebit: [String: AnyJSON]?
    /// Setup_attempt_payment_method_details_bacs_debit
    public var bacsDebit: [String: AnyJSON]?
    /// Setup_attempt_payment_method_details_bancontact
    public var bancontact: SetupAttemptPaymentMethodDetailsBancontact?
    /// Setup_attempt_payment_method_details_blik
    public var blik: [String: AnyJSON]?
    /// Setup_attempt_payment_method_details_boleto
    public var boleto: [String: AnyJSON]?
    /// Setup_attempt_payment_method_details_card
    public var card: SetupAttemptPaymentMethodDetailsCard?
    /// Setup_attempt_payment_method_details_card_present
    public var cardPresent: SetupAttemptPaymentMethodDetailsCardPresent?
    /// Setup_attempt_payment_method_details_ideal
    public var ideal: SetupAttemptPaymentMethodDetailsIdeal?
    /// Setup_attempt_payment_method_details_link
    public var link: [String: AnyJSON]?
    /// Setup_attempt_payment_method_details_sepa_debit
    public var sepaDebit: [String: AnyJSON]?
    /// Setup_attempt_payment_method_details_sofort
    public var sofort: SetupAttemptPaymentMethodDetailsSofort?
    /// The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method.
    public var type: String
    /// Setup_attempt_payment_method_details_us_bank_account
    public var usBankAccount: [String: AnyJSON]?

    public init(acssDebit: [String: AnyJSON]? = nil, auBecsDebit: [String: AnyJSON]? = nil, bacsDebit: [String: AnyJSON]? = nil, bancontact: SetupAttemptPaymentMethodDetailsBancontact? = nil, blik: [String: AnyJSON]? = nil, boleto: [String: AnyJSON]? = nil, card: SetupAttemptPaymentMethodDetailsCard? = nil, cardPresent: SetupAttemptPaymentMethodDetailsCardPresent? = nil, ideal: SetupAttemptPaymentMethodDetailsIdeal? = nil, link: [String: AnyJSON]? = nil, sepaDebit: [String: AnyJSON]? = nil, sofort: SetupAttemptPaymentMethodDetailsSofort? = nil, type: String, usBankAccount: [String: AnyJSON]? = nil) {
        self.acssDebit = acssDebit
        self.auBecsDebit = auBecsDebit
        self.bacsDebit = bacsDebit
        self.bancontact = bancontact
        self.blik = blik
        self.boleto = boleto
        self.card = card
        self.cardPresent = cardPresent
        self.ideal = ideal
        self.link = link
        self.sepaDebit = sepaDebit
        self.sofort = sofort
        self.type = type
        self.usBankAccount = usBankAccount
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.acssDebit = try values.decodeIfPresent([String: AnyJSON].self, forKey: "acss_debit")
        self.auBecsDebit = try values.decodeIfPresent([String: AnyJSON].self, forKey: "au_becs_debit")
        self.bacsDebit = try values.decodeIfPresent([String: AnyJSON].self, forKey: "bacs_debit")
        self.bancontact = try values.decodeIfPresent(SetupAttemptPaymentMethodDetailsBancontact.self, forKey: "bancontact")
        self.blik = try values.decodeIfPresent([String: AnyJSON].self, forKey: "blik")
        self.boleto = try values.decodeIfPresent([String: AnyJSON].self, forKey: "boleto")
        self.card = try values.decodeIfPresent(SetupAttemptPaymentMethodDetailsCard.self, forKey: "card")
        self.cardPresent = try values.decodeIfPresent(SetupAttemptPaymentMethodDetailsCardPresent.self, forKey: "card_present")
        self.ideal = try values.decodeIfPresent(SetupAttemptPaymentMethodDetailsIdeal.self, forKey: "ideal")
        self.link = try values.decodeIfPresent([String: AnyJSON].self, forKey: "link")
        self.sepaDebit = try values.decodeIfPresent([String: AnyJSON].self, forKey: "sepa_debit")
        self.sofort = try values.decodeIfPresent(SetupAttemptPaymentMethodDetailsSofort.self, forKey: "sofort")
        self.type = try values.decode(String.self, forKey: "type")
        self.usBankAccount = try values.decodeIfPresent([String: AnyJSON].self, forKey: "us_bank_account")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(acssDebit, forKey: "acss_debit")
        try values.encodeIfPresent(auBecsDebit, forKey: "au_becs_debit")
        try values.encodeIfPresent(bacsDebit, forKey: "bacs_debit")
        try values.encodeIfPresent(bancontact, forKey: "bancontact")
        try values.encodeIfPresent(blik, forKey: "blik")
        try values.encodeIfPresent(boleto, forKey: "boleto")
        try values.encodeIfPresent(card, forKey: "card")
        try values.encodeIfPresent(cardPresent, forKey: "card_present")
        try values.encodeIfPresent(ideal, forKey: "ideal")
        try values.encodeIfPresent(link, forKey: "link")
        try values.encodeIfPresent(sepaDebit, forKey: "sepa_debit")
        try values.encodeIfPresent(sofort, forKey: "sofort")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(usBankAccount, forKey: "us_bank_account")
    }
}
