// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct IssuingCardShipping: Codable {
    public var address: Address
    /// The delivery company that shipped a card.
    public var carrier: Carrier?
    /// A unix timestamp representing a best estimate of when the card will be delivered.
    public var eta: Int?
    /// Recipient name.
    public var name: String
    /// Shipment service, such as `standard` or `express`.
    public var service: Service
    /// The delivery status of the card.
    public var status: Status?
    /// A tracking number for a card shipment.
    public var trackingNumber: String?
    /// A link to the shipping carrier's site where you can view detailed information about a card shipment.
    public var trackingURL: String?
    /// Packaging options.
    public var type: `Type`

    /// The delivery company that shipped a card.
    public enum Carrier: String, Codable, CaseIterable {
        case dhl
        case fedex
        case royalMail = "royal_mail"
        case usps
    }

    /// Shipment service, such as `standard` or `express`.
    public enum Service: String, Codable, CaseIterable {
        case express
        case priority
        case standard
    }

    /// The delivery status of the card.
    public enum Status: String, Codable, CaseIterable {
        case canceled
        case delivered
        case failure
        case pending
        case returned
        case shipped
    }

    /// Packaging options.
    public enum `Type`: String, Codable, CaseIterable {
        case bulk
        case individual
    }

    public init(address: Address, carrier: Carrier? = nil, eta: Int? = nil, name: String, service: Service, status: Status? = nil, trackingNumber: String? = nil, trackingURL: String? = nil, type: `Type`) {
        self.address = address
        self.carrier = carrier
        self.eta = eta
        self.name = name
        self.service = service
        self.status = status
        self.trackingNumber = trackingNumber
        self.trackingURL = trackingURL
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.address = try values.decode(Address.self, forKey: "address")
        self.carrier = try values.decodeIfPresent(Carrier.self, forKey: "carrier")
        self.eta = try values.decodeIfPresent(Int.self, forKey: "eta")
        self.name = try values.decode(String.self, forKey: "name")
        self.service = try values.decode(Service.self, forKey: "service")
        self.status = try values.decodeIfPresent(Status.self, forKey: "status")
        self.trackingNumber = try values.decodeIfPresent(String.self, forKey: "tracking_number")
        self.trackingURL = try values.decodeIfPresent(String.self, forKey: "tracking_url")
        self.type = try values.decode(`Type`.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(address, forKey: "address")
        try values.encodeIfPresent(carrier, forKey: "carrier")
        try values.encodeIfPresent(eta, forKey: "eta")
        try values.encode(name, forKey: "name")
        try values.encode(service, forKey: "service")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encodeIfPresent(trackingNumber, forKey: "tracking_number")
        try values.encodeIfPresent(trackingURL, forKey: "tracking_url")
        try values.encode(type, forKey: "type")
    }
}
