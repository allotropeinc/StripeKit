// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Subscription items allow you to create customer subscriptions with more than
/// one plan, making it easy to represent complex billing relationships.
public struct SubscriptionItem: Codable {
    /// Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
    public var billingThresholds: SubscriptionItemBillingThresholds?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Unique identifier for the object.
    public var id: String
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
    /// [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
    /// 
    /// For example, you might have a single "gold" product that has prices for $10/month, $100/year, and â‚¬9 once.
    /// 
    /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
    public var price: Price
    /// The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.
    public var quantity: Int?
    /// The `subscription` this `subscription_item` belongs to.
    public var subscription: String
    /// The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.
    public var taxRates: [TaxRate]?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case subscriptionItem = "subscription_item"
    }

    public init(billingThresholds: SubscriptionItemBillingThresholds? = nil, created: Int, id: String, metadata: [String: String], object: Object, price: Price, quantity: Int? = nil, subscription: String, taxRates: [TaxRate]? = nil) {
        self.billingThresholds = billingThresholds
        self.created = created
        self.id = id
        self.metadata = metadata
        self.object = object
        self.price = price
        self.quantity = quantity
        self.subscription = subscription
        self.taxRates = taxRates
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.billingThresholds = try values.decodeIfPresent(SubscriptionItemBillingThresholds.self, forKey: "billing_thresholds")
        self.created = try values.decode(Int.self, forKey: "created")
        self.id = try values.decode(String.self, forKey: "id")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.price = try values.decode(Price.self, forKey: "price")
        self.quantity = try values.decodeIfPresent(Int.self, forKey: "quantity")
        self.subscription = try values.decode(String.self, forKey: "subscription")
        self.taxRates = try values.decodeIfPresent([TaxRate].self, forKey: "tax_rates")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(billingThresholds, forKey: "billing_thresholds")
        try values.encode(created, forKey: "created")
        try values.encode(id, forKey: "id")
        try values.encode(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encode(price, forKey: "price")
        try values.encodeIfPresent(quantity, forKey: "quantity")
        try values.encode(subscription, forKey: "subscription")
        try values.encodeIfPresent(taxRates, forKey: "tax_rates")
    }
}
