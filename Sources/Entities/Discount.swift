// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
/// It contains information about when the discount began, when it will end, and what it is applied to.
/// 
/// Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
public struct Discount: Codable {
    /// The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
    public var checkoutSession: String?
    /// A coupon contains information about a percent-off or amount-off discount you
    /// might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
    /// [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
    public var coupon: Coupon
    /// The ID of the customer associated with this discount.
    public var customer: Customer?
    /// If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
    public var end: Int?
    /// The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
    public var id: String
    /// The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
    public var invoice: String?
    /// The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
    public var invoiceItem: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The promotion code applied to create this discount.
    public var promotionCode: PromotionCode?
    /// Date that the coupon was applied.
    public var start: Int
    /// The subscription that this coupon is applied to, if it is applied to a particular subscription.
    public var subscription: String?

    /// The ID of the customer associated with this discount.
    public final class Customer: Codable {
        public let string: String?
        /// This object represents a customer of your business. It lets you create recurring charges and track payments that belong to the same customer.
        /// 
        /// Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
        public let customer: StripeKit.Customer?
        public let deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeKit.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeKit.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case discount
    }

    /// The promotion code applied to create this discount.
    public final class PromotionCode: Codable {
        public let string: String?
        /// A Promotion Code represents a customer-redeemable code for a [coupon](https://stripe.com/docs/api#coupons). It can be used to
        /// create multiple codes for a single coupon.
        public let promotionCode: StripeKit.PromotionCode?

        public init(string: String? = nil, promotionCode: StripeKit.PromotionCode? = nil) {
            self.string = string
            self.promotionCode = promotionCode
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.promotionCode = try? container.decode(StripeKit.PromotionCode.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = promotionCode { try container.encode(value) }
        }
    }

    public init(checkoutSession: String? = nil, coupon: Coupon, customer: Customer? = nil, end: Int? = nil, id: String, invoice: String? = nil, invoiceItem: String? = nil, object: Object, promotionCode: PromotionCode? = nil, start: Int, subscription: String? = nil) {
        self.checkoutSession = checkoutSession
        self.coupon = coupon
        self.customer = customer
        self.end = end
        self.id = id
        self.invoice = invoice
        self.invoiceItem = invoiceItem
        self.object = object
        self.promotionCode = promotionCode
        self.start = start
        self.subscription = subscription
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.checkoutSession = try values.decodeIfPresent(String.self, forKey: "checkout_session")
        self.coupon = try values.decode(Coupon.self, forKey: "coupon")
        self.customer = try values.decodeIfPresent(Customer.self, forKey: "customer")
        self.end = try values.decodeIfPresent(Int.self, forKey: "end")
        self.id = try values.decode(String.self, forKey: "id")
        self.invoice = try values.decodeIfPresent(String.self, forKey: "invoice")
        self.invoiceItem = try values.decodeIfPresent(String.self, forKey: "invoice_item")
        self.object = try values.decode(Object.self, forKey: "object")
        self.promotionCode = try values.decodeIfPresent(PromotionCode.self, forKey: "promotion_code")
        self.start = try values.decode(Int.self, forKey: "start")
        self.subscription = try values.decodeIfPresent(String.self, forKey: "subscription")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(checkoutSession, forKey: "checkout_session")
        try values.encode(coupon, forKey: "coupon")
        try values.encodeIfPresent(customer, forKey: "customer")
        try values.encodeIfPresent(end, forKey: "end")
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(invoice, forKey: "invoice")
        try values.encodeIfPresent(invoiceItem, forKey: "invoice_item")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(promotionCode, forKey: "promotion_code")
        try values.encode(start, forKey: "start")
        try values.encodeIfPresent(subscription, forKey: "subscription")
    }
}
