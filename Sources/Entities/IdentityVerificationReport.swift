// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// GelatoVerificationReport
///
/// A VerificationReport is the result of an attempt to collect and verify data from a user.
/// The collection of verification checks performed is determined from the `type` and `options`
/// parameters used. You can find the result of each verification check performed in the
/// appropriate sub-resource: `document`, `id_number`, `selfie`.
/// 
/// Each VerificationReport contains a copy of any data collected by the user as well as
/// reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
/// API. To configure and create VerificationReports, use the
/// [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
/// 
/// Related guides: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
public struct IdentityVerificationReport: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// GelatoDocumentReport
    ///
    /// Result from a document check
    public var document: GelatoDocumentReport?
    /// Unique identifier for the object.
    public var id: String
    /// GelatoIdNumberReport
    ///
    /// Result from an id_number check
    public var idNumber: GelatoIDNumberReport?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// GelatoVerificationReportOptions
    public var options: GelatoVerificationReportOptions
    /// GelatoSelfieReport
    ///
    /// Result from a selfie check
    public var selfie: GelatoSelfieReport?
    /// Type of report.
    public var type: `Type`
    /// ID of the VerificationSession that created this report.
    public var verificationSession: String?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case identityVerificationReport = "identity.verification_report"
    }

    /// Type of report.
    public enum `Type`: String, Codable, CaseIterable {
        case document
        case idNumber = "id_number"
    }

    public init(created: Int, document: GelatoDocumentReport? = nil, id: String, idNumber: GelatoIDNumberReport? = nil, isLivemode: Bool, object: Object, options: GelatoVerificationReportOptions, selfie: GelatoSelfieReport? = nil, type: `Type`, verificationSession: String? = nil) {
        self.created = created
        self.document = document
        self.id = id
        self.idNumber = idNumber
        self.isLivemode = isLivemode
        self.object = object
        self.options = options
        self.selfie = selfie
        self.type = type
        self.verificationSession = verificationSession
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.created = try values.decode(Int.self, forKey: "created")
        self.document = try values.decodeIfPresent(GelatoDocumentReport.self, forKey: "document")
        self.id = try values.decode(String.self, forKey: "id")
        self.idNumber = try values.decodeIfPresent(GelatoIDNumberReport.self, forKey: "id_number")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.object = try values.decode(Object.self, forKey: "object")
        self.options = try values.decode(GelatoVerificationReportOptions.self, forKey: "options")
        self.selfie = try values.decodeIfPresent(GelatoSelfieReport.self, forKey: "selfie")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.verificationSession = try values.decodeIfPresent(String.self, forKey: "verification_session")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(document, forKey: "document")
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(idNumber, forKey: "id_number")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(object, forKey: "object")
        try values.encode(options, forKey: "options")
        try values.encodeIfPresent(selfie, forKey: "selfie")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(verificationSession, forKey: "verification_session")
    }
}
