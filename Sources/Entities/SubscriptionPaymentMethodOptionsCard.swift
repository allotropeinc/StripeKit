// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Subscription_payment_method_options_card
public struct SubscriptionPaymentMethodOptionsCard: Codable {
    /// Invoice_mandate_options_card
    public var mandateOptions: InvoiceMandateOptionsCard?
    /// We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    public var requestThreeDSecure: RequestThreeDSecure?

    /// We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    public enum RequestThreeDSecure: String, Codable, CaseIterable {
        case any
        case automatic
    }

    public init(mandateOptions: InvoiceMandateOptionsCard? = nil, requestThreeDSecure: RequestThreeDSecure? = nil) {
        self.mandateOptions = mandateOptions
        self.requestThreeDSecure = requestThreeDSecure
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.mandateOptions = try values.decodeIfPresent(InvoiceMandateOptionsCard.self, forKey: "mandate_options")
        self.requestThreeDSecure = try values.decodeIfPresent(RequestThreeDSecure.self, forKey: "request_three_d_secure")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(mandateOptions, forKey: "mandate_options")
        try values.encodeIfPresent(requestThreeDSecure, forKey: "request_three_d_secure")
    }
}
