// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GelatoReportDocumentOptions: Codable {
    /// Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
    public var allowedTypes: [AllowedType]?
    /// Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
    public var requireIDNumber: Bool?
    /// Disable image uploads, identity document images have to be captured using the device’s camera.
    public var requireLiveCapture: Bool?
    /// Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
    public var requireMatchingSelfie: Bool?

    public enum AllowedType: String, Codable, CaseIterable {
        case drivingLicense = "driving_license"
        case idCard = "id_card"
        case passport
    }

    public init(allowedTypes: [AllowedType]? = nil, requireIDNumber: Bool? = nil, requireLiveCapture: Bool? = nil, requireMatchingSelfie: Bool? = nil) {
        self.allowedTypes = allowedTypes
        self.requireIDNumber = requireIDNumber
        self.requireLiveCapture = requireLiveCapture
        self.requireMatchingSelfie = requireMatchingSelfie
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.allowedTypes = try values.decodeIfPresent([AllowedType].self, forKey: "allowed_types")
        self.requireIDNumber = try values.decodeIfPresent(Bool.self, forKey: "require_id_number")
        self.requireLiveCapture = try values.decodeIfPresent(Bool.self, forKey: "require_live_capture")
        self.requireMatchingSelfie = try values.decodeIfPresent(Bool.self, forKey: "require_matching_selfie")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(allowedTypes, forKey: "allowed_types")
        try values.encodeIfPresent(requireIDNumber, forKey: "require_id_number")
        try values.encodeIfPresent(requireLiveCapture, forKey: "require_live_capture")
        try values.encodeIfPresent(requireMatchingSelfie, forKey: "require_matching_selfie")
    }
}
