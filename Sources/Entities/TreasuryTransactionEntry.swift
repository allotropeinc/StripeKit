// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// TreasuryTransactionsResourceTransactionEntry
///
/// TransactionEntries represent individual units of money movements within a single [Transaction](https://stripe.com/docs/api#transactions).
public struct TreasuryTransactionEntry: Codable {
    /// TreasuryTransactionsResourceBalanceImpact
    ///
    /// Change to a FinancialAccount's balance
    public var balanceImpact: TreasuryTransactionsResourceBalanceImpact
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// When the TransactionEntry will impact the FinancialAccount's balance.
    public var effectiveAt: Int
    /// The FinancialAccount associated with this object.
    public var financialAccount: String
    /// Token of the flow associated with the TransactionEntry.
    public var flow: String?
    /// Details of the flow associated with the TransactionEntry.
    public var flowDetails: TreasuryTransactionsResourceFlowDetails?
    /// Type of the flow associated with the TransactionEntry.
    public var flowType: FlowType
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The Transaction associated with this object.
    public var transaction: Transaction
    /// The specific money movement that generated the TransactionEntry.
    public var type: `Type`

    /// Type of the flow associated with the TransactionEntry.
    public enum FlowType: String, Codable, CaseIterable {
        case creditReversal = "credit_reversal"
        case debitReversal = "debit_reversal"
        case inboundTransfer = "inbound_transfer"
        case issuingAuthorization = "issuing_authorization"
        case other
        case outboundPayment = "outbound_payment"
        case outboundTransfer = "outbound_transfer"
        case receivedCredit = "received_credit"
        case receivedDebit = "received_debit"
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case treasuryTransactionEntry = "treasury.transaction_entry"
    }

    /// The Transaction associated with this object.
    public struct Transaction: Codable {
        public var string: String?
        /// TreasuryTransactionsResourceTransaction
        ///
        /// Transactions represent changes to a [FinancialAccount's](https://stripe.com/docs/api#financial_accounts) balance.
        public var treasuryTransaction: TreasuryTransaction?

        public init(string: String? = nil, treasuryTransaction: TreasuryTransaction? = nil) {
            self.string = string
            self.treasuryTransaction = treasuryTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.treasuryTransaction = try? container.decode(TreasuryTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = treasuryTransaction { try container.encode(value) }
        }
    }

    /// The specific money movement that generated the TransactionEntry.
    public enum `Type`: String, Codable, CaseIterable {
        case creditReversal = "credit_reversal"
        case creditReversalPosting = "credit_reversal_posting"
        case debitReversal = "debit_reversal"
        case inboundTransfer = "inbound_transfer"
        case inboundTransferReturn = "inbound_transfer_return"
        case issuingAuthorizationHold = "issuing_authorization_hold"
        case issuingAuthorizationRelease = "issuing_authorization_release"
        case other
        case outboundPayment = "outbound_payment"
        case outboundPaymentCancellation = "outbound_payment_cancellation"
        case outboundPaymentFailure = "outbound_payment_failure"
        case outboundPaymentPosting = "outbound_payment_posting"
        case outboundPaymentReturn = "outbound_payment_return"
        case outboundTransfer = "outbound_transfer"
        case outboundTransferCancellation = "outbound_transfer_cancellation"
        case outboundTransferFailure = "outbound_transfer_failure"
        case outboundTransferPosting = "outbound_transfer_posting"
        case outboundTransferReturn = "outbound_transfer_return"
        case receivedCredit = "received_credit"
        case receivedDebit = "received_debit"
    }

    public init(balanceImpact: TreasuryTransactionsResourceBalanceImpact, created: Int, currency: String, effectiveAt: Int, financialAccount: String, flow: String? = nil, flowDetails: TreasuryTransactionsResourceFlowDetails? = nil, flowType: FlowType, id: String, isLivemode: Bool, object: Object, transaction: Transaction, type: `Type`) {
        self.balanceImpact = balanceImpact
        self.created = created
        self.currency = currency
        self.effectiveAt = effectiveAt
        self.financialAccount = financialAccount
        self.flow = flow
        self.flowDetails = flowDetails
        self.flowType = flowType
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.transaction = transaction
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.balanceImpact = try values.decode(TreasuryTransactionsResourceBalanceImpact.self, forKey: "balance_impact")
        self.created = try values.decode(Int.self, forKey: "created")
        self.currency = try values.decode(String.self, forKey: "currency")
        self.effectiveAt = try values.decode(Int.self, forKey: "effective_at")
        self.financialAccount = try values.decode(String.self, forKey: "financial_account")
        self.flow = try values.decodeIfPresent(String.self, forKey: "flow")
        self.flowDetails = try values.decodeIfPresent(TreasuryTransactionsResourceFlowDetails.self, forKey: "flow_details")
        self.flowType = try values.decode(FlowType.self, forKey: "flow_type")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.object = try values.decode(Object.self, forKey: "object")
        self.transaction = try values.decode(Transaction.self, forKey: "transaction")
        self.type = try values.decode(`Type`.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(balanceImpact, forKey: "balance_impact")
        try values.encode(created, forKey: "created")
        try values.encode(currency, forKey: "currency")
        try values.encode(effectiveAt, forKey: "effective_at")
        try values.encode(financialAccount, forKey: "financial_account")
        try values.encodeIfPresent(flow, forKey: "flow")
        try values.encodeIfPresent(flowDetails, forKey: "flow_details")
        try values.encode(flowType, forKey: "flow_type")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(object, forKey: "object")
        try values.encode(transaction, forKey: "transaction")
        try values.encode(type, forKey: "type")
    }
}
