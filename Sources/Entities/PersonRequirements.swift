// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PersonRequirements: Codable {
    /// Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
    public var alternatives: [AccountRequirementsAlternative]?
    /// Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
    public var currentlyDue: [String]
    /// Fields that are `currently_due` and need to be collected again because validation or verification failed.
    public var errors: [AccountRequirementsError]
    /// Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set.
    public var eventuallyDue: [String]
    /// Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account.
    public var pastDue: [String]
    /// Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
    public var pendingVerification: [String]

    public init(alternatives: [AccountRequirementsAlternative]? = nil, currentlyDue: [String], errors: [AccountRequirementsError], eventuallyDue: [String], pastDue: [String], pendingVerification: [String]) {
        self.alternatives = alternatives
        self.currentlyDue = currentlyDue
        self.errors = errors
        self.eventuallyDue = eventuallyDue
        self.pastDue = pastDue
        self.pendingVerification = pendingVerification
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.alternatives = try values.decodeIfPresent([AccountRequirementsAlternative].self, forKey: "alternatives")
        self.currentlyDue = try values.decode([String].self, forKey: "currently_due")
        self.errors = try values.decode([AccountRequirementsError].self, forKey: "errors")
        self.eventuallyDue = try values.decode([String].self, forKey: "eventually_due")
        self.pastDue = try values.decode([String].self, forKey: "past_due")
        self.pendingVerification = try values.decode([String].self, forKey: "pending_verification")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(alternatives, forKey: "alternatives")
        try values.encode(currentlyDue, forKey: "currently_due")
        try values.encode(errors, forKey: "errors")
        try values.encode(eventuallyDue, forKey: "eventually_due")
        try values.encode(pastDue, forKey: "past_due")
        try values.encode(pendingVerification, forKey: "pending_verification")
    }
}
