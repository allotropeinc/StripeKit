// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A Mandate is a record of the permission a customer has given you to debit their payment method.
public struct Mandate: Codable {
    /// Customer_acceptance
    public var customerAcceptance: CustomerAcceptance
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Mandate_multi_use
    public var multiUse: [String: AnyJSON]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// ID of the payment method associated with this mandate.
    public var paymentMethod: PaymentMethod
    /// Mandate_payment_method_details
    public var paymentMethodDetails: MandatePaymentMethodDetails
    /// Mandate_single_use
    public var singleUse: MandateSingleUse?
    /// The status of the mandate, which indicates whether it can be used to initiate a payment.
    public var status: Status
    /// The type of the mandate.
    public var type: `Type`

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case mandate
    }

    /// ID of the payment method associated with this mandate.
    public final class PaymentMethod: Codable {
        public let string: String?
        /// PaymentMethod objects represent your customer's payment instruments.
        /// You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
        /// Customer objects to store instrument details for future payments.
        /// 
        /// Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
        public let paymentMethod: StripeKit.PaymentMethod?

        public init(string: String? = nil, paymentMethod: StripeKit.PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(StripeKit.PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The status of the mandate, which indicates whether it can be used to initiate a payment.
    public enum Status: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The type of the mandate.
    public enum `Type`: String, Codable, CaseIterable {
        case multiUse = "multi_use"
        case singleUse = "single_use"
    }

    public init(customerAcceptance: CustomerAcceptance, id: String, isLivemode: Bool, multiUse: [String: AnyJSON]? = nil, object: Object, paymentMethod: PaymentMethod, paymentMethodDetails: MandatePaymentMethodDetails, singleUse: MandateSingleUse? = nil, status: Status, type: `Type`) {
        self.customerAcceptance = customerAcceptance
        self.id = id
        self.isLivemode = isLivemode
        self.multiUse = multiUse
        self.object = object
        self.paymentMethod = paymentMethod
        self.paymentMethodDetails = paymentMethodDetails
        self.singleUse = singleUse
        self.status = status
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.customerAcceptance = try values.decode(CustomerAcceptance.self, forKey: "customer_acceptance")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.multiUse = try values.decodeIfPresent([String: AnyJSON].self, forKey: "multi_use")
        self.object = try values.decode(Object.self, forKey: "object")
        self.paymentMethod = try values.decode(PaymentMethod.self, forKey: "payment_method")
        self.paymentMethodDetails = try values.decode(MandatePaymentMethodDetails.self, forKey: "payment_method_details")
        self.singleUse = try values.decodeIfPresent(MandateSingleUse.self, forKey: "single_use")
        self.status = try values.decode(Status.self, forKey: "status")
        self.type = try values.decode(`Type`.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(customerAcceptance, forKey: "customer_acceptance")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encodeIfPresent(multiUse, forKey: "multi_use")
        try values.encode(object, forKey: "object")
        try values.encode(paymentMethod, forKey: "payment_method")
        try values.encode(paymentMethodDetails, forKey: "payment_method_details")
        try values.encodeIfPresent(singleUse, forKey: "single_use")
        try values.encode(status, forKey: "status")
        try values.encode(type, forKey: "type")
    }
}
