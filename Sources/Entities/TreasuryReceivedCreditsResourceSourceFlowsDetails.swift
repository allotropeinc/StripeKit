// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TreasuryReceivedCreditsResourceSourceFlowsDetails: Codable {
    /// TreasuryReceivedCreditsResourceCreditReversal
    ///
    /// You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.
    public var creditReversal: TreasuryCreditReversal?
    /// TreasuryOutboundPaymentsResourceOutboundPayment
    ///
    /// Use OutboundPayments to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).
    /// 
    /// Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.
    public var outboundPayment: TreasuryOutboundPayment?
    /// A `Payout` object is created when you receive funds from Stripe, or when you
    /// initiate a payout to either a bank account or debit card of a [connected
    /// Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
    /// as well as list all payouts. Payouts are made on [varying
    /// schedules](/docs/connect/manage-payout-schedule), depending on your country and
    /// industry.
    /// 
    /// Related guide: [Receiving Payouts](https://stripe.com/docs/payouts).
    public var payout: Payout?
    /// The type of the source flow that originated the ReceivedCredit.
    public var type: `Type`

    /// The type of the source flow that originated the ReceivedCredit.
    public enum `Type`: String, Codable, CaseIterable {
        case creditReversal = "credit_reversal"
        case other
        case outboundPayment = "outbound_payment"
        case payout
    }

    public init(creditReversal: TreasuryCreditReversal? = nil, outboundPayment: TreasuryOutboundPayment? = nil, payout: Payout? = nil, type: `Type`) {
        self.creditReversal = creditReversal
        self.outboundPayment = outboundPayment
        self.payout = payout
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.creditReversal = try values.decodeIfPresent(TreasuryCreditReversal.self, forKey: "credit_reversal")
        self.outboundPayment = try values.decodeIfPresent(TreasuryOutboundPayment.self, forKey: "outbound_payment")
        self.payout = try values.decodeIfPresent(Payout.self, forKey: "payout")
        self.type = try values.decode(`Type`.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(creditReversal, forKey: "credit_reversal")
        try values.encodeIfPresent(outboundPayment, forKey: "outbound_payment")
        try values.encodeIfPresent(payout, forKey: "payout")
        try values.encode(type, forKey: "type")
    }
}
