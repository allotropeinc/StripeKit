// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Reporting_report_run
///
/// The Report Run object represents an instance of a report type generated with
/// specific run parameters. Once the object is created, Stripe begins processing the report.
/// When the report has finished running, it will give you a reference to a file
/// where you can retrieve your results. For an overview, see
/// [API Access to Reports](https://stripe.com/docs/reporting/statements/api).
/// 
/// Note that certain report types can only be run based on your live-mode data (not test-mode
/// data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
public struct ReportingReportRun: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// If something should go wrong during the run, a message about the failure (populated when
    ///  `status=failed`).
    public var error: String?
    /// Unique identifier for the object.
    public var id: String
    /// `true` if the report is run on live mode data and `false` if it is run on test mode data.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// FinancialReportingFinanceReportRunRunParameters
    public var parameters: FinancialReportingFinanceReportRunRunParameters
    /// The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`.
    public var reportType: String
    /// The file object representing the result of the report run (populated when
    ///  `status=succeeded`).
    public var result: File?
    /// Status of this report run. This will be `pending` when the run is initially created.
    ///  When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
    ///  Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
    public var status: String
    /// Timestamp at which this run successfully finished (populated when
    ///  `status=succeeded`). Measured in seconds since the Unix epoch.
    public var succeededAt: Int?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case reportingReportRun = "reporting.report_run"
    }

    public init(created: Int, error: String? = nil, id: String, isLivemode: Bool, object: Object, parameters: FinancialReportingFinanceReportRunRunParameters, reportType: String, result: File? = nil, status: String, succeededAt: Int? = nil) {
        self.created = created
        self.error = error
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.parameters = parameters
        self.reportType = reportType
        self.result = result
        self.status = status
        self.succeededAt = succeededAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.created = try values.decode(Int.self, forKey: "created")
        self.error = try values.decodeIfPresent(String.self, forKey: "error")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.object = try values.decode(Object.self, forKey: "object")
        self.parameters = try values.decode(FinancialReportingFinanceReportRunRunParameters.self, forKey: "parameters")
        self.reportType = try values.decode(String.self, forKey: "report_type")
        self.result = try values.decodeIfPresent(File.self, forKey: "result")
        self.status = try values.decode(String.self, forKey: "status")
        self.succeededAt = try values.decodeIfPresent(Int.self, forKey: "succeeded_at")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(error, forKey: "error")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(object, forKey: "object")
        try values.encode(parameters, forKey: "parameters")
        try values.encode(reportType, forKey: "report_type")
        try values.encodeIfPresent(result, forKey: "result")
        try values.encode(status, forKey: "status")
        try values.encodeIfPresent(succeededAt, forKey: "succeeded_at")
    }
}
