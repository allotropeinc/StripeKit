// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// You can store multiple cards on a customer in order to charge the customer
/// later. You can also store multiple debit cards on a recipient in order to
/// transfer to those cards later.
/// 
/// Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
public struct Card: Codable {
    /// The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.
    public var account: Account?
    /// City/District/Suburb/Town/Village.
    public var addressCity: String?
    /// Billing address country, if provided when creating card.
    public var addressCountry: String?
    /// Address line 1 (Street address/PO Box/Company name).
    public var addressLine1: String?
    /// If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
    public var addressLine1Check: String?
    /// Address line 2 (Apartment/Suite/Unit/Building).
    public var addressLine2: String?
    /// State/County/Province/Region.
    public var addressState: String?
    /// ZIP or postal code.
    public var addressZip: String?
    /// If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
    public var addressZipCheck: String?
    /// A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
    public var availablePayoutMethods: [AvailablePayoutMethod]?
    /// Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
    public var brand: String
    /// Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    public var country: String?
    /// Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency.
    public var currency: String?
    /// The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
    public var customer: Customer?
    /// If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
    public var cvcCheck: String?
    /// Whether this card is the default external account for its currency.
    public var isDefaultForCurrency: Bool?
    /// (For tokenized numbers only.) The last four digits of the device account number.
    public var dynamicLast4: String?
    /// Two-digit number representing the card's expiration month.
    public var expMonth: Int
    /// Four-digit number representing the card's expiration year.
    public var expYear: Int
    /// Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
    /// 
    /// *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
    public var fingerprint: String?
    /// Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    public var funding: String
    /// Unique identifier for the object.
    public var id: String
    /// The last four digits of the card.
    public var last4: String
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// Cardholder name.
    public var name: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
    public var recipient: Recipient?
    /// For external accounts, possible values are `new` and `errored`. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
    public var status: String?
    /// If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
    public var tokenizationMethod: String?

    /// The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.
    public final class Account: Codable {
        public let string: String?
        /// This is an object representing a Stripe account. You can retrieve it to see
        /// properties on the account like its current e-mail address or if the account is
        /// enabled yet to make live charges.
        /// 
        /// Some properties, marked below, are available only to platforms that want to
        /// [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
        public let account: StripeKit.Account?

        public init(string: String? = nil, account: StripeKit.Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(StripeKit.Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    public enum AvailablePayoutMethod: String, Codable, CaseIterable {
        case instant
        case standard
    }

    /// The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
    public final class Customer: Codable {
        public let string: String?
        /// This object represents a customer of your business. It lets you create recurring charges and track payments that belong to the same customer.
        /// 
        /// Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
        public let customer: StripeKit.Customer?
        public let deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeKit.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeKit.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case card
    }

    /// The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
    public final class Recipient: Codable {
        public let string: String?
        /// TransferRecipient
        ///
        /// With `Recipient` objects, you can transfer money from your Stripe account to a
        /// third-party bank account or debit card. The API allows you to create, delete,
        /// and update your recipients. You can retrieve individual recipients as well as
        /// a list of all your recipients.
        /// 
        /// **`Recipient` objects have been deprecated in favor of
        /// [Connect](https://stripe.com/docs/connect), specifically Connect's much more powerful
        /// [Account objects](https://stripe.com/docs/api#account). Stripe accounts that don't already use
        /// recipients can no longer begin doing so. Please use `Account` objects
        /// instead.**
        public let recipient: StripeKit.Recipient?

        public init(string: String? = nil, recipient: StripeKit.Recipient? = nil) {
            self.string = string
            self.recipient = recipient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.recipient = try? container.decode(StripeKit.Recipient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = recipient { try container.encode(value) }
        }
    }

    public init(account: Account? = nil, addressCity: String? = nil, addressCountry: String? = nil, addressLine1: String? = nil, addressLine1Check: String? = nil, addressLine2: String? = nil, addressState: String? = nil, addressZip: String? = nil, addressZipCheck: String? = nil, availablePayoutMethods: [AvailablePayoutMethod]? = nil, brand: String, country: String? = nil, currency: String? = nil, customer: Customer? = nil, cvcCheck: String? = nil, isDefaultForCurrency: Bool? = nil, dynamicLast4: String? = nil, expMonth: Int, expYear: Int, fingerprint: String? = nil, funding: String, id: String, last4: String, metadata: [String: String]? = nil, name: String? = nil, object: Object, recipient: Recipient? = nil, status: String? = nil, tokenizationMethod: String? = nil) {
        self.account = account
        self.addressCity = addressCity
        self.addressCountry = addressCountry
        self.addressLine1 = addressLine1
        self.addressLine1Check = addressLine1Check
        self.addressLine2 = addressLine2
        self.addressState = addressState
        self.addressZip = addressZip
        self.addressZipCheck = addressZipCheck
        self.availablePayoutMethods = availablePayoutMethods
        self.brand = brand
        self.country = country
        self.currency = currency
        self.customer = customer
        self.cvcCheck = cvcCheck
        self.isDefaultForCurrency = isDefaultForCurrency
        self.dynamicLast4 = dynamicLast4
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.id = id
        self.last4 = last4
        self.metadata = metadata
        self.name = name
        self.object = object
        self.recipient = recipient
        self.status = status
        self.tokenizationMethod = tokenizationMethod
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.account = try values.decodeIfPresent(Account.self, forKey: "account")
        self.addressCity = try values.decodeIfPresent(String.self, forKey: "address_city")
        self.addressCountry = try values.decodeIfPresent(String.self, forKey: "address_country")
        self.addressLine1 = try values.decodeIfPresent(String.self, forKey: "address_line1")
        self.addressLine1Check = try values.decodeIfPresent(String.self, forKey: "address_line1_check")
        self.addressLine2 = try values.decodeIfPresent(String.self, forKey: "address_line2")
        self.addressState = try values.decodeIfPresent(String.self, forKey: "address_state")
        self.addressZip = try values.decodeIfPresent(String.self, forKey: "address_zip")
        self.addressZipCheck = try values.decodeIfPresent(String.self, forKey: "address_zip_check")
        self.availablePayoutMethods = try values.decodeIfPresent([AvailablePayoutMethod].self, forKey: "available_payout_methods")
        self.brand = try values.decode(String.self, forKey: "brand")
        self.country = try values.decodeIfPresent(String.self, forKey: "country")
        self.currency = try values.decodeIfPresent(String.self, forKey: "currency")
        self.customer = try values.decodeIfPresent(Customer.self, forKey: "customer")
        self.cvcCheck = try values.decodeIfPresent(String.self, forKey: "cvc_check")
        self.isDefaultForCurrency = try values.decodeIfPresent(Bool.self, forKey: "default_for_currency")
        self.dynamicLast4 = try values.decodeIfPresent(String.self, forKey: "dynamic_last4")
        self.expMonth = try values.decode(Int.self, forKey: "exp_month")
        self.expYear = try values.decode(Int.self, forKey: "exp_year")
        self.fingerprint = try values.decodeIfPresent(String.self, forKey: "fingerprint")
        self.funding = try values.decode(String.self, forKey: "funding")
        self.id = try values.decode(String.self, forKey: "id")
        self.last4 = try values.decode(String.self, forKey: "last4")
        self.metadata = try values.decodeIfPresent([String: String].self, forKey: "metadata")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.object = try values.decode(Object.self, forKey: "object")
        self.recipient = try values.decodeIfPresent(Recipient.self, forKey: "recipient")
        self.status = try values.decodeIfPresent(String.self, forKey: "status")
        self.tokenizationMethod = try values.decodeIfPresent(String.self, forKey: "tokenization_method")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(account, forKey: "account")
        try values.encodeIfPresent(addressCity, forKey: "address_city")
        try values.encodeIfPresent(addressCountry, forKey: "address_country")
        try values.encodeIfPresent(addressLine1, forKey: "address_line1")
        try values.encodeIfPresent(addressLine1Check, forKey: "address_line1_check")
        try values.encodeIfPresent(addressLine2, forKey: "address_line2")
        try values.encodeIfPresent(addressState, forKey: "address_state")
        try values.encodeIfPresent(addressZip, forKey: "address_zip")
        try values.encodeIfPresent(addressZipCheck, forKey: "address_zip_check")
        try values.encodeIfPresent(availablePayoutMethods, forKey: "available_payout_methods")
        try values.encode(brand, forKey: "brand")
        try values.encodeIfPresent(country, forKey: "country")
        try values.encodeIfPresent(currency, forKey: "currency")
        try values.encodeIfPresent(customer, forKey: "customer")
        try values.encodeIfPresent(cvcCheck, forKey: "cvc_check")
        try values.encodeIfPresent(isDefaultForCurrency, forKey: "default_for_currency")
        try values.encodeIfPresent(dynamicLast4, forKey: "dynamic_last4")
        try values.encode(expMonth, forKey: "exp_month")
        try values.encode(expYear, forKey: "exp_year")
        try values.encodeIfPresent(fingerprint, forKey: "fingerprint")
        try values.encode(funding, forKey: "funding")
        try values.encode(id, forKey: "id")
        try values.encode(last4, forKey: "last4")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(recipient, forKey: "recipient")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encodeIfPresent(tokenizationMethod, forKey: "tokenization_method")
    }
}
