// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// To share the contents of a `File` object with non-Stripe users, you can
/// create a `FileLink`. `FileLink`s contain a URL that can be used to
/// retrieve the contents of the file without authentication.
public struct FileLink: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Whether this link is already expired.
    public var isExpired: Bool
    /// Time at which the link expires.
    public var expiresAt: Int?
    /// The file object this link points to.
    public var file: File
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The publicly accessible URL to download the file.
    public var url: String?

    /// The file object this link points to.
    public final class File: Codable {
        public let string: String?
        /// This is an object representing a file hosted on Stripe's servers. The
        /// file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
        /// request (for example, when uploading dispute evidence) or it may have
        /// been created by Stripe (for example, the results of a [Sigma scheduled
        /// query](#scheduled_queries)).
        /// 
        /// Related guide: [File Upload Guide](https://stripe.com/docs/file-upload).
        public let file: StripeKit.File?

        public init(string: String? = nil, file: StripeKit.File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(StripeKit.File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case fileLink = "file_link"
    }

    public init(created: Int, isExpired: Bool, expiresAt: Int? = nil, file: File, id: String, isLivemode: Bool, metadata: [String: String], object: Object, url: String? = nil) {
        self.created = created
        self.isExpired = isExpired
        self.expiresAt = expiresAt
        self.file = file
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.url = url
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.created = try values.decode(Int.self, forKey: "created")
        self.isExpired = try values.decode(Bool.self, forKey: "expired")
        self.expiresAt = try values.decodeIfPresent(Int.self, forKey: "expires_at")
        self.file = try values.decode(File.self, forKey: "file")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(created, forKey: "created")
        try values.encode(isExpired, forKey: "expired")
        try values.encodeIfPresent(expiresAt, forKey: "expires_at")
        try values.encode(file, forKey: "file")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(url, forKey: "url")
    }
}
