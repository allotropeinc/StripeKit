// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// AccountCapability
///
/// This is an object representing a capability for a Stripe account.
/// 
/// Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities).
public struct Capability: Codable {
    /// The account for which the capability enables functionality.
    public var account: Account
    /// AccountCapabilityFutureRequirements
    public var futureRequirements: AccountCapabilityFutureRequirements?
    /// The identifier for the capability.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Whether the capability has been requested.
    public var isRequested: Bool
    /// Time at which the capability was requested. Measured in seconds since the Unix epoch.
    public var requestedAt: Int?
    /// AccountCapabilityRequirements
    public var requirements: AccountCapabilityRequirements?
    /// The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.
    public var status: Status

    /// The account for which the capability enables functionality.
    public final class Account: Codable {
        public let string: String?
        /// This is an object representing a Stripe account. You can retrieve it to see
        /// properties on the account like its current e-mail address or if the account is
        /// enabled yet to make live charges.
        /// 
        /// Some properties, marked below, are available only to platforms that want to
        /// [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
        public let account: StripeKit.Account?

        public init(string: String? = nil, account: StripeKit.Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(StripeKit.Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case capability
    }

    /// The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.
    public enum Status: String, Codable, CaseIterable {
        case active
        case disabled
        case inactive
        case pending
        case unrequested
    }

    public init(account: Account, futureRequirements: AccountCapabilityFutureRequirements? = nil, id: String, object: Object, isRequested: Bool, requestedAt: Int? = nil, requirements: AccountCapabilityRequirements? = nil, status: Status) {
        self.account = account
        self.futureRequirements = futureRequirements
        self.id = id
        self.object = object
        self.isRequested = isRequested
        self.requestedAt = requestedAt
        self.requirements = requirements
        self.status = status
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.account = try values.decode(Account.self, forKey: "account")
        self.futureRequirements = try values.decodeIfPresent(AccountCapabilityFutureRequirements.self, forKey: "future_requirements")
        self.id = try values.decode(String.self, forKey: "id")
        self.object = try values.decode(Object.self, forKey: "object")
        self.isRequested = try values.decode(Bool.self, forKey: "requested")
        self.requestedAt = try values.decodeIfPresent(Int.self, forKey: "requested_at")
        self.requirements = try values.decodeIfPresent(AccountCapabilityRequirements.self, forKey: "requirements")
        self.status = try values.decode(Status.self, forKey: "status")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(account, forKey: "account")
        try values.encodeIfPresent(futureRequirements, forKey: "future_requirements")
        try values.encode(id, forKey: "id")
        try values.encode(object, forKey: "object")
        try values.encode(isRequested, forKey: "requested")
        try values.encodeIfPresent(requestedAt, forKey: "requested_at")
        try values.encodeIfPresent(requirements, forKey: "requirements")
        try values.encode(status, forKey: "status")
    }
}
