// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase.
public struct SubscriptionScheduleAddInvoiceItem: Codable {
    /// ID of the price used to generate the invoice item.
    public var price: Price
    /// The quantity of the invoice item.
    public var quantity: Int?
    /// The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
    public var taxRates: [TaxRate]?

    /// ID of the price used to generate the invoice item.
    public final class Price: Codable {
        public let string: String?
        /// Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
        /// [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
        /// 
        /// For example, you might have a single "gold" product that has prices for $10/month, $100/year, and â‚¬9 once.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
        public let price: StripeKit.Price?
        public let deletedPrice: DeletedPrice?

        public init(string: String? = nil, price: StripeKit.Price? = nil, deletedPrice: DeletedPrice? = nil) {
            self.string = string
            self.price = price
            self.deletedPrice = deletedPrice
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.price = try? container.decode(StripeKit.Price.self)
            self.deletedPrice = try? container.decode(DeletedPrice.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = price { try container.encode(value) }
            if let value = deletedPrice { try container.encode(value) }
        }
    }

    public init(price: Price, quantity: Int? = nil, taxRates: [TaxRate]? = nil) {
        self.price = price
        self.quantity = quantity
        self.taxRates = taxRates
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.price = try values.decode(Price.self, forKey: "price")
        self.quantity = try values.decodeIfPresent(Int.self, forKey: "quantity")
        self.taxRates = try values.decodeIfPresent([TaxRate].self, forKey: "tax_rates")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(price, forKey: "price")
        try values.encodeIfPresent(quantity, forKey: "quantity")
        try values.encodeIfPresent(taxRates, forKey: "tax_rates")
    }
}
