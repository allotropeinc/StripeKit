// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Represents an action performed by the reader
public struct TerminalReaderReaderResourceReaderAction: Codable {
    /// Failure code, only set if status is `failed`.
    public var failureCode: String?
    /// Detailed failure message, only set if status is `failed`.
    public var failureMessage: String?
    /// TerminalReaderReaderResourceProcessPaymentIntentAction
    ///
    /// Represents a reader action to process a payment intent
    public var processPaymentIntent: TerminalReaderReaderResourceProcessPaymentIntentAction?
    /// TerminalReaderReaderResourceProcessSetupIntentAction
    ///
    /// Represents a reader action to process a setup intent
    public var processSetupIntent: TerminalReaderReaderResourceProcessSetupIntentAction?
    /// TerminalReaderReaderResourceSetReaderDisplayAction
    ///
    /// Represents a reader action to set the reader display
    public var setReaderDisplay: TerminalReaderReaderResourceSetReaderDisplayAction?
    /// Status of the action performed by the reader.
    public var status: Status
    /// Type of action performed by the reader.
    public var type: `Type`

    /// Status of the action performed by the reader.
    public enum Status: String, Codable, CaseIterable {
        case failed
        case inProgress = "in_progress"
        case succeeded
    }

    /// Type of action performed by the reader.
    public enum `Type`: String, Codable, CaseIterable {
        case processPaymentIntent = "process_payment_intent"
        case processSetupIntent = "process_setup_intent"
        case setReaderDisplay = "set_reader_display"
    }

    public init(failureCode: String? = nil, failureMessage: String? = nil, processPaymentIntent: TerminalReaderReaderResourceProcessPaymentIntentAction? = nil, processSetupIntent: TerminalReaderReaderResourceProcessSetupIntentAction? = nil, setReaderDisplay: TerminalReaderReaderResourceSetReaderDisplayAction? = nil, status: Status, type: `Type`) {
        self.failureCode = failureCode
        self.failureMessage = failureMessage
        self.processPaymentIntent = processPaymentIntent
        self.processSetupIntent = processSetupIntent
        self.setReaderDisplay = setReaderDisplay
        self.status = status
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.failureCode = try values.decodeIfPresent(String.self, forKey: "failure_code")
        self.failureMessage = try values.decodeIfPresent(String.self, forKey: "failure_message")
        self.processPaymentIntent = try values.decodeIfPresent(TerminalReaderReaderResourceProcessPaymentIntentAction.self, forKey: "process_payment_intent")
        self.processSetupIntent = try values.decodeIfPresent(TerminalReaderReaderResourceProcessSetupIntentAction.self, forKey: "process_setup_intent")
        self.setReaderDisplay = try values.decodeIfPresent(TerminalReaderReaderResourceSetReaderDisplayAction.self, forKey: "set_reader_display")
        self.status = try values.decode(Status.self, forKey: "status")
        self.type = try values.decode(`Type`.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(failureCode, forKey: "failure_code")
        try values.encodeIfPresent(failureMessage, forKey: "failure_message")
        try values.encodeIfPresent(processPaymentIntent, forKey: "process_payment_intent")
        try values.encodeIfPresent(processSetupIntent, forKey: "process_setup_intent")
        try values.encodeIfPresent(setReaderDisplay, forKey: "set_reader_display")
        try values.encode(status, forKey: "status")
        try values.encode(type, forKey: "type")
    }
}
