// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PersonRelationship: Codable {
    /// Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.
    public var isDirector: Bool?
    /// Whether the person has significant responsibility to control, manage, or direct the organization.
    public var isExecutive: Bool?
    /// Whether the person is an owner of the accountâ€™s legal entity.
    public var isOwner: Bool?
    /// The percent owned by the person of the account's legal entity.
    public var percentOwnership: Double?
    /// Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.
    public var isRepresentative: Bool?
    /// The person's title (e.g., CEO, Support Engineer).
    public var title: String?

    public init(isDirector: Bool? = nil, isExecutive: Bool? = nil, isOwner: Bool? = nil, percentOwnership: Double? = nil, isRepresentative: Bool? = nil, title: String? = nil) {
        self.isDirector = isDirector
        self.isExecutive = isExecutive
        self.isOwner = isOwner
        self.percentOwnership = percentOwnership
        self.isRepresentative = isRepresentative
        self.title = title
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.isDirector = try values.decodeIfPresent(Bool.self, forKey: "director")
        self.isExecutive = try values.decodeIfPresent(Bool.self, forKey: "executive")
        self.isOwner = try values.decodeIfPresent(Bool.self, forKey: "owner")
        self.percentOwnership = try values.decodeIfPresent(Double.self, forKey: "percent_ownership")
        self.isRepresentative = try values.decodeIfPresent(Bool.self, forKey: "representative")
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(isDirector, forKey: "director")
        try values.encodeIfPresent(isExecutive, forKey: "executive")
        try values.encodeIfPresent(isOwner, forKey: "owner")
        try values.encodeIfPresent(percentOwnership, forKey: "percent_ownership")
        try values.encodeIfPresent(isRepresentative, forKey: "representative")
        try values.encodeIfPresent(title, forKey: "title")
    }
}
