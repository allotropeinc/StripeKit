// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Payment_intent_next_action_konbini_stores
public struct PaymentIntentNextActionKonbiniStores: Codable {
    /// FamilyMart instruction details.
    public var familymart: PaymentIntentNextActionKonbiniFamilymart?
    /// Lawson instruction details.
    public var lawson: PaymentIntentNextActionKonbiniLawson?
    /// Ministop instruction details.
    public var ministop: PaymentIntentNextActionKonbiniMinistop?
    /// Seicomart instruction details.
    public var seicomart: PaymentIntentNextActionKonbiniSeicomart?

    public init(familymart: PaymentIntentNextActionKonbiniFamilymart? = nil, lawson: PaymentIntentNextActionKonbiniLawson? = nil, ministop: PaymentIntentNextActionKonbiniMinistop? = nil, seicomart: PaymentIntentNextActionKonbiniSeicomart? = nil) {
        self.familymart = familymart
        self.lawson = lawson
        self.ministop = ministop
        self.seicomart = seicomart
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.familymart = try values.decodeIfPresent(PaymentIntentNextActionKonbiniFamilymart.self, forKey: "familymart")
        self.lawson = try values.decodeIfPresent(PaymentIntentNextActionKonbiniLawson.self, forKey: "lawson")
        self.ministop = try values.decodeIfPresent(PaymentIntentNextActionKonbiniMinistop.self, forKey: "ministop")
        self.seicomart = try values.decodeIfPresent(PaymentIntentNextActionKonbiniSeicomart.self, forKey: "seicomart")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(familymart, forKey: "familymart")
        try values.encodeIfPresent(lawson, forKey: "lawson")
        try values.encodeIfPresent(ministop, forKey: "ministop")
        try values.encodeIfPresent(seicomart, forKey: "seicomart")
    }
}
