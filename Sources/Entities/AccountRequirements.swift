// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AccountRequirements: Codable {
    /// Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
    public var alternatives: [AccountRequirementsAlternative]?
    /// Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
    public var currentDeadline: Int?
    /// Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
    public var currentlyDue: [String]?
    /// If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
    public var disabledReason: String?
    /// Fields that are `currently_due` and need to be collected again because validation or verification failed.
    public var errors: [AccountRequirementsError]?
    /// Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
    public var eventuallyDue: [String]?
    /// Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account.
    public var pastDue: [String]?
    /// Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
    public var pendingVerification: [String]?

    public init(alternatives: [AccountRequirementsAlternative]? = nil, currentDeadline: Int? = nil, currentlyDue: [String]? = nil, disabledReason: String? = nil, errors: [AccountRequirementsError]? = nil, eventuallyDue: [String]? = nil, pastDue: [String]? = nil, pendingVerification: [String]? = nil) {
        self.alternatives = alternatives
        self.currentDeadline = currentDeadline
        self.currentlyDue = currentlyDue
        self.disabledReason = disabledReason
        self.errors = errors
        self.eventuallyDue = eventuallyDue
        self.pastDue = pastDue
        self.pendingVerification = pendingVerification
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.alternatives = try values.decodeIfPresent([AccountRequirementsAlternative].self, forKey: "alternatives")
        self.currentDeadline = try values.decodeIfPresent(Int.self, forKey: "current_deadline")
        self.currentlyDue = try values.decodeIfPresent([String].self, forKey: "currently_due")
        self.disabledReason = try values.decodeIfPresent(String.self, forKey: "disabled_reason")
        self.errors = try values.decodeIfPresent([AccountRequirementsError].self, forKey: "errors")
        self.eventuallyDue = try values.decodeIfPresent([String].self, forKey: "eventually_due")
        self.pastDue = try values.decodeIfPresent([String].self, forKey: "past_due")
        self.pendingVerification = try values.decodeIfPresent([String].self, forKey: "pending_verification")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(alternatives, forKey: "alternatives")
        try values.encodeIfPresent(currentDeadline, forKey: "current_deadline")
        try values.encodeIfPresent(currentlyDue, forKey: "currently_due")
        try values.encodeIfPresent(disabledReason, forKey: "disabled_reason")
        try values.encodeIfPresent(errors, forKey: "errors")
        try values.encodeIfPresent(eventuallyDue, forKey: "eventually_due")
        try values.encodeIfPresent(pastDue, forKey: "past_due")
        try values.encodeIfPresent(pendingVerification, forKey: "pending_verification")
    }
}
