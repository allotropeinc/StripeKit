// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Polymorphic
public struct PaymentSource: Codable {
    /// This is an object representing a Stripe account. You can retrieve it to see
    /// properties on the account like its current e-mail address or if the account is
    /// enabled yet to make live charges.
    /// 
    /// Some properties, marked below, are available only to platforms that want to
    /// [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
    public var account: Account?
    /// These bank accounts are payment methods on `Customer` objects.
    /// 
    /// On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
    /// destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
    /// They can be bank accounts or debit cards as well, and are documented in the links above.
    /// 
    /// Related guide: [Bank Debits and Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
    public var bankAccount: BankAccount?
    /// You can store multiple cards on a customer in order to charge the customer
    /// later. You can also store multiple debit cards on a recipient in order to
    /// transfer to those cards later.
    /// 
    /// Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
    public var card: Card?
    /// `Source` objects allow you to accept a variety of payment methods. They
    /// represent a customer's payment instrument, and can be used with the Stripe API
    /// just like a `Card` object: once chargeable, they can be charged, or can be
    /// attached to customers.
    /// 
    /// Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
    public var source: Source?

    public init(account: Account? = nil, bankAccount: BankAccount? = nil, card: Card? = nil, source: Source? = nil) {
        self.account = account
        self.bankAccount = bankAccount
        self.card = card
        self.source = source
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.account = try? container.decode(Account.self)
        self.bankAccount = try? container.decode(BankAccount.self)
        self.card = try? container.decode(Card.self)
        self.source = try? container.decode(Source.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        if let value = account { try container.encode(value) }
        if let value = bankAccount { try container.encode(value) }
        if let value = card { try container.encode(value) }
        if let value = source { try container.encode(value) }
    }
}
