// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct OrdersV2ResourcePaymentMethodOptions: Codable {
    /// Payment_intent_payment_method_options_acss_debit
    public var acssDebit: PaymentIntentPaymentMethodOptionsAcssDebit?
    /// Orders_payment_method_options_afterpay_clearpay
    public var afterpayClearpay: OrdersPaymentMethodOptionsAfterpayClearpay?
    /// Payment_method_options_alipay
    public var alipay: PaymentMethodOptionsAlipay?
    /// Payment_method_options_bancontact
    public var bancontact: PaymentMethodOptionsBancontact?
    /// OrdersV2ResourceCardPaymentMethodOptions
    public var card: OrdersV2ResourceCardPaymentMethodOptions?
    /// Payment_method_options_customer_balance
    public var customerBalance: PaymentMethodOptionsCustomerBalance?
    /// Payment_method_options_ideal
    public var ideal: PaymentMethodOptionsIdeal?
    /// Payment_method_options_klarna
    public var klarna: PaymentMethodOptionsKlarna?
    /// Payment_intent_payment_method_options_link
    public var link: PaymentIntentPaymentMethodOptionsLink?
    /// Payment_method_options_oxxo
    public var oxxo: PaymentMethodOptionsOxxo?
    /// Payment_method_options_p24
    public var p24: PaymentMethodOptionsP24?
    /// Payment_method_options_paypal
    public var paypal: PaymentMethodOptionsPaypal?
    /// Payment_intent_payment_method_options_sepa_debit
    public var sepaDebit: PaymentIntentPaymentMethodOptionsSepaDebit?
    /// Payment_method_options_sofort
    public var sofort: PaymentMethodOptionsSofort?
    /// Payment_method_options_wechat_pay
    public var wechatPay: PaymentMethodOptionsWechatPay?

    public init(acssDebit: PaymentIntentPaymentMethodOptionsAcssDebit? = nil, afterpayClearpay: OrdersPaymentMethodOptionsAfterpayClearpay? = nil, alipay: PaymentMethodOptionsAlipay? = nil, bancontact: PaymentMethodOptionsBancontact? = nil, card: OrdersV2ResourceCardPaymentMethodOptions? = nil, customerBalance: PaymentMethodOptionsCustomerBalance? = nil, ideal: PaymentMethodOptionsIdeal? = nil, klarna: PaymentMethodOptionsKlarna? = nil, link: PaymentIntentPaymentMethodOptionsLink? = nil, oxxo: PaymentMethodOptionsOxxo? = nil, p24: PaymentMethodOptionsP24? = nil, paypal: PaymentMethodOptionsPaypal? = nil, sepaDebit: PaymentIntentPaymentMethodOptionsSepaDebit? = nil, sofort: PaymentMethodOptionsSofort? = nil, wechatPay: PaymentMethodOptionsWechatPay? = nil) {
        self.acssDebit = acssDebit
        self.afterpayClearpay = afterpayClearpay
        self.alipay = alipay
        self.bancontact = bancontact
        self.card = card
        self.customerBalance = customerBalance
        self.ideal = ideal
        self.klarna = klarna
        self.link = link
        self.oxxo = oxxo
        self.p24 = p24
        self.paypal = paypal
        self.sepaDebit = sepaDebit
        self.sofort = sofort
        self.wechatPay = wechatPay
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.acssDebit = try values.decodeIfPresent(PaymentIntentPaymentMethodOptionsAcssDebit.self, forKey: "acss_debit")
        self.afterpayClearpay = try values.decodeIfPresent(OrdersPaymentMethodOptionsAfterpayClearpay.self, forKey: "afterpay_clearpay")
        self.alipay = try values.decodeIfPresent(PaymentMethodOptionsAlipay.self, forKey: "alipay")
        self.bancontact = try values.decodeIfPresent(PaymentMethodOptionsBancontact.self, forKey: "bancontact")
        self.card = try values.decodeIfPresent(OrdersV2ResourceCardPaymentMethodOptions.self, forKey: "card")
        self.customerBalance = try values.decodeIfPresent(PaymentMethodOptionsCustomerBalance.self, forKey: "customer_balance")
        self.ideal = try values.decodeIfPresent(PaymentMethodOptionsIdeal.self, forKey: "ideal")
        self.klarna = try values.decodeIfPresent(PaymentMethodOptionsKlarna.self, forKey: "klarna")
        self.link = try values.decodeIfPresent(PaymentIntentPaymentMethodOptionsLink.self, forKey: "link")
        self.oxxo = try values.decodeIfPresent(PaymentMethodOptionsOxxo.self, forKey: "oxxo")
        self.p24 = try values.decodeIfPresent(PaymentMethodOptionsP24.self, forKey: "p24")
        self.paypal = try values.decodeIfPresent(PaymentMethodOptionsPaypal.self, forKey: "paypal")
        self.sepaDebit = try values.decodeIfPresent(PaymentIntentPaymentMethodOptionsSepaDebit.self, forKey: "sepa_debit")
        self.sofort = try values.decodeIfPresent(PaymentMethodOptionsSofort.self, forKey: "sofort")
        self.wechatPay = try values.decodeIfPresent(PaymentMethodOptionsWechatPay.self, forKey: "wechat_pay")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(acssDebit, forKey: "acss_debit")
        try values.encodeIfPresent(afterpayClearpay, forKey: "afterpay_clearpay")
        try values.encodeIfPresent(alipay, forKey: "alipay")
        try values.encodeIfPresent(bancontact, forKey: "bancontact")
        try values.encodeIfPresent(card, forKey: "card")
        try values.encodeIfPresent(customerBalance, forKey: "customer_balance")
        try values.encodeIfPresent(ideal, forKey: "ideal")
        try values.encodeIfPresent(klarna, forKey: "klarna")
        try values.encodeIfPresent(link, forKey: "link")
        try values.encodeIfPresent(oxxo, forKey: "oxxo")
        try values.encodeIfPresent(p24, forKey: "p24")
        try values.encodeIfPresent(paypal, forKey: "paypal")
        try values.encodeIfPresent(sepaDebit, forKey: "sepa_debit")
        try values.encodeIfPresent(sofort, forKey: "sofort")
        try values.encodeIfPresent(wechatPay, forKey: "wechat_pay")
    }
}
