// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// BankConnectionsResourceLinkAccountSession
///
/// A Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.
public struct FinancialConnectionsSession: Codable {
    /// The account holder for whom accounts are collected in this session.
    public var accountHolder: BankConnectionsResourceAccountholder?
    /// BankConnectionsResourceLinkedAccountList
    ///
    /// The accounts that were collected as part of this Session.
    public var accounts: Accounts
    /// A value that will be passed to the client to launch the authentication flow.
    public var clientSecret: String
    /// BankConnectionsResourceLinkAccountSessionFilters
    public var filters: BankConnectionsResourceLinkAccountSessionFilters?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Permissions requested for accounts collected during this session.
    public var permissions: [Permission]
    /// For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
    public var returnURL: String?

    /// BankConnectionsResourceLinkedAccountList
    ///
    /// The accounts that were collected as part of this Session.
    public struct Accounts: Codable {
        /// Details about each object.
        public var data: [FinancialConnectionsAccount]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [FinancialConnectionsAccount], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.data = try values.decode([FinancialConnectionsAccount].self, forKey: "data")
            self.hasMore = try values.decode(Bool.self, forKey: "has_more")
            self.object = try values.decode(Object.self, forKey: "object")
            self.url = try values.decode(String.self, forKey: "url")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(data, forKey: "data")
            try values.encode(hasMore, forKey: "has_more")
            try values.encode(object, forKey: "object")
            try values.encode(url, forKey: "url")
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case financialConnectionsSession = "financial_connections.session"
    }

    public enum Permission: String, Codable, CaseIterable {
        case balances
        case ownership
        case paymentMethod = "payment_method"
        case transactions
    }

    public init(accountHolder: BankConnectionsResourceAccountholder? = nil, accounts: Accounts, clientSecret: String, filters: BankConnectionsResourceLinkAccountSessionFilters? = nil, id: String, isLivemode: Bool, object: Object, permissions: [Permission], returnURL: String? = nil) {
        self.accountHolder = accountHolder
        self.accounts = accounts
        self.clientSecret = clientSecret
        self.filters = filters
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.permissions = permissions
        self.returnURL = returnURL
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.accountHolder = try values.decodeIfPresent(BankConnectionsResourceAccountholder.self, forKey: "account_holder")
        self.accounts = try values.decode(Accounts.self, forKey: "accounts")
        self.clientSecret = try values.decode(String.self, forKey: "client_secret")
        self.filters = try values.decodeIfPresent(BankConnectionsResourceLinkAccountSessionFilters.self, forKey: "filters")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.object = try values.decode(Object.self, forKey: "object")
        self.permissions = try values.decode([Permission].self, forKey: "permissions")
        self.returnURL = try values.decodeIfPresent(String.self, forKey: "return_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(accountHolder, forKey: "account_holder")
        try values.encode(accounts, forKey: "accounts")
        try values.encode(clientSecret, forKey: "client_secret")
        try values.encodeIfPresent(filters, forKey: "filters")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(object, forKey: "object")
        try values.encode(permissions, forKey: "permissions")
        try values.encodeIfPresent(returnURL, forKey: "return_url")
    }
}
