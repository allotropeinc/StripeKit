// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SubscriptionsResourcePaymentSettings: Codable {
    /// Payment-method-specific configuration to provide to invoices created by the subscription.
    public var paymentMethodOptions: SubscriptionsResourcePaymentMethodOptions?
    /// The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
    public var paymentMethodTypes: [PaymentMethodType]?
    /// Either `off`, or `on_subscription`. With `on_subscription` Stripe updates `subscription.default_payment_method` when a subscription payment succeeds.
    public var saveDefaultPaymentMethod: SaveDefaultPaymentMethod?

    public enum PaymentMethodType: String, Codable, CaseIterable {
        case achCreditTransfer = "ach_credit_transfer"
        case achDebit = "ach_debit"
        case acssDebit = "acss_debit"
        case auBecsDebit = "au_becs_debit"
        case bacsDebit = "bacs_debit"
        case bancontact
        case boleto
        case card
        case customerBalance = "customer_balance"
        case fpx
        case giropay
        case grabpay
        case ideal
        case konbini
        case link
        case paynow
        case promptpay
        case sepaDebit = "sepa_debit"
        case sofort
        case usBankAccount = "us_bank_account"
        case wechatPay = "wechat_pay"
    }

    /// Either `off`, or `on_subscription`. With `on_subscription` Stripe updates `subscription.default_payment_method` when a subscription payment succeeds.
    public enum SaveDefaultPaymentMethod: String, Codable, CaseIterable {
        case off
        case onSubscription = "on_subscription"
    }

    public init(paymentMethodOptions: SubscriptionsResourcePaymentMethodOptions? = nil, paymentMethodTypes: [PaymentMethodType]? = nil, saveDefaultPaymentMethod: SaveDefaultPaymentMethod? = nil) {
        self.paymentMethodOptions = paymentMethodOptions
        self.paymentMethodTypes = paymentMethodTypes
        self.saveDefaultPaymentMethod = saveDefaultPaymentMethod
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.paymentMethodOptions = try values.decodeIfPresent(SubscriptionsResourcePaymentMethodOptions.self, forKey: "payment_method_options")
        self.paymentMethodTypes = try values.decodeIfPresent([PaymentMethodType].self, forKey: "payment_method_types")
        self.saveDefaultPaymentMethod = try values.decodeIfPresent(SaveDefaultPaymentMethod.self, forKey: "save_default_payment_method")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(paymentMethodOptions, forKey: "payment_method_options")
        try values.encodeIfPresent(paymentMethodTypes, forKey: "payment_method_types")
        try values.encodeIfPresent(saveDefaultPaymentMethod, forKey: "save_default_payment_method")
    }
}
