// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Tax_id
///
/// You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers).
/// A customer's tax IDs are displayed on invoices and credit notes issued for the customer.
/// 
/// Related guide: [Customer Tax Identification Numbers](https://stripe.com/docs/billing/taxes/tax-ids).
public struct TaxID: Codable {
    /// Two-letter ISO code representing the country of the tax ID.
    public var country: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// ID of the customer.
    public var customer: Customer?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `bg_uic`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
    public var type: `Type`
    /// Value of the tax ID.
    public var value: String
    /// Tax ID verification information.
    public var verification: TaxIDVerification?

    /// ID of the customer.
    public final class Customer: Codable {
        public let string: String?
        /// This object represents a customer of your business. It lets you create recurring charges and track payments that belong to the same customer.
        /// 
        /// Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
        public let customer: StripeKit.Customer?

        public init(string: String? = nil, customer: StripeKit.Customer? = nil) {
            self.string = string
            self.customer = customer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeKit.Customer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case taxID = "tax_id"
    }

    /// Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `bg_uic`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
    public enum `Type`: String, Codable, CaseIterable {
        case aeTrn = "ae_trn"
        case auAbn = "au_abn"
        case auArn = "au_arn"
        case bgUic = "bg_uic"
        case brCnpj = "br_cnpj"
        case brCpf = "br_cpf"
        case caBn = "ca_bn"
        case caGstHst = "ca_gst_hst"
        case caPstBc = "ca_pst_bc"
        case caPstMb = "ca_pst_mb"
        case caPstSk = "ca_pst_sk"
        case caQst = "ca_qst"
        case chVat = "ch_vat"
        case clTin = "cl_tin"
        case esCif = "es_cif"
        case euOssVat = "eu_oss_vat"
        case euVat = "eu_vat"
        case gbVat = "gb_vat"
        case geVat = "ge_vat"
        case hkBr = "hk_br"
        case huTin = "hu_tin"
        case idNpwp = "id_npwp"
        case ilVat = "il_vat"
        case inGst = "in_gst"
        case isVat = "is_vat"
        case jpCn = "jp_cn"
        case jpRn = "jp_rn"
        case krBrn = "kr_brn"
        case liUid = "li_uid"
        case mxRfc = "mx_rfc"
        case myFrp = "my_frp"
        case myItn = "my_itn"
        case mySst = "my_sst"
        case noVat = "no_vat"
        case nzGst = "nz_gst"
        case ruInn = "ru_inn"
        case ruKpp = "ru_kpp"
        case saVat = "sa_vat"
        case sgGst = "sg_gst"
        case sgUen = "sg_uen"
        case siTin = "si_tin"
        case thVat = "th_vat"
        case twVat = "tw_vat"
        case uaVat = "ua_vat"
        case unknown
        case usEin = "us_ein"
        case zaVat = "za_vat"
    }

    public init(country: String? = nil, created: Int, customer: Customer? = nil, id: String, isLivemode: Bool, object: Object, type: `Type`, value: String, verification: TaxIDVerification? = nil) {
        self.country = country
        self.created = created
        self.customer = customer
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.type = type
        self.value = value
        self.verification = verification
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.country = try values.decodeIfPresent(String.self, forKey: "country")
        self.created = try values.decode(Int.self, forKey: "created")
        self.customer = try values.decodeIfPresent(Customer.self, forKey: "customer")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.object = try values.decode(Object.self, forKey: "object")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.value = try values.decode(String.self, forKey: "value")
        self.verification = try values.decodeIfPresent(TaxIDVerification.self, forKey: "verification")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(country, forKey: "country")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(customer, forKey: "customer")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(object, forKey: "object")
        try values.encode(type, forKey: "type")
        try values.encode(value, forKey: "value")
        try values.encodeIfPresent(verification, forKey: "verification")
    }
}
