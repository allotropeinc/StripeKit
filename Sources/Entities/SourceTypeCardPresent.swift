// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SourceTypeCardPresent: Codable {
    public var applicationCryptogram: String?
    public var applicationPreferredName: String?
    public var authorizationCode: String?
    public var authorizationResponseCode: String?
    public var brand: String?
    public var country: String?
    public var cvmType: String?
    public var dataType: String?
    public var dedicatedFileName: String?
    public var emvAuthData: String?
    public var evidenceCustomerSignature: String?
    public var evidenceTransactionCertificate: String?
    public var expMonth: Int?
    public var expYear: Int?
    public var fingerprint: String?
    public var funding: String?
    public var last4: String?
    public var posDeviceID: String?
    public var posEntryMode: String?
    public var readMethod: String?
    public var reader: String?
    public var terminalVerificationResults: String?
    public var transactionStatusInformation: String?

    public init(applicationCryptogram: String? = nil, applicationPreferredName: String? = nil, authorizationCode: String? = nil, authorizationResponseCode: String? = nil, brand: String? = nil, country: String? = nil, cvmType: String? = nil, dataType: String? = nil, dedicatedFileName: String? = nil, emvAuthData: String? = nil, evidenceCustomerSignature: String? = nil, evidenceTransactionCertificate: String? = nil, expMonth: Int? = nil, expYear: Int? = nil, fingerprint: String? = nil, funding: String? = nil, last4: String? = nil, posDeviceID: String? = nil, posEntryMode: String? = nil, readMethod: String? = nil, reader: String? = nil, terminalVerificationResults: String? = nil, transactionStatusInformation: String? = nil) {
        self.applicationCryptogram = applicationCryptogram
        self.applicationPreferredName = applicationPreferredName
        self.authorizationCode = authorizationCode
        self.authorizationResponseCode = authorizationResponseCode
        self.brand = brand
        self.country = country
        self.cvmType = cvmType
        self.dataType = dataType
        self.dedicatedFileName = dedicatedFileName
        self.emvAuthData = emvAuthData
        self.evidenceCustomerSignature = evidenceCustomerSignature
        self.evidenceTransactionCertificate = evidenceTransactionCertificate
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.last4 = last4
        self.posDeviceID = posDeviceID
        self.posEntryMode = posEntryMode
        self.readMethod = readMethod
        self.reader = reader
        self.terminalVerificationResults = terminalVerificationResults
        self.transactionStatusInformation = transactionStatusInformation
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.applicationCryptogram = try values.decodeIfPresent(String.self, forKey: "application_cryptogram")
        self.applicationPreferredName = try values.decodeIfPresent(String.self, forKey: "application_preferred_name")
        self.authorizationCode = try values.decodeIfPresent(String.self, forKey: "authorization_code")
        self.authorizationResponseCode = try values.decodeIfPresent(String.self, forKey: "authorization_response_code")
        self.brand = try values.decodeIfPresent(String.self, forKey: "brand")
        self.country = try values.decodeIfPresent(String.self, forKey: "country")
        self.cvmType = try values.decodeIfPresent(String.self, forKey: "cvm_type")
        self.dataType = try values.decodeIfPresent(String.self, forKey: "data_type")
        self.dedicatedFileName = try values.decodeIfPresent(String.self, forKey: "dedicated_file_name")
        self.emvAuthData = try values.decodeIfPresent(String.self, forKey: "emv_auth_data")
        self.evidenceCustomerSignature = try values.decodeIfPresent(String.self, forKey: "evidence_customer_signature")
        self.evidenceTransactionCertificate = try values.decodeIfPresent(String.self, forKey: "evidence_transaction_certificate")
        self.expMonth = try values.decodeIfPresent(Int.self, forKey: "exp_month")
        self.expYear = try values.decodeIfPresent(Int.self, forKey: "exp_year")
        self.fingerprint = try values.decodeIfPresent(String.self, forKey: "fingerprint")
        self.funding = try values.decodeIfPresent(String.self, forKey: "funding")
        self.last4 = try values.decodeIfPresent(String.self, forKey: "last4")
        self.posDeviceID = try values.decodeIfPresent(String.self, forKey: "pos_device_id")
        self.posEntryMode = try values.decodeIfPresent(String.self, forKey: "pos_entry_mode")
        self.readMethod = try values.decodeIfPresent(String.self, forKey: "read_method")
        self.reader = try values.decodeIfPresent(String.self, forKey: "reader")
        self.terminalVerificationResults = try values.decodeIfPresent(String.self, forKey: "terminal_verification_results")
        self.transactionStatusInformation = try values.decodeIfPresent(String.self, forKey: "transaction_status_information")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(applicationCryptogram, forKey: "application_cryptogram")
        try values.encodeIfPresent(applicationPreferredName, forKey: "application_preferred_name")
        try values.encodeIfPresent(authorizationCode, forKey: "authorization_code")
        try values.encodeIfPresent(authorizationResponseCode, forKey: "authorization_response_code")
        try values.encodeIfPresent(brand, forKey: "brand")
        try values.encodeIfPresent(country, forKey: "country")
        try values.encodeIfPresent(cvmType, forKey: "cvm_type")
        try values.encodeIfPresent(dataType, forKey: "data_type")
        try values.encodeIfPresent(dedicatedFileName, forKey: "dedicated_file_name")
        try values.encodeIfPresent(emvAuthData, forKey: "emv_auth_data")
        try values.encodeIfPresent(evidenceCustomerSignature, forKey: "evidence_customer_signature")
        try values.encodeIfPresent(evidenceTransactionCertificate, forKey: "evidence_transaction_certificate")
        try values.encodeIfPresent(expMonth, forKey: "exp_month")
        try values.encodeIfPresent(expYear, forKey: "exp_year")
        try values.encodeIfPresent(fingerprint, forKey: "fingerprint")
        try values.encodeIfPresent(funding, forKey: "funding")
        try values.encodeIfPresent(last4, forKey: "last4")
        try values.encodeIfPresent(posDeviceID, forKey: "pos_device_id")
        try values.encodeIfPresent(posEntryMode, forKey: "pos_entry_mode")
        try values.encodeIfPresent(readMethod, forKey: "read_method")
        try values.encodeIfPresent(reader, forKey: "reader")
        try values.encodeIfPresent(terminalVerificationResults, forKey: "terminal_verification_results")
        try values.encodeIfPresent(transactionStatusInformation, forKey: "transaction_status_information")
    }
}
