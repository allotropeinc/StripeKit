// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// LineItem
///
/// A line item.
public struct Item: Codable {
    /// Total discount amount applied. If no discounts were applied, defaults to 0.
    public var amountDiscount: Int
    /// Total before any discounts or taxes are applied.
    public var amountSubtotal: Int
    /// Total tax amount applied. If no tax was applied, defaults to 0.
    public var amountTax: Int
    /// Total after discounts and taxes.
    public var amountTotal: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
    public var description: String
    /// The discounts applied to the line item.
    public var discounts: [LineItemsDiscountAmount]?
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The price used to generate the line item.
    public var price: Price?
    /// The ID of the product for this line item.
    /// 
    /// This will always be the same as `price.product`.
    public var product: Product?
    /// The quantity of products being purchased.
    public var quantity: Int?
    /// The taxes applied to the line item.
    public var taxes: [LineItemsTaxAmount]?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case item
    }

    /// The ID of the product for this line item.
    /// 
    /// This will always be the same as `price.product`.
    public final class Product: Codable {
        public let string: String?
        /// Products describe the specific goods or services you offer to your customers.
        /// For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
        /// They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
        /// [share a Payment Link](https://stripe.com/docs/payments/payment-links/overview),
        /// [accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
        /// and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
        public let product: StripeKit.Product?
        public let deletedProduct: DeletedProduct?

        public init(string: String? = nil, product: StripeKit.Product? = nil, deletedProduct: DeletedProduct? = nil) {
            self.string = string
            self.product = product
            self.deletedProduct = deletedProduct
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.product = try? container.decode(StripeKit.Product.self)
            self.deletedProduct = try? container.decode(DeletedProduct.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = product { try container.encode(value) }
            if let value = deletedProduct { try container.encode(value) }
        }
    }

    public init(amountDiscount: Int, amountSubtotal: Int, amountTax: Int, amountTotal: Int, currency: String, description: String, discounts: [LineItemsDiscountAmount]? = nil, id: String, object: Object, price: Price? = nil, product: Product? = nil, quantity: Int? = nil, taxes: [LineItemsTaxAmount]? = nil) {
        self.amountDiscount = amountDiscount
        self.amountSubtotal = amountSubtotal
        self.amountTax = amountTax
        self.amountTotal = amountTotal
        self.currency = currency
        self.description = description
        self.discounts = discounts
        self.id = id
        self.object = object
        self.price = price
        self.product = product
        self.quantity = quantity
        self.taxes = taxes
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amountDiscount = try values.decode(Int.self, forKey: "amount_discount")
        self.amountSubtotal = try values.decode(Int.self, forKey: "amount_subtotal")
        self.amountTax = try values.decode(Int.self, forKey: "amount_tax")
        self.amountTotal = try values.decode(Int.self, forKey: "amount_total")
        self.currency = try values.decode(String.self, forKey: "currency")
        self.description = try values.decode(String.self, forKey: "description")
        self.discounts = try values.decodeIfPresent([LineItemsDiscountAmount].self, forKey: "discounts")
        self.id = try values.decode(String.self, forKey: "id")
        self.object = try values.decode(Object.self, forKey: "object")
        self.price = try values.decodeIfPresent(Price.self, forKey: "price")
        self.product = try values.decodeIfPresent(Product.self, forKey: "product")
        self.quantity = try values.decodeIfPresent(Int.self, forKey: "quantity")
        self.taxes = try values.decodeIfPresent([LineItemsTaxAmount].self, forKey: "taxes")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(amountDiscount, forKey: "amount_discount")
        try values.encode(amountSubtotal, forKey: "amount_subtotal")
        try values.encode(amountTax, forKey: "amount_tax")
        try values.encode(amountTotal, forKey: "amount_total")
        try values.encode(currency, forKey: "currency")
        try values.encode(description, forKey: "description")
        try values.encodeIfPresent(discounts, forKey: "discounts")
        try values.encode(id, forKey: "id")
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(price, forKey: "price")
        try values.encodeIfPresent(product, forKey: "product")
        try values.encodeIfPresent(quantity, forKey: "quantity")
        try values.encodeIfPresent(taxes, forKey: "taxes")
    }
}
