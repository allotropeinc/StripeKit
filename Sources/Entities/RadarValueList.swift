// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// RadarListList
///
/// Value lists allow you to group values together which can then be referenced in rules.
/// 
/// Related guide: [Default Stripe Lists](https://stripe.com/docs/radar/lists#managing-list-items).
public struct RadarValueList: Codable {
    /// The name of the value list for use in rules.
    public var alias: String
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The name or email address of the user who created this value list.
    public var createdBy: String
    /// Unique identifier for the object.
    public var id: String
    /// The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.
    public var itemType: ItemType
    /// RadarListListItemList
    ///
    /// List of items contained within this value list.
    public var listItems: ListItems
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// The name of the value list.
    public var name: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.
    public enum ItemType: String, Codable, CaseIterable {
        case cardBin = "card_bin"
        case cardFingerprint = "card_fingerprint"
        case caseSensitiveString = "case_sensitive_string"
        case country
        case customerID = "customer_id"
        case email
        case ipAddress = "ip_address"
        case string
    }

    /// RadarListListItemList
    ///
    /// List of items contained within this value list.
    public struct ListItems: Codable {
        /// Details about each object.
        public var data: [RadarValueListItem]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [RadarValueListItem], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.data = try values.decode([RadarValueListItem].self, forKey: "data")
            self.hasMore = try values.decode(Bool.self, forKey: "has_more")
            self.object = try values.decode(Object.self, forKey: "object")
            self.url = try values.decode(String.self, forKey: "url")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(data, forKey: "data")
            try values.encode(hasMore, forKey: "has_more")
            try values.encode(object, forKey: "object")
            try values.encode(url, forKey: "url")
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case radarValueList = "radar.value_list"
    }

    public init(alias: String, created: Int, createdBy: String, id: String, itemType: ItemType, listItems: ListItems, isLivemode: Bool, metadata: [String: String], name: String, object: Object) {
        self.alias = alias
        self.created = created
        self.createdBy = createdBy
        self.id = id
        self.itemType = itemType
        self.listItems = listItems
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.name = name
        self.object = object
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.alias = try values.decode(String.self, forKey: "alias")
        self.created = try values.decode(Int.self, forKey: "created")
        self.createdBy = try values.decode(String.self, forKey: "created_by")
        self.id = try values.decode(String.self, forKey: "id")
        self.itemType = try values.decode(ItemType.self, forKey: "item_type")
        self.listItems = try values.decode(ListItems.self, forKey: "list_items")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decode([String: String].self, forKey: "metadata")
        self.name = try values.decode(String.self, forKey: "name")
        self.object = try values.decode(Object.self, forKey: "object")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(alias, forKey: "alias")
        try values.encode(created, forKey: "created")
        try values.encode(createdBy, forKey: "created_by")
        try values.encode(id, forKey: "id")
        try values.encode(itemType, forKey: "item_type")
        try values.encode(listItems, forKey: "list_items")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encode(metadata, forKey: "metadata")
        try values.encode(name, forKey: "name")
        try values.encode(object, forKey: "object")
    }
}
