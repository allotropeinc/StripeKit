// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// TreasuryFinancialAccountsResourceFinancialAccount
///
/// Stripe Treasury provides users with a container for money called a FinancialAccount that is separate from their Payments balance.
/// FinancialAccounts serve as the source and destination of Treasuryâ€™s money movement APIs.
public struct TreasuryFinancialAccount: Codable {
    /// The array of paths to active Features in the Features hash.
    public var activeFeatures: [ActiveFeature]
    /// TreasuryFinancialAccountsResourceBalance
    ///
    /// Balance information for the FinancialAccount
    public var balance: TreasuryFinancialAccountsResourceBalance
    /// Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    public var country: String
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// TreasuryFinancialAccountsResourceFinancialAccountFeatures
    ///
    /// Encodes whether a FinancialAccount has access to a particular Feature, with a `status` enum and associated `status_details`.
    /// Stripe or the platform can control Features via the requested field.
    public var features: TreasuryFinancialAccountFeatures?
    /// The set of credentials that resolve to a FinancialAccount.
    public var financialAddresses: [TreasuryFinancialAccountsResourceFinancialAddress]
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The array of paths to pending Features in the Features hash.
    public var pendingFeatures: [PendingFeature]
    /// The set of functionalities that the platform can restrict on the FinancialAccount.
    public var platformRestrictions: TreasuryFinancialAccountsResourcePlatformRestrictions?
    /// The array of paths to restricted Features in the Features hash.
    public var restrictedFeatures: [RestrictedFeature]
    /// The enum specifying what state the account is in.
    public var status: Status
    /// TreasuryFinancialAccountsResourceStatusDetails
    public var statusDetails: TreasuryFinancialAccountsResourceStatusDetails
    /// The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
    public var supportedCurrencies: [String]

    public enum ActiveFeature: String, Codable, CaseIterable {
        case cardIssuing = "card_issuing"
        case depositInsurance = "deposit_insurance"
        case financialAddressesAba = "financial_addresses.aba"
        case inboundTransfersAch = "inbound_transfers.ach"
        case intraStripeFlows = "intra_stripe_flows"
        case outboundPaymentsAch = "outbound_payments.ach"
        case outboundPaymentsUsDomesticWire = "outbound_payments.us_domestic_wire"
        case outboundTransfersAch = "outbound_transfers.ach"
        case outboundTransfersUsDomesticWire = "outbound_transfers.us_domestic_wire"
        case remoteDepositCapture = "remote_deposit_capture"
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case treasuryFinancialAccount = "treasury.financial_account"
    }

    public enum PendingFeature: String, Codable, CaseIterable {
        case cardIssuing = "card_issuing"
        case depositInsurance = "deposit_insurance"
        case financialAddressesAba = "financial_addresses.aba"
        case inboundTransfersAch = "inbound_transfers.ach"
        case intraStripeFlows = "intra_stripe_flows"
        case outboundPaymentsAch = "outbound_payments.ach"
        case outboundPaymentsUsDomesticWire = "outbound_payments.us_domestic_wire"
        case outboundTransfersAch = "outbound_transfers.ach"
        case outboundTransfersUsDomesticWire = "outbound_transfers.us_domestic_wire"
        case remoteDepositCapture = "remote_deposit_capture"
    }

    public enum RestrictedFeature: String, Codable, CaseIterable {
        case cardIssuing = "card_issuing"
        case depositInsurance = "deposit_insurance"
        case financialAddressesAba = "financial_addresses.aba"
        case inboundTransfersAch = "inbound_transfers.ach"
        case intraStripeFlows = "intra_stripe_flows"
        case outboundPaymentsAch = "outbound_payments.ach"
        case outboundPaymentsUsDomesticWire = "outbound_payments.us_domestic_wire"
        case outboundTransfersAch = "outbound_transfers.ach"
        case outboundTransfersUsDomesticWire = "outbound_transfers.us_domestic_wire"
        case remoteDepositCapture = "remote_deposit_capture"
    }

    /// The enum specifying what state the account is in.
    public enum Status: String, Codable, CaseIterable {
        case closed
        case `open`
    }

    public init(activeFeatures: [ActiveFeature], balance: TreasuryFinancialAccountsResourceBalance, country: String, created: Int, features: TreasuryFinancialAccountFeatures? = nil, financialAddresses: [TreasuryFinancialAccountsResourceFinancialAddress], id: String, isLivemode: Bool, metadata: [String: String]? = nil, object: Object, pendingFeatures: [PendingFeature], platformRestrictions: TreasuryFinancialAccountsResourcePlatformRestrictions? = nil, restrictedFeatures: [RestrictedFeature], status: Status, statusDetails: TreasuryFinancialAccountsResourceStatusDetails, supportedCurrencies: [String]) {
        self.activeFeatures = activeFeatures
        self.balance = balance
        self.country = country
        self.created = created
        self.features = features
        self.financialAddresses = financialAddresses
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.pendingFeatures = pendingFeatures
        self.platformRestrictions = platformRestrictions
        self.restrictedFeatures = restrictedFeatures
        self.status = status
        self.statusDetails = statusDetails
        self.supportedCurrencies = supportedCurrencies
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.activeFeatures = try values.decode([ActiveFeature].self, forKey: "active_features")
        self.balance = try values.decode(TreasuryFinancialAccountsResourceBalance.self, forKey: "balance")
        self.country = try values.decode(String.self, forKey: "country")
        self.created = try values.decode(Int.self, forKey: "created")
        self.features = try values.decodeIfPresent(TreasuryFinancialAccountFeatures.self, forKey: "features")
        self.financialAddresses = try values.decode([TreasuryFinancialAccountsResourceFinancialAddress].self, forKey: "financial_addresses")
        self.id = try values.decode(String.self, forKey: "id")
        self.isLivemode = try values.decode(Bool.self, forKey: "livemode")
        self.metadata = try values.decodeIfPresent([String: String].self, forKey: "metadata")
        self.object = try values.decode(Object.self, forKey: "object")
        self.pendingFeatures = try values.decode([PendingFeature].self, forKey: "pending_features")
        self.platformRestrictions = try values.decodeIfPresent(TreasuryFinancialAccountsResourcePlatformRestrictions.self, forKey: "platform_restrictions")
        self.restrictedFeatures = try values.decode([RestrictedFeature].self, forKey: "restricted_features")
        self.status = try values.decode(Status.self, forKey: "status")
        self.statusDetails = try values.decode(TreasuryFinancialAccountsResourceStatusDetails.self, forKey: "status_details")
        self.supportedCurrencies = try values.decode([String].self, forKey: "supported_currencies")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(activeFeatures, forKey: "active_features")
        try values.encode(balance, forKey: "balance")
        try values.encode(country, forKey: "country")
        try values.encode(created, forKey: "created")
        try values.encodeIfPresent(features, forKey: "features")
        try values.encode(financialAddresses, forKey: "financial_addresses")
        try values.encode(id, forKey: "id")
        try values.encode(isLivemode, forKey: "livemode")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encode(object, forKey: "object")
        try values.encode(pendingFeatures, forKey: "pending_features")
        try values.encodeIfPresent(platformRestrictions, forKey: "platform_restrictions")
        try values.encode(restrictedFeatures, forKey: "restricted_features")
        try values.encode(status, forKey: "status")
        try values.encode(statusDetails, forKey: "status_details")
        try values.encode(supportedCurrencies, forKey: "supported_currencies")
    }
}
