// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct QuotesResourceRecurring: Codable {
    /// Total before any discounts or taxes are applied.
    public var amountSubtotal: Int
    /// Total after discounts and taxes are applied.
    public var amountTotal: Int
    /// The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    public var interval: Interval
    /// The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
    public var intervalCount: Int
    /// QuotesResourceTotalDetails
    public var totalDetails: QuotesResourceTotalDetails

    /// The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    public enum Interval: String, Codable, CaseIterable {
        case day
        case month
        case week
        case year
    }

    public init(amountSubtotal: Int, amountTotal: Int, interval: Interval, intervalCount: Int, totalDetails: QuotesResourceTotalDetails) {
        self.amountSubtotal = amountSubtotal
        self.amountTotal = amountTotal
        self.interval = interval
        self.intervalCount = intervalCount
        self.totalDetails = totalDetails
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.amountSubtotal = try values.decode(Int.self, forKey: "amount_subtotal")
        self.amountTotal = try values.decode(Int.self, forKey: "amount_total")
        self.interval = try values.decode(Interval.self, forKey: "interval")
        self.intervalCount = try values.decode(Int.self, forKey: "interval_count")
        self.totalDetails = try values.decode(QuotesResourceTotalDetails.self, forKey: "total_details")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(amountSubtotal, forKey: "amount_subtotal")
        try values.encode(amountTotal, forKey: "amount_total")
        try values.encode(interval, forKey: "interval")
        try values.encode(intervalCount, forKey: "interval_count")
        try values.encode(totalDetails, forKey: "total_details")
    }
}
