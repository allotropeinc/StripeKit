// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Treasury {
    public var financialAccounts: FinancialAccounts {
        FinancialAccounts(path: path + "/financial_accounts")
    }

    public struct FinancialAccounts {
        /// Path: `/v1/treasury/financial_accounts`
        public let path: String

        /// <p>Returns a list of FinancialAccounts.</p>
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "GetTreasuryFinancialAccounts")
        }

        /// TreasuryFinancialAccountsResourceFinancialAccountList
        public struct GetResponse: Decodable {
            public var data: [StripeKit.TreasuryFinancialAccount]
            /// True if this list has another page of items after this one that can be fetched.
            public var hasMore: Bool
            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public var object: Object
            /// The URL where this list can be accessed.
            public var url: String

            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public enum Object: String, Codable, CaseIterable {
                case list
            }

            public init(data: [StripeKit.TreasuryFinancialAccount], hasMore: Bool, object: Object, url: String) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.data = try values.decode([StripeKit.TreasuryFinancialAccount].self, forKey: "data")
                self.hasMore = try values.decode(Bool.self, forKey: "has_more")
                self.object = try values.decode(Object.self, forKey: "object")
                self.url = try values.decode(String.self, forKey: "url")
            }
        }

        public struct GetParameters {
            public var created: Created?
            public var endingBefore: String?
            public var expand: [String]?
            public var limit: Int?
            public var startingAfter: String?

            public struct Created: Codable {
                /// Range_query_specs
                public var object: Object?
                public var int: Int?

                /// Range_query_specs
                public struct Object: Codable {
                    public var gt: Int?
                    public var gte: Int?
                    public var lt: Int?
                    public var lte: Int?

                    public init(gt: Int? = nil, gte: Int? = nil, lt: Int? = nil, lte: Int? = nil) {
                        self.gt = gt
                        self.gte = gte
                        self.lt = lt
                        self.lte = lte
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(gt, forKey: "gt")
                        encoder.encode(gte, forKey: "gte")
                        encoder.encode(lt, forKey: "lt")
                        encoder.encode(lte, forKey: "lte")
                        return encoder.items
                    }
                }

                public init(object: Object? = nil, int: Int? = nil) {
                    self.object = object
                    self.int = int
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(object, forKey: "object")
                    encoder.encode(int, forKey: "int")
                    return encoder.items
                }
            }

            public init(created: Created? = nil, endingBefore: String? = nil, expand: [String]? = nil, limit: Int? = nil, startingAfter: String? = nil) {
                self.created = created
                self.endingBefore = endingBefore
                self.expand = expand
                self.limit = limit
                self.startingAfter = startingAfter
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(created, forKey: "created", isDeepObject: true)
                encoder.encode(endingBefore, forKey: "ending_before")
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(limit, forKey: "limit")
                encoder.encode(startingAfter, forKey: "starting_after")
                return encoder.items
            }
        }

        /// <p>Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.TreasuryFinancialAccount> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostTreasuryFinancialAccounts")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Feature_access
            ///
            /// Encodes whether a FinancialAccount has access to a particular feature. Stripe or the platform can control features via the requested field.
            public var features: Features?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: [String: String]?
            /// Platform_restrictions
            ///
            /// The set of functionalities that the platform can restrict on the FinancialAccount.
            public var platformRestrictions: PlatformRestrictions?
            /// The currencies the FinancialAccount can hold a balance in.
            public var supportedCurrencies: [String]

            /// Feature_access
            ///
            /// Encodes whether a FinancialAccount has access to a particular feature. Stripe or the platform can control features via the requested field.
            public struct Features: Encodable {
                /// Access
                public var cardIssuing: CardIssuing?
                /// Access
                public var depositInsurance: DepositInsurance?
                /// Financial_addresses
                public var financialAddresses: FinancialAddresses?
                /// Inbound_transfers
                public var inboundTransfers: InboundTransfers?
                /// Access
                public var intraStripeFlows: IntraStripeFlows?
                /// Outbound_payments
                public var outboundPayments: OutboundPayments?
                /// Outbound_transfers
                public var outboundTransfers: OutboundTransfers?

                /// Access
                public struct CardIssuing: Encodable {
                    public var isRequested: Bool

                    public init(isRequested: Bool) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Access
                public struct DepositInsurance: Encodable {
                    public var isRequested: Bool

                    public init(isRequested: Bool) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Financial_addresses
                public struct FinancialAddresses: Encodable {
                    /// Access
                    public var aba: Aba?

                    /// Access
                    public struct Aba: Encodable {
                        public var isRequested: Bool

                        public init(isRequested: Bool) {
                            self.isRequested = isRequested
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isRequested, forKey: "requested")
                            return encoder.items
                        }
                    }

                    public init(aba: Aba? = nil) {
                        self.aba = aba
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(aba, forKey: "aba")
                        return encoder.items
                    }
                }

                /// Inbound_transfers
                public struct InboundTransfers: Encodable {
                    /// Access
                    public var ach: Ach?

                    /// Access
                    public struct Ach: Encodable {
                        public var isRequested: Bool

                        public init(isRequested: Bool) {
                            self.isRequested = isRequested
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isRequested, forKey: "requested")
                            return encoder.items
                        }
                    }

                    public init(ach: Ach? = nil) {
                        self.ach = ach
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(ach, forKey: "ach")
                        return encoder.items
                    }
                }

                /// Access
                public struct IntraStripeFlows: Encodable {
                    public var isRequested: Bool

                    public init(isRequested: Bool) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Outbound_payments
                public struct OutboundPayments: Encodable {
                    /// Access
                    public var ach: Ach?
                    /// Access
                    public var usDomesticWire: UsDomesticWire?

                    /// Access
                    public struct Ach: Encodable {
                        public var isRequested: Bool

                        public init(isRequested: Bool) {
                            self.isRequested = isRequested
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isRequested, forKey: "requested")
                            return encoder.items
                        }
                    }

                    /// Access
                    public struct UsDomesticWire: Encodable {
                        public var isRequested: Bool

                        public init(isRequested: Bool) {
                            self.isRequested = isRequested
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isRequested, forKey: "requested")
                            return encoder.items
                        }
                    }

                    public init(ach: Ach? = nil, usDomesticWire: UsDomesticWire? = nil) {
                        self.ach = ach
                        self.usDomesticWire = usDomesticWire
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(ach, forKey: "ach")
                        encoder.encode(usDomesticWire, forKey: "us_domestic_wire")
                        return encoder.items
                    }
                }

                /// Outbound_transfers
                public struct OutboundTransfers: Encodable {
                    /// Access
                    public var ach: Ach?
                    /// Access
                    public var usDomesticWire: UsDomesticWire?

                    /// Access
                    public struct Ach: Encodable {
                        public var isRequested: Bool

                        public init(isRequested: Bool) {
                            self.isRequested = isRequested
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isRequested, forKey: "requested")
                            return encoder.items
                        }
                    }

                    /// Access
                    public struct UsDomesticWire: Encodable {
                        public var isRequested: Bool

                        public init(isRequested: Bool) {
                            self.isRequested = isRequested
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isRequested, forKey: "requested")
                            return encoder.items
                        }
                    }

                    public init(ach: Ach? = nil, usDomesticWire: UsDomesticWire? = nil) {
                        self.ach = ach
                        self.usDomesticWire = usDomesticWire
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(ach, forKey: "ach")
                        encoder.encode(usDomesticWire, forKey: "us_domestic_wire")
                        return encoder.items
                    }
                }

                public init(cardIssuing: CardIssuing? = nil, depositInsurance: DepositInsurance? = nil, financialAddresses: FinancialAddresses? = nil, inboundTransfers: InboundTransfers? = nil, intraStripeFlows: IntraStripeFlows? = nil, outboundPayments: OutboundPayments? = nil, outboundTransfers: OutboundTransfers? = nil) {
                    self.cardIssuing = cardIssuing
                    self.depositInsurance = depositInsurance
                    self.financialAddresses = financialAddresses
                    self.inboundTransfers = inboundTransfers
                    self.intraStripeFlows = intraStripeFlows
                    self.outboundPayments = outboundPayments
                    self.outboundTransfers = outboundTransfers
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(cardIssuing, forKey: "card_issuing")
                    encoder.encode(depositInsurance, forKey: "deposit_insurance")
                    encoder.encode(financialAddresses, forKey: "financial_addresses")
                    encoder.encode(inboundTransfers, forKey: "inbound_transfers")
                    encoder.encode(intraStripeFlows, forKey: "intra_stripe_flows")
                    encoder.encode(outboundPayments, forKey: "outbound_payments")
                    encoder.encode(outboundTransfers, forKey: "outbound_transfers")
                    return encoder.items
                }
            }

            /// Platform_restrictions
            ///
            /// The set of functionalities that the platform can restrict on the FinancialAccount.
            public struct PlatformRestrictions: Encodable {
                public var inboundFlows: InboundFlows?
                public var outboundFlows: OutboundFlows?

                public enum InboundFlows: String, Codable, CaseIterable {
                    case restricted
                    case unrestricted
                }

                public enum OutboundFlows: String, Codable, CaseIterable {
                    case restricted
                    case unrestricted
                }

                public init(inboundFlows: InboundFlows? = nil, outboundFlows: OutboundFlows? = nil) {
                    self.inboundFlows = inboundFlows
                    self.outboundFlows = outboundFlows
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(inboundFlows, forKey: "inbound_flows")
                    encoder.encode(outboundFlows, forKey: "outbound_flows")
                    return encoder.items
                }
            }

            public init(expand: [String]? = nil, features: Features? = nil, metadata: [String: String]? = nil, platformRestrictions: PlatformRestrictions? = nil, supportedCurrencies: [String]) {
                self.expand = expand
                self.features = features
                self.metadata = metadata
                self.platformRestrictions = platformRestrictions
                self.supportedCurrencies = supportedCurrencies
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(features, forKey: "features")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(platformRestrictions, forKey: "platform_restrictions")
                encoder.encode(supportedCurrencies, forKey: "supported_currencies")
                return encoder.items
            }
        }
    }
}
