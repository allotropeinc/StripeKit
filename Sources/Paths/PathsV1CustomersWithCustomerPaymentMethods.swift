// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Customers.WithCustomer {
    public var paymentMethods: PaymentMethods {
        PaymentMethods(path: path + "/payment_methods")
    }

    public struct PaymentMethods {
        /// Path: `/v1/customers/{customer}/payment_methods`
        public let path: String

        /// <p>Returns a list of PaymentMethods for a given Customer</p>
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters.asQuery, id: "GetCustomersCustomerPaymentMethods")
        }

        /// CustomerPaymentMethodResourceList
        public struct GetResponse: Decodable {
            public var data: [StripeKit.PaymentMethod]
            /// True if this list has another page of items after this one that can be fetched.
            public var hasMore: Bool
            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public var object: Object
            /// The URL where this list can be accessed.
            public var url: String

            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public enum Object: String, Codable, CaseIterable {
                case list
            }

            public init(data: [StripeKit.PaymentMethod], hasMore: Bool, object: Object, url: String) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.data = try values.decode([StripeKit.PaymentMethod].self, forKey: "data")
                self.hasMore = try values.decode(Bool.self, forKey: "has_more")
                self.object = try values.decode(Object.self, forKey: "object")
                self.url = try values.decode(String.self, forKey: "url")
            }
        }

        public struct GetParameters {
            public var endingBefore: String?
            public var expand: [String]?
            public var limit: Int?
            public var startingAfter: String?
            public var type: `Type`

            public enum `Type`: String, Codable, CaseIterable {
                case acssDebit = "acss_debit"
                case affirm
                case afterpayClearpay = "afterpay_clearpay"
                case alipay
                case auBecsDebit = "au_becs_debit"
                case bacsDebit = "bacs_debit"
                case bancontact
                case blik
                case boleto
                case card
                case customerBalance = "customer_balance"
                case eps
                case fpx
                case giropay
                case grabpay
                case ideal
                case klarna
                case konbini
                case link
                case oxxo
                case p24
                case paynow
                case promptpay
                case sepaDebit = "sepa_debit"
                case sofort
                case usBankAccount = "us_bank_account"
                case wechatPay = "wechat_pay"
            }

            public init(endingBefore: String? = nil, expand: [String]? = nil, limit: Int? = nil, startingAfter: String? = nil, type: `Type`) {
                self.endingBefore = endingBefore
                self.expand = expand
                self.limit = limit
                self.startingAfter = startingAfter
                self.type = type
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(endingBefore, forKey: "ending_before")
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(limit, forKey: "limit")
                encoder.encode(startingAfter, forKey: "starting_after")
                encoder.encode(type, forKey: "type")
                return encoder.items
            }
        }
    }
}
