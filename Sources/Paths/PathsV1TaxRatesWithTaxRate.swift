// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.TaxRates {
    public func taxRate(_ taxRate: String) -> WithTaxRate {
        WithTaxRate(path: "\(path)/\(taxRate)")
    }

    public struct WithTaxRate {
        /// Path: `/v1/tax_rates/{tax_rate}`
        public let path: String

        /// <p>Retrieves a tax rate with the given ID</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.TaxRate> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetTaxRatesTaxRate")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates an existing tax rate.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.TaxRate> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostTaxRatesTaxRate")
        }

        public struct PostRequest: Encodable {
            /// Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
            public var isActive: Bool?
            /// Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
            public var country: String?
            /// An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
            public var description: String?
            /// The display name of the tax rate, which will be shown to users.
            public var displayName: String?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customerâ€™s invoice.
            public var jurisdiction: String?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?
            /// [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States.
            public var state: String?
            /// The high-level tax type, such as `vat` or `sales_tax`.
            public var taxType: TaxType?

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// The high-level tax type, such as `vat` or `sales_tax`.
            public enum TaxType: String, Codable, CaseIterable {
                case gst
                case hst
                case jct
                case pst
                case qst
                case rst
                case salesTax = "sales_tax"
                case vat
            }

            public init(isActive: Bool? = nil, country: String? = nil, description: String? = nil, displayName: String? = nil, expand: [String]? = nil, jurisdiction: String? = nil, metadata: Metadata? = nil, state: String? = nil, taxType: TaxType? = nil) {
                self.isActive = isActive
                self.country = country
                self.description = description
                self.displayName = displayName
                self.expand = expand
                self.jurisdiction = jurisdiction
                self.metadata = metadata
                self.state = state
                self.taxType = taxType
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isActive, forKey: "active")
                encoder.encode(country, forKey: "country")
                encoder.encode(description, forKey: "description")
                encoder.encode(displayName, forKey: "display_name")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(jurisdiction, forKey: "jurisdiction")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(state, forKey: "state")
                encoder.encode(taxType, forKey: "tax_type")
                return encoder.items
            }
        }
    }
}
