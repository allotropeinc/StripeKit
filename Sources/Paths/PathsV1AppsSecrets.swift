// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Apps {
    public var secrets: Secrets {
        Secrets(path: path + "/secrets")
    }

    public struct Secrets {
        /// Path: `/v1/apps/secrets`
        public let path: String

        /// <p>List all secrets stored on the given scope.</p>
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters.asQuery, id: "GetAppsSecrets")
        }

        /// SecretServiceResourceSecretList
        public struct GetResponse: Decodable {
            public var data: [StripeKit.AppsSecret]
            /// True if this list has another page of items after this one that can be fetched.
            public var hasMore: Bool
            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public var object: Object
            /// The URL where this list can be accessed.
            public var url: String

            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public enum Object: String, Codable, CaseIterable {
                case list
            }

            public init(data: [StripeKit.AppsSecret], hasMore: Bool, object: Object, url: String) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.data = try values.decode([StripeKit.AppsSecret].self, forKey: "data")
                self.hasMore = try values.decode(Bool.self, forKey: "has_more")
                self.object = try values.decode(Object.self, forKey: "object")
                self.url = try values.decode(String.self, forKey: "url")
            }
        }

        public struct GetParameters {
            public var endingBefore: String?
            public var expand: [String]?
            public var limit: Int?
            /// Scope_param
            public var scope: Scope
            public var startingAfter: String?

            /// Scope_param
            public struct Scope: Codable {
                public var type: `Type`
                public var user: String?

                public enum `Type`: String, Codable, CaseIterable {
                    case account
                    case user
                }

                public init(type: `Type`, user: String? = nil) {
                    self.type = type
                    self.user = user
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(type, forKey: "type")
                    encoder.encode(user, forKey: "user")
                    return encoder.items
                }
            }

            public init(endingBefore: String? = nil, expand: [String]? = nil, limit: Int? = nil, scope: Scope, startingAfter: String? = nil) {
                self.endingBefore = endingBefore
                self.expand = expand
                self.limit = limit
                self.scope = scope
                self.startingAfter = startingAfter
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(endingBefore, forKey: "ending_before")
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(limit, forKey: "limit")
                encoder.encode(scope, forKey: "scope", isDeepObject: true)
                encoder.encode(startingAfter, forKey: "starting_after")
                return encoder.items
            }
        }

        /// <p>Create or replace a secret in the secret store.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.AppsSecret> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostAppsSecrets")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The Unix timestamp for the expiry time of the secret, after which the secret deletes.
            public var expiresAt: Int?
            /// A name for the secret that's unique within the scope.
            public var name: String
            /// The plaintext secret value to be stored.
            public var payload: String
            /// Scope_param
            ///
            /// Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
            public var scope: Scope

            /// Scope_param
            ///
            /// Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
            public struct Scope: Encodable {
                public var type: `Type`
                public var user: String?

                public enum `Type`: String, Codable, CaseIterable {
                    case account
                    case user
                }

                public init(type: `Type`, user: String? = nil) {
                    self.type = type
                    self.user = user
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(type, forKey: "type")
                    encoder.encode(user, forKey: "user")
                    return encoder.items
                }
            }

            public init(expand: [String]? = nil, expiresAt: Int? = nil, name: String, payload: String, scope: Scope) {
                self.expand = expand
                self.expiresAt = expiresAt
                self.name = name
                self.payload = payload
                self.scope = scope
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(expiresAt, forKey: "expires_at")
                encoder.encode(name, forKey: "name")
                encoder.encode(payload, forKey: "payload")
                encoder.encode(scope, forKey: "scope")
                return encoder.items
            }
        }
    }
}
