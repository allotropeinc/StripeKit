// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var tokens: Tokens {
        Tokens(path: "/v1/tokens")
    }

    public struct Tokens {
        /// Path: `/v1/tokens`
        public let path: String

        /// <p>Creates a single-use token that represents a bank accountâ€™s details.
        /// This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href="#accounts">Custom account</a>.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.Token> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostTokens")
        }

        public struct PostRequest: Encodable {
            /// Connect_js_account_token_specs
            ///
            /// Information for the account this token will represent.
            public var account: Account?
            /// Token_create_bank_account
            ///
            /// The bank account this token will represent.
            public var bankAccount: BankAccount?
            public var card: Card?
            /// The customer (owned by the application's account) for which to create a token. This can be used only with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). For more details, see [Cloning Saved Payment Methods](https://stripe.com/docs/connect/cloning-saved-payment-methods).
            public var customer: String?
            /// Cvc_params
            ///
            /// The updated CVC value this token will represent.
            public var cvcUpdate: CvcUpdate?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Person_token_specs
            ///
            /// Information for the person this token will represent.
            public var person: Person?
            /// Pii_token_specs
            ///
            /// The PII this token will represent.
            public var pii: Pii?

            /// Connect_js_account_token_specs
            ///
            /// Information for the account this token will represent.
            public struct Account: Encodable {
                public var businessType: BusinessType?
                /// Connect_js_account_token_company_specs
                public var company: Company?
                /// Individual_specs
                public var individual: Individual?
                public var isTosShownAndAccepted: Bool?

                public enum BusinessType: String, Codable, CaseIterable {
                    case company
                    case governmentEntity = "government_entity"
                    case individual
                    case nonProfit = "non_profit"
                }

                /// Connect_js_account_token_company_specs
                public struct Company: Encodable {
                    /// Address_specs
                    public var address: Address?
                    /// Japan_address_kana_specs
                    public var addressKana: AddressKana?
                    /// Japan_address_kanji_specs
                    public var addressKanji: AddressKanji?
                    public var isDirectorsProvided: Bool?
                    public var isExecutivesProvided: Bool?
                    public var name: String?
                    public var nameKana: String?
                    public var nameKanji: String?
                    public var isOwnersProvided: Bool?
                    /// Company_ownership_declaration
                    public var ownershipDeclaration: OwnershipDeclaration?
                    public var isOwnershipDeclarationShownAndSigned: Bool?
                    public var phone: String?
                    public var registrationNumber: String?
                    public var structure: Structure?
                    public var taxID: String?
                    public var taxIDRegistrar: String?
                    public var vatID: String?
                    /// Verification_specs
                    public var verification: Verification?

                    /// Address_specs
                    public struct Address: Encodable {
                        public var city: String?
                        public var country: String?
                        public var line1: String?
                        public var line2: String?
                        public var postalCode: String?
                        public var state: String?

                        public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                            self.city = city
                            self.country = country
                            self.line1 = line1
                            self.line2 = line2
                            self.postalCode = postalCode
                            self.state = state
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(city, forKey: "city")
                            encoder.encode(country, forKey: "country")
                            encoder.encode(line1, forKey: "line1")
                            encoder.encode(line2, forKey: "line2")
                            encoder.encode(postalCode, forKey: "postal_code")
                            encoder.encode(state, forKey: "state")
                            return encoder.items
                        }
                    }

                    /// Japan_address_kana_specs
                    public struct AddressKana: Encodable {
                        public var city: String?
                        public var country: String?
                        public var line1: String?
                        public var line2: String?
                        public var postalCode: String?
                        public var state: String?
                        public var town: String?

                        public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
                            self.city = city
                            self.country = country
                            self.line1 = line1
                            self.line2 = line2
                            self.postalCode = postalCode
                            self.state = state
                            self.town = town
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(city, forKey: "city")
                            encoder.encode(country, forKey: "country")
                            encoder.encode(line1, forKey: "line1")
                            encoder.encode(line2, forKey: "line2")
                            encoder.encode(postalCode, forKey: "postal_code")
                            encoder.encode(state, forKey: "state")
                            encoder.encode(town, forKey: "town")
                            return encoder.items
                        }
                    }

                    /// Japan_address_kanji_specs
                    public struct AddressKanji: Encodable {
                        public var city: String?
                        public var country: String?
                        public var line1: String?
                        public var line2: String?
                        public var postalCode: String?
                        public var state: String?
                        public var town: String?

                        public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
                            self.city = city
                            self.country = country
                            self.line1 = line1
                            self.line2 = line2
                            self.postalCode = postalCode
                            self.state = state
                            self.town = town
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(city, forKey: "city")
                            encoder.encode(country, forKey: "country")
                            encoder.encode(line1, forKey: "line1")
                            encoder.encode(line2, forKey: "line2")
                            encoder.encode(postalCode, forKey: "postal_code")
                            encoder.encode(state, forKey: "state")
                            encoder.encode(town, forKey: "town")
                            return encoder.items
                        }
                    }

                    /// Company_ownership_declaration
                    public struct OwnershipDeclaration: Encodable {
                        public var date: Int?
                        public var ip: String?
                        public var userAgent: String?

                        public init(date: Int? = nil, ip: String? = nil, userAgent: String? = nil) {
                            self.date = date
                            self.ip = ip
                            self.userAgent = userAgent
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(date, forKey: "date")
                            encoder.encode(ip, forKey: "ip")
                            encoder.encode(userAgent, forKey: "user_agent")
                            return encoder.items
                        }
                    }

                    public enum Structure: String, Codable, CaseIterable {
                        case empty = ""
                        case freeZoneEstablishment = "free_zone_establishment"
                        case freeZoneLlc = "free_zone_llc"
                        case governmentInstrumentality = "government_instrumentality"
                        case governmentalUnit = "governmental_unit"
                        case incorporatedNonProfit = "incorporated_non_profit"
                        case limitedLiabilityPartnership = "limited_liability_partnership"
                        case llc
                        case multiMemberLlc = "multi_member_llc"
                        case privateCompany = "private_company"
                        case privateCorporation = "private_corporation"
                        case privatePartnership = "private_partnership"
                        case publicCompany = "public_company"
                        case publicCorporation = "public_corporation"
                        case publicPartnership = "public_partnership"
                        case singleMemberLlc = "single_member_llc"
                        case soleEstablishment = "sole_establishment"
                        case soleProprietorship = "sole_proprietorship"
                        case taxExemptGovernmentInstrumentality = "tax_exempt_government_instrumentality"
                        case unincorporatedAssociation = "unincorporated_association"
                        case unincorporatedNonProfit = "unincorporated_non_profit"
                    }

                    /// Verification_specs
                    public struct Verification: Encodable {
                        /// Verification_document_specs
                        public var document: Document?

                        /// Verification_document_specs
                        public struct Document: Encodable {
                            public var back: String?
                            public var front: String?

                            public init(back: String? = nil, front: String? = nil) {
                                self.back = back
                                self.front = front
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(back, forKey: "back")
                                encoder.encode(front, forKey: "front")
                                return encoder.items
                            }
                        }

                        public init(document: Document? = nil) {
                            self.document = document
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(document, forKey: "document")
                            return encoder.items
                        }
                    }

                    public init(address: Address? = nil, addressKana: AddressKana? = nil, addressKanji: AddressKanji? = nil, isDirectorsProvided: Bool? = nil, isExecutivesProvided: Bool? = nil, name: String? = nil, nameKana: String? = nil, nameKanji: String? = nil, isOwnersProvided: Bool? = nil, ownershipDeclaration: OwnershipDeclaration? = nil, isOwnershipDeclarationShownAndSigned: Bool? = nil, phone: String? = nil, registrationNumber: String? = nil, structure: Structure? = nil, taxID: String? = nil, taxIDRegistrar: String? = nil, vatID: String? = nil, verification: Verification? = nil) {
                        self.address = address
                        self.addressKana = addressKana
                        self.addressKanji = addressKanji
                        self.isDirectorsProvided = isDirectorsProvided
                        self.isExecutivesProvided = isExecutivesProvided
                        self.name = name
                        self.nameKana = nameKana
                        self.nameKanji = nameKanji
                        self.isOwnersProvided = isOwnersProvided
                        self.ownershipDeclaration = ownershipDeclaration
                        self.isOwnershipDeclarationShownAndSigned = isOwnershipDeclarationShownAndSigned
                        self.phone = phone
                        self.registrationNumber = registrationNumber
                        self.structure = structure
                        self.taxID = taxID
                        self.taxIDRegistrar = taxIDRegistrar
                        self.vatID = vatID
                        self.verification = verification
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(address, forKey: "address")
                        encoder.encode(addressKana, forKey: "address_kana")
                        encoder.encode(addressKanji, forKey: "address_kanji")
                        encoder.encode(isDirectorsProvided, forKey: "directors_provided")
                        encoder.encode(isExecutivesProvided, forKey: "executives_provided")
                        encoder.encode(name, forKey: "name")
                        encoder.encode(nameKana, forKey: "name_kana")
                        encoder.encode(nameKanji, forKey: "name_kanji")
                        encoder.encode(isOwnersProvided, forKey: "owners_provided")
                        encoder.encode(ownershipDeclaration, forKey: "ownership_declaration")
                        encoder.encode(isOwnershipDeclarationShownAndSigned, forKey: "ownership_declaration_shown_and_signed")
                        encoder.encode(phone, forKey: "phone")
                        encoder.encode(registrationNumber, forKey: "registration_number")
                        encoder.encode(structure, forKey: "structure")
                        encoder.encode(taxID, forKey: "tax_id")
                        encoder.encode(taxIDRegistrar, forKey: "tax_id_registrar")
                        encoder.encode(vatID, forKey: "vat_id")
                        encoder.encode(verification, forKey: "verification")
                        return encoder.items
                    }
                }

                /// Individual_specs
                public struct Individual: Encodable {
                    /// Address_specs
                    public var address: Address?
                    /// Japan_address_kana_specs
                    public var addressKana: AddressKana?
                    /// Japan_address_kanji_specs
                    public var addressKanji: AddressKanji?
                    public var dob: Dob?
                    public var email: String?
                    public var firstName: String?
                    public var firstNameKana: String?
                    public var firstNameKanji: String?
                    public var fullNameAliases: FullNameAliases?
                    public var gender: String?
                    public var idNumber: String?
                    public var idNumberSecondary: String?
                    public var lastName: String?
                    public var lastNameKana: String?
                    public var lastNameKanji: String?
                    public var maidenName: String?
                    public var metadata: Metadata?
                    public var phone: String?
                    public var politicalExposure: PoliticalExposure?
                    /// Address_specs
                    public var registeredAddress: RegisteredAddress?
                    public var ssnLast4: String?
                    /// Person_verification_specs
                    public var verification: Verification?

                    /// Address_specs
                    public struct Address: Encodable {
                        public var city: String?
                        public var country: String?
                        public var line1: String?
                        public var line2: String?
                        public var postalCode: String?
                        public var state: String?

                        public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                            self.city = city
                            self.country = country
                            self.line1 = line1
                            self.line2 = line2
                            self.postalCode = postalCode
                            self.state = state
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(city, forKey: "city")
                            encoder.encode(country, forKey: "country")
                            encoder.encode(line1, forKey: "line1")
                            encoder.encode(line2, forKey: "line2")
                            encoder.encode(postalCode, forKey: "postal_code")
                            encoder.encode(state, forKey: "state")
                            return encoder.items
                        }
                    }

                    /// Japan_address_kana_specs
                    public struct AddressKana: Encodable {
                        public var city: String?
                        public var country: String?
                        public var line1: String?
                        public var line2: String?
                        public var postalCode: String?
                        public var state: String?
                        public var town: String?

                        public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
                            self.city = city
                            self.country = country
                            self.line1 = line1
                            self.line2 = line2
                            self.postalCode = postalCode
                            self.state = state
                            self.town = town
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(city, forKey: "city")
                            encoder.encode(country, forKey: "country")
                            encoder.encode(line1, forKey: "line1")
                            encoder.encode(line2, forKey: "line2")
                            encoder.encode(postalCode, forKey: "postal_code")
                            encoder.encode(state, forKey: "state")
                            encoder.encode(town, forKey: "town")
                            return encoder.items
                        }
                    }

                    /// Japan_address_kanji_specs
                    public struct AddressKanji: Encodable {
                        public var city: String?
                        public var country: String?
                        public var line1: String?
                        public var line2: String?
                        public var postalCode: String?
                        public var state: String?
                        public var town: String?

                        public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
                            self.city = city
                            self.country = country
                            self.line1 = line1
                            self.line2 = line2
                            self.postalCode = postalCode
                            self.state = state
                            self.town = town
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(city, forKey: "city")
                            encoder.encode(country, forKey: "country")
                            encoder.encode(line1, forKey: "line1")
                            encoder.encode(line2, forKey: "line2")
                            encoder.encode(postalCode, forKey: "postal_code")
                            encoder.encode(state, forKey: "state")
                            encoder.encode(town, forKey: "town")
                            return encoder.items
                        }
                    }

                    public struct Dob: Encodable {
                        /// Date_of_birth_specs
                        public var a: A?
                        public var b: B?

                        /// Date_of_birth_specs
                        public struct A: Encodable {
                            public var day: Int
                            public var month: Int
                            public var year: Int

                            public init(day: Int, month: Int, year: Int) {
                                self.day = day
                                self.month = month
                                self.year = year
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(day, forKey: "day")
                                encoder.encode(month, forKey: "month")
                                encoder.encode(year, forKey: "year")
                                return encoder.items
                            }
                        }

                        public enum B: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(a: A? = nil, b: B? = nil) {
                            self.a = a
                            self.b = b
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(a, forKey: "a")
                            encoder.encode(b, forKey: "b")
                            return encoder.items
                        }
                    }

                    public struct FullNameAliases: Encodable {
                        public var strings: [String]?
                        public var object: Object?

                        public enum Object: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(strings: [String]? = nil, object: Object? = nil) {
                            self.strings = strings
                            self.object = object
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(strings, forKey: "strings")
                            encoder.encode(object, forKey: "object")
                            return encoder.items
                        }
                    }

                    public struct Metadata: Encodable {
                        public var stringString: [String: String]?
                        public var object: Object?

                        public enum Object: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(stringString: [String: String]? = nil, object: Object? = nil) {
                            self.stringString = stringString
                            self.object = object
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(stringString, forKey: "stringString")
                            encoder.encode(object, forKey: "object")
                            return encoder.items
                        }
                    }

                    public enum PoliticalExposure: String, Codable, CaseIterable {
                        case existing
                        case `none`
                    }

                    /// Address_specs
                    public struct RegisteredAddress: Encodable {
                        public var city: String?
                        public var country: String?
                        public var line1: String?
                        public var line2: String?
                        public var postalCode: String?
                        public var state: String?

                        public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                            self.city = city
                            self.country = country
                            self.line1 = line1
                            self.line2 = line2
                            self.postalCode = postalCode
                            self.state = state
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(city, forKey: "city")
                            encoder.encode(country, forKey: "country")
                            encoder.encode(line1, forKey: "line1")
                            encoder.encode(line2, forKey: "line2")
                            encoder.encode(postalCode, forKey: "postal_code")
                            encoder.encode(state, forKey: "state")
                            return encoder.items
                        }
                    }

                    /// Person_verification_specs
                    public struct Verification: Encodable {
                        /// Person_verification_document_specs
                        public var additionalDocument: AdditionalDocument?
                        /// Person_verification_document_specs
                        public var document: Document?

                        /// Person_verification_document_specs
                        public struct AdditionalDocument: Encodable {
                            public var back: String?
                            public var front: String?

                            public init(back: String? = nil, front: String? = nil) {
                                self.back = back
                                self.front = front
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(back, forKey: "back")
                                encoder.encode(front, forKey: "front")
                                return encoder.items
                            }
                        }

                        /// Person_verification_document_specs
                        public struct Document: Encodable {
                            public var back: String?
                            public var front: String?

                            public init(back: String? = nil, front: String? = nil) {
                                self.back = back
                                self.front = front
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(back, forKey: "back")
                                encoder.encode(front, forKey: "front")
                                return encoder.items
                            }
                        }

                        public init(additionalDocument: AdditionalDocument? = nil, document: Document? = nil) {
                            self.additionalDocument = additionalDocument
                            self.document = document
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(additionalDocument, forKey: "additional_document")
                            encoder.encode(document, forKey: "document")
                            return encoder.items
                        }
                    }

                    public init(address: Address? = nil, addressKana: AddressKana? = nil, addressKanji: AddressKanji? = nil, dob: Dob? = nil, email: String? = nil, firstName: String? = nil, firstNameKana: String? = nil, firstNameKanji: String? = nil, fullNameAliases: FullNameAliases? = nil, gender: String? = nil, idNumber: String? = nil, idNumberSecondary: String? = nil, lastName: String? = nil, lastNameKana: String? = nil, lastNameKanji: String? = nil, maidenName: String? = nil, metadata: Metadata? = nil, phone: String? = nil, politicalExposure: PoliticalExposure? = nil, registeredAddress: RegisteredAddress? = nil, ssnLast4: String? = nil, verification: Verification? = nil) {
                        self.address = address
                        self.addressKana = addressKana
                        self.addressKanji = addressKanji
                        self.dob = dob
                        self.email = email
                        self.firstName = firstName
                        self.firstNameKana = firstNameKana
                        self.firstNameKanji = firstNameKanji
                        self.fullNameAliases = fullNameAliases
                        self.gender = gender
                        self.idNumber = idNumber
                        self.idNumberSecondary = idNumberSecondary
                        self.lastName = lastName
                        self.lastNameKana = lastNameKana
                        self.lastNameKanji = lastNameKanji
                        self.maidenName = maidenName
                        self.metadata = metadata
                        self.phone = phone
                        self.politicalExposure = politicalExposure
                        self.registeredAddress = registeredAddress
                        self.ssnLast4 = ssnLast4
                        self.verification = verification
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(address, forKey: "address")
                        encoder.encode(addressKana, forKey: "address_kana")
                        encoder.encode(addressKanji, forKey: "address_kanji")
                        encoder.encode(dob, forKey: "dob")
                        encoder.encode(email, forKey: "email")
                        encoder.encode(firstName, forKey: "first_name")
                        encoder.encode(firstNameKana, forKey: "first_name_kana")
                        encoder.encode(firstNameKanji, forKey: "first_name_kanji")
                        encoder.encode(fullNameAliases, forKey: "full_name_aliases")
                        encoder.encode(gender, forKey: "gender")
                        encoder.encode(idNumber, forKey: "id_number")
                        encoder.encode(idNumberSecondary, forKey: "id_number_secondary")
                        encoder.encode(lastName, forKey: "last_name")
                        encoder.encode(lastNameKana, forKey: "last_name_kana")
                        encoder.encode(lastNameKanji, forKey: "last_name_kanji")
                        encoder.encode(maidenName, forKey: "maiden_name")
                        encoder.encode(metadata, forKey: "metadata")
                        encoder.encode(phone, forKey: "phone")
                        encoder.encode(politicalExposure, forKey: "political_exposure")
                        encoder.encode(registeredAddress, forKey: "registered_address")
                        encoder.encode(ssnLast4, forKey: "ssn_last_4")
                        encoder.encode(verification, forKey: "verification")
                        return encoder.items
                    }
                }

                public init(businessType: BusinessType? = nil, company: Company? = nil, individual: Individual? = nil, isTosShownAndAccepted: Bool? = nil) {
                    self.businessType = businessType
                    self.company = company
                    self.individual = individual
                    self.isTosShownAndAccepted = isTosShownAndAccepted
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(businessType, forKey: "business_type")
                    encoder.encode(company, forKey: "company")
                    encoder.encode(individual, forKey: "individual")
                    encoder.encode(isTosShownAndAccepted, forKey: "tos_shown_and_accepted")
                    return encoder.items
                }
            }

            /// Token_create_bank_account
            ///
            /// The bank account this token will represent.
            public struct BankAccount: Encodable {
                public var accountHolderName: String?
                public var accountHolderType: AccountHolderType?
                public var accountNumber: String
                public var accountType: AccountType?
                public var country: String
                public var currency: String?
                public var routingNumber: String?

                public enum AccountHolderType: String, Codable, CaseIterable {
                    case company
                    case individual
                }

                public enum AccountType: String, Codable, CaseIterable {
                    case checking
                    case futsu
                    case savings
                    case toza
                }

                public init(accountHolderName: String? = nil, accountHolderType: AccountHolderType? = nil, accountNumber: String, accountType: AccountType? = nil, country: String, currency: String? = nil, routingNumber: String? = nil) {
                    self.accountHolderName = accountHolderName
                    self.accountHolderType = accountHolderType
                    self.accountNumber = accountNumber
                    self.accountType = accountType
                    self.country = country
                    self.currency = currency
                    self.routingNumber = routingNumber
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(accountHolderName, forKey: "account_holder_name")
                    encoder.encode(accountHolderType, forKey: "account_holder_type")
                    encoder.encode(accountNumber, forKey: "account_number")
                    encoder.encode(accountType, forKey: "account_type")
                    encoder.encode(country, forKey: "country")
                    encoder.encode(currency, forKey: "currency")
                    encoder.encode(routingNumber, forKey: "routing_number")
                    return encoder.items
                }
            }

            public struct Card: Encodable {
                /// Credit_card_specs
                public var object: Object?
                public var string: String?

                /// Credit_card_specs
                public struct Object: Encodable {
                    public var addressCity: String?
                    public var addressCountry: String?
                    public var addressLine1: String?
                    public var addressLine2: String?
                    public var addressState: String?
                    public var addressZip: String?
                    public var currency: String?
                    public var cvc: String?
                    public var expMonth: String
                    public var expYear: String
                    public var name: String?
                    public var number: String

                    public init(addressCity: String? = nil, addressCountry: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, addressState: String? = nil, addressZip: String? = nil, currency: String? = nil, cvc: String? = nil, expMonth: String, expYear: String, name: String? = nil, number: String) {
                        self.addressCity = addressCity
                        self.addressCountry = addressCountry
                        self.addressLine1 = addressLine1
                        self.addressLine2 = addressLine2
                        self.addressState = addressState
                        self.addressZip = addressZip
                        self.currency = currency
                        self.cvc = cvc
                        self.expMonth = expMonth
                        self.expYear = expYear
                        self.name = name
                        self.number = number
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(addressCity, forKey: "address_city")
                        encoder.encode(addressCountry, forKey: "address_country")
                        encoder.encode(addressLine1, forKey: "address_line1")
                        encoder.encode(addressLine2, forKey: "address_line2")
                        encoder.encode(addressState, forKey: "address_state")
                        encoder.encode(addressZip, forKey: "address_zip")
                        encoder.encode(currency, forKey: "currency")
                        encoder.encode(cvc, forKey: "cvc")
                        encoder.encode(expMonth, forKey: "exp_month")
                        encoder.encode(expYear, forKey: "exp_year")
                        encoder.encode(name, forKey: "name")
                        encoder.encode(number, forKey: "number")
                        return encoder.items
                    }
                }

                public init(object: Object? = nil, string: String? = nil) {
                    self.object = object
                    self.string = string
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(object, forKey: "object")
                    encoder.encode(string, forKey: "string")
                    return encoder.items
                }
            }

            /// Cvc_params
            ///
            /// The updated CVC value this token will represent.
            public struct CvcUpdate: Encodable {
                public var cvc: String

                public init(cvc: String) {
                    self.cvc = cvc
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(cvc, forKey: "cvc")
                    return encoder.items
                }
            }

            /// Person_token_specs
            ///
            /// Information for the person this token will represent.
            public struct Person: Encodable {
                /// Address_specs
                public var address: Address?
                /// Japan_address_kana_specs
                public var addressKana: AddressKana?
                /// Japan_address_kanji_specs
                public var addressKanji: AddressKanji?
                public var dob: Dob?
                /// Person_documents_specs
                public var documents: Documents?
                public var email: String?
                public var firstName: String?
                public var firstNameKana: String?
                public var firstNameKanji: String?
                public var fullNameAliases: FullNameAliases?
                public var gender: String?
                public var idNumber: String?
                public var idNumberSecondary: String?
                public var lastName: String?
                public var lastNameKana: String?
                public var lastNameKanji: String?
                public var maidenName: String?
                public var metadata: Metadata?
                public var nationality: String?
                public var phone: String?
                public var politicalExposure: String?
                /// Address_specs
                public var registeredAddress: RegisteredAddress?
                /// Relationship_specs
                public var relationship: Relationship?
                public var ssnLast4: String?
                /// Person_verification_specs
                public var verification: Verification?

                /// Address_specs
                public struct Address: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        return encoder.items
                    }
                }

                /// Japan_address_kana_specs
                public struct AddressKana: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?
                    public var town: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                        self.town = town
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        encoder.encode(town, forKey: "town")
                        return encoder.items
                    }
                }

                /// Japan_address_kanji_specs
                public struct AddressKanji: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?
                    public var town: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                        self.town = town
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        encoder.encode(town, forKey: "town")
                        return encoder.items
                    }
                }

                public struct Dob: Encodable {
                    /// Date_of_birth_specs
                    public var a: A?
                    public var b: B?

                    /// Date_of_birth_specs
                    public struct A: Encodable {
                        public var day: Int
                        public var month: Int
                        public var year: Int

                        public init(day: Int, month: Int, year: Int) {
                            self.day = day
                            self.month = month
                            self.year = year
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(day, forKey: "day")
                            encoder.encode(month, forKey: "month")
                            encoder.encode(year, forKey: "year")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                /// Person_documents_specs
                public struct Documents: Encodable {
                    /// Documents_param
                    public var companyAuthorization: CompanyAuthorization?
                    /// Documents_param
                    public var passport: Passport?
                    /// Documents_param
                    public var visa: Visa?

                    /// Documents_param
                    public struct CompanyAuthorization: Encodable {
                        public var files: [String]?

                        public init(files: [String]? = nil) {
                            self.files = files
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(files, forKey: "files")
                            return encoder.items
                        }
                    }

                    /// Documents_param
                    public struct Passport: Encodable {
                        public var files: [String]?

                        public init(files: [String]? = nil) {
                            self.files = files
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(files, forKey: "files")
                            return encoder.items
                        }
                    }

                    /// Documents_param
                    public struct Visa: Encodable {
                        public var files: [String]?

                        public init(files: [String]? = nil) {
                            self.files = files
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(files, forKey: "files")
                            return encoder.items
                        }
                    }

                    public init(companyAuthorization: CompanyAuthorization? = nil, passport: Passport? = nil, visa: Visa? = nil) {
                        self.companyAuthorization = companyAuthorization
                        self.passport = passport
                        self.visa = visa
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(companyAuthorization, forKey: "company_authorization")
                        encoder.encode(passport, forKey: "passport")
                        encoder.encode(visa, forKey: "visa")
                        return encoder.items
                    }
                }

                public struct FullNameAliases: Encodable {
                    public var strings: [String]?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(strings: [String]? = nil, object: Object? = nil) {
                        self.strings = strings
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(strings, forKey: "strings")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public struct Metadata: Encodable {
                    public var stringString: [String: String]?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(stringString: [String: String]? = nil, object: Object? = nil) {
                        self.stringString = stringString
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(stringString, forKey: "stringString")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                /// Address_specs
                public struct RegisteredAddress: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        return encoder.items
                    }
                }

                /// Relationship_specs
                public struct Relationship: Encodable {
                    public var isDirector: Bool?
                    public var isExecutive: Bool?
                    public var isOwner: Bool?
                    public var percentOwnership: PercentOwnership?
                    public var isRepresentative: Bool?
                    public var title: String?

                    public struct PercentOwnership: Encodable {
                        public var double: Double?
                        public var object: Object?

                        public enum Object: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(double: Double? = nil, object: Object? = nil) {
                            self.double = double
                            self.object = object
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(double, forKey: "double")
                            encoder.encode(object, forKey: "object")
                            return encoder.items
                        }
                    }

                    public init(isDirector: Bool? = nil, isExecutive: Bool? = nil, isOwner: Bool? = nil, percentOwnership: PercentOwnership? = nil, isRepresentative: Bool? = nil, title: String? = nil) {
                        self.isDirector = isDirector
                        self.isExecutive = isExecutive
                        self.isOwner = isOwner
                        self.percentOwnership = percentOwnership
                        self.isRepresentative = isRepresentative
                        self.title = title
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isDirector, forKey: "director")
                        encoder.encode(isExecutive, forKey: "executive")
                        encoder.encode(isOwner, forKey: "owner")
                        encoder.encode(percentOwnership, forKey: "percent_ownership")
                        encoder.encode(isRepresentative, forKey: "representative")
                        encoder.encode(title, forKey: "title")
                        return encoder.items
                    }
                }

                /// Person_verification_specs
                public struct Verification: Encodable {
                    /// Person_verification_document_specs
                    public var additionalDocument: AdditionalDocument?
                    /// Person_verification_document_specs
                    public var document: Document?

                    /// Person_verification_document_specs
                    public struct AdditionalDocument: Encodable {
                        public var back: String?
                        public var front: String?

                        public init(back: String? = nil, front: String? = nil) {
                            self.back = back
                            self.front = front
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(back, forKey: "back")
                            encoder.encode(front, forKey: "front")
                            return encoder.items
                        }
                    }

                    /// Person_verification_document_specs
                    public struct Document: Encodable {
                        public var back: String?
                        public var front: String?

                        public init(back: String? = nil, front: String? = nil) {
                            self.back = back
                            self.front = front
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(back, forKey: "back")
                            encoder.encode(front, forKey: "front")
                            return encoder.items
                        }
                    }

                    public init(additionalDocument: AdditionalDocument? = nil, document: Document? = nil) {
                        self.additionalDocument = additionalDocument
                        self.document = document
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(additionalDocument, forKey: "additional_document")
                        encoder.encode(document, forKey: "document")
                        return encoder.items
                    }
                }

                public init(address: Address? = nil, addressKana: AddressKana? = nil, addressKanji: AddressKanji? = nil, dob: Dob? = nil, documents: Documents? = nil, email: String? = nil, firstName: String? = nil, firstNameKana: String? = nil, firstNameKanji: String? = nil, fullNameAliases: FullNameAliases? = nil, gender: String? = nil, idNumber: String? = nil, idNumberSecondary: String? = nil, lastName: String? = nil, lastNameKana: String? = nil, lastNameKanji: String? = nil, maidenName: String? = nil, metadata: Metadata? = nil, nationality: String? = nil, phone: String? = nil, politicalExposure: String? = nil, registeredAddress: RegisteredAddress? = nil, relationship: Relationship? = nil, ssnLast4: String? = nil, verification: Verification? = nil) {
                    self.address = address
                    self.addressKana = addressKana
                    self.addressKanji = addressKanji
                    self.dob = dob
                    self.documents = documents
                    self.email = email
                    self.firstName = firstName
                    self.firstNameKana = firstNameKana
                    self.firstNameKanji = firstNameKanji
                    self.fullNameAliases = fullNameAliases
                    self.gender = gender
                    self.idNumber = idNumber
                    self.idNumberSecondary = idNumberSecondary
                    self.lastName = lastName
                    self.lastNameKana = lastNameKana
                    self.lastNameKanji = lastNameKanji
                    self.maidenName = maidenName
                    self.metadata = metadata
                    self.nationality = nationality
                    self.phone = phone
                    self.politicalExposure = politicalExposure
                    self.registeredAddress = registeredAddress
                    self.relationship = relationship
                    self.ssnLast4 = ssnLast4
                    self.verification = verification
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(address, forKey: "address")
                    encoder.encode(addressKana, forKey: "address_kana")
                    encoder.encode(addressKanji, forKey: "address_kanji")
                    encoder.encode(dob, forKey: "dob")
                    encoder.encode(documents, forKey: "documents")
                    encoder.encode(email, forKey: "email")
                    encoder.encode(firstName, forKey: "first_name")
                    encoder.encode(firstNameKana, forKey: "first_name_kana")
                    encoder.encode(firstNameKanji, forKey: "first_name_kanji")
                    encoder.encode(fullNameAliases, forKey: "full_name_aliases")
                    encoder.encode(gender, forKey: "gender")
                    encoder.encode(idNumber, forKey: "id_number")
                    encoder.encode(idNumberSecondary, forKey: "id_number_secondary")
                    encoder.encode(lastName, forKey: "last_name")
                    encoder.encode(lastNameKana, forKey: "last_name_kana")
                    encoder.encode(lastNameKanji, forKey: "last_name_kanji")
                    encoder.encode(maidenName, forKey: "maiden_name")
                    encoder.encode(metadata, forKey: "metadata")
                    encoder.encode(nationality, forKey: "nationality")
                    encoder.encode(phone, forKey: "phone")
                    encoder.encode(politicalExposure, forKey: "political_exposure")
                    encoder.encode(registeredAddress, forKey: "registered_address")
                    encoder.encode(relationship, forKey: "relationship")
                    encoder.encode(ssnLast4, forKey: "ssn_last_4")
                    encoder.encode(verification, forKey: "verification")
                    return encoder.items
                }
            }

            /// Pii_token_specs
            ///
            /// The PII this token will represent.
            public struct Pii: Encodable {
                public var idNumber: String?

                public init(idNumber: String? = nil) {
                    self.idNumber = idNumber
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(idNumber, forKey: "id_number")
                    return encoder.items
                }
            }

            public init(account: Account? = nil, bankAccount: BankAccount? = nil, card: Card? = nil, customer: String? = nil, cvcUpdate: CvcUpdate? = nil, expand: [String]? = nil, person: Person? = nil, pii: Pii? = nil) {
                self.account = account
                self.bankAccount = bankAccount
                self.card = card
                self.customer = customer
                self.cvcUpdate = cvcUpdate
                self.expand = expand
                self.person = person
                self.pii = pii
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(account, forKey: "account")
                encoder.encode(bankAccount, forKey: "bank_account")
                encoder.encode(card, forKey: "card")
                encoder.encode(customer, forKey: "customer")
                encoder.encode(cvcUpdate, forKey: "cvc_update")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(person, forKey: "person")
                encoder.encode(pii, forKey: "pii")
                return encoder.items
            }
        }
    }
}
