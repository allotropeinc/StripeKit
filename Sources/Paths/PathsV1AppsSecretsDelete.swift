// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Apps.Secrets {
    public var delete: Delete {
        Delete(path: path + "/delete")
    }

    public struct Delete {
        /// Path: `/v1/apps/secrets/delete`
        public let path: String

        /// <p>Deletes a secret from the secret store by name and scope.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.AppsSecret> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostAppsSecretsDelete")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// A name for the secret that's unique within the scope.
            public var name: String
            /// Scope_param
            ///
            /// Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
            public var scope: Scope

            /// Scope_param
            ///
            /// Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
            public struct Scope: Encodable {
                public var type: `Type`
                public var user: String?

                public enum `Type`: String, Codable, CaseIterable {
                    case account
                    case user
                }

                public init(type: `Type`, user: String? = nil) {
                    self.type = type
                    self.user = user
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(type, forKey: "type")
                    encoder.encode(user, forKey: "user")
                    return encoder.items
                }
            }

            public init(expand: [String]? = nil, name: String, scope: Scope) {
                self.expand = expand
                self.name = name
                self.scope = scope
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(name, forKey: "name")
                encoder.encode(scope, forKey: "scope")
                return encoder.items
            }
        }
    }
}
