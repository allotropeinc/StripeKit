// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.TestHelpers.Treasury {
    public var receivedDebits: ReceivedDebits {
        ReceivedDebits(path: path + "/received_debits")
    }

    public struct ReceivedDebits {
        /// Path: `/v1/test_helpers/treasury/received_debits`
        public let path: String

        /// <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you canâ€™t directly create ReceivedDebits initiated by third parties.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.TreasuryReceivedDebit> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostTestHelpersTreasuryReceivedDebits")
        }

        public struct PostRequest: Encodable {
            /// Amount (in cents) to be transferred.
            public var amount: Int
            /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
            public var currency: String
            /// An arbitrary string attached to the object. Often useful for displaying to users.
            public var description: String?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The FinancialAccount to pull funds from.
            public var financialAccount: String
            /// Source_params
            ///
            /// Initiating payment method details for the object.
            public var initiatingPaymentMethodDetails: InitiatingPaymentMethodDetails?
            /// The rails used for the object.
            public var network: Network

            /// Source_params
            ///
            /// Initiating payment method details for the object.
            public struct InitiatingPaymentMethodDetails: Encodable {
                public var type: `Type`
                /// Us_bank_account_source_params
                public var usBankAccount: UsBankAccount?

                public enum `Type`: String, Codable, CaseIterable {
                    case usBankAccount = "us_bank_account"
                }

                /// Us_bank_account_source_params
                public struct UsBankAccount: Encodable {
                    public var accountHolderName: String?
                    public var accountNumber: String?
                    public var routingNumber: String?

                    public init(accountHolderName: String? = nil, accountNumber: String? = nil, routingNumber: String? = nil) {
                        self.accountHolderName = accountHolderName
                        self.accountNumber = accountNumber
                        self.routingNumber = routingNumber
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(accountHolderName, forKey: "account_holder_name")
                        encoder.encode(accountNumber, forKey: "account_number")
                        encoder.encode(routingNumber, forKey: "routing_number")
                        return encoder.items
                    }
                }

                public init(type: `Type`, usBankAccount: UsBankAccount? = nil) {
                    self.type = type
                    self.usBankAccount = usBankAccount
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(type, forKey: "type")
                    encoder.encode(usBankAccount, forKey: "us_bank_account")
                    return encoder.items
                }
            }

            /// The rails used for the object.
            public enum Network: String, Codable, CaseIterable {
                case ach
            }

            public init(amount: Int, currency: String, description: String? = nil, expand: [String]? = nil, financialAccount: String, initiatingPaymentMethodDetails: InitiatingPaymentMethodDetails? = nil, network: Network) {
                self.amount = amount
                self.currency = currency
                self.description = description
                self.expand = expand
                self.financialAccount = financialAccount
                self.initiatingPaymentMethodDetails = initiatingPaymentMethodDetails
                self.network = network
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(amount, forKey: "amount")
                encoder.encode(currency, forKey: "currency")
                encoder.encode(description, forKey: "description")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(financialAccount, forKey: "financial_account")
                encoder.encode(initiatingPaymentMethodDetails, forKey: "initiating_payment_method_details")
                encoder.encode(network, forKey: "network")
                return encoder.items
            }
        }
    }
}
