// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.SubscriptionSchedules.WithSchedule {
    public var cancel: Cancel {
        Cancel(path: path + "/cancel")
    }

    public struct Cancel {
        /// Path: `/v1/subscription_schedules/{schedule}/cancel`
        public let path: String

        /// <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.SubscriptionSchedule> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostSubscriptionSchedulesScheduleCancel")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.
            public var isInvoiceNow: Bool?
            /// If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`.
            public var isProrate: Bool?

            public init(expand: [String]? = nil, isInvoiceNow: Bool? = nil, isProrate: Bool? = nil) {
                self.expand = expand
                self.isInvoiceNow = isInvoiceNow
                self.isProrate = isProrate
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(isInvoiceNow, forKey: "invoice_now")
                encoder.encode(isProrate, forKey: "prorate")
                return encoder.items
            }
        }
    }
}
