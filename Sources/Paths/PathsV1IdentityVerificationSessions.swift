// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Identity {
    public var verificationSessions: VerificationSessions {
        VerificationSessions(path: path + "/verification_sessions")
    }

    public struct VerificationSessions {
        /// Path: `/v1/identity/verification_sessions`
        public let path: String

        /// <p>Returns a list of VerificationSessions</p>
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "GetIdentityVerificationSessions")
        }

        /// GelatoVerificationSessionList
        public struct GetResponse: Decodable {
            public var data: [StripeKit.IdentityVerificationSession]
            /// True if this list has another page of items after this one that can be fetched.
            public var hasMore: Bool
            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public var object: Object
            /// The URL where this list can be accessed.
            public var url: String

            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public enum Object: String, Codable, CaseIterable {
                case list
            }

            public init(data: [StripeKit.IdentityVerificationSession], hasMore: Bool, object: Object, url: String) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.data = try values.decode([StripeKit.IdentityVerificationSession].self, forKey: "data")
                self.hasMore = try values.decode(Bool.self, forKey: "has_more")
                self.object = try values.decode(Object.self, forKey: "object")
                self.url = try values.decode(String.self, forKey: "url")
            }
        }

        public struct GetParameters {
            public var created: Created?
            public var endingBefore: String?
            public var expand: [String]?
            public var limit: Int?
            public var startingAfter: String?
            public var status: Status?

            public struct Created: Codable {
                /// Range_query_specs
                public var object: Object?
                public var int: Int?

                /// Range_query_specs
                public struct Object: Codable {
                    public var gt: Int?
                    public var gte: Int?
                    public var lt: Int?
                    public var lte: Int?

                    public init(gt: Int? = nil, gte: Int? = nil, lt: Int? = nil, lte: Int? = nil) {
                        self.gt = gt
                        self.gte = gte
                        self.lt = lt
                        self.lte = lte
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(gt, forKey: "gt")
                        encoder.encode(gte, forKey: "gte")
                        encoder.encode(lt, forKey: "lt")
                        encoder.encode(lte, forKey: "lte")
                        return encoder.items
                    }
                }

                public init(object: Object? = nil, int: Int? = nil) {
                    self.object = object
                    self.int = int
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(object, forKey: "object")
                    encoder.encode(int, forKey: "int")
                    return encoder.items
                }
            }

            public enum Status: String, Codable, CaseIterable {
                case canceled
                case processing
                case requiresInput = "requires_input"
                case verified
            }

            public init(created: Created? = nil, endingBefore: String? = nil, expand: [String]? = nil, limit: Int? = nil, startingAfter: String? = nil, status: Status? = nil) {
                self.created = created
                self.endingBefore = endingBefore
                self.expand = expand
                self.limit = limit
                self.startingAfter = startingAfter
                self.status = status
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(created, forKey: "created", isDeepObject: true)
                encoder.encode(endingBefore, forKey: "ending_before")
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(limit, forKey: "limit")
                encoder.encode(startingAfter, forKey: "starting_after")
                encoder.encode(status, forKey: "status")
                return encoder.items
            }
        }

        /// <p>Creates a VerificationSession object.</p>
        /// 
        /// <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>
        /// 
        /// <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>
        /// 
        /// <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a>.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.IdentityVerificationSession> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostIdentityVerificationSessions")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: [String: String]?
            /// Session_options_param
            ///
            /// A set of options for the session’s verification checks.
            public var options: Options?
            /// The URL that the user will be redirected to upon completing the verification flow.
            public var returnURL: String?
            /// The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
            public var type: `Type`

            /// Session_options_param
            ///
            /// A set of options for the session’s verification checks.
            public struct Options: Encodable {
                public var document: Document?

                public struct Document: Encodable {
                    /// Document_options
                    public var a: A?
                    public var b: B?

                    /// Document_options
                    public struct A: Encodable {
                        public var allowedTypes: [AllowedType]?
                        public var requireIDNumber: Bool?
                        public var requireLiveCapture: Bool?
                        public var requireMatchingSelfie: Bool?

                        public enum AllowedType: String, Codable, CaseIterable {
                            case drivingLicense = "driving_license"
                            case idCard = "id_card"
                            case passport
                        }

                        public init(allowedTypes: [AllowedType]? = nil, requireIDNumber: Bool? = nil, requireLiveCapture: Bool? = nil, requireMatchingSelfie: Bool? = nil) {
                            self.allowedTypes = allowedTypes
                            self.requireIDNumber = requireIDNumber
                            self.requireLiveCapture = requireLiveCapture
                            self.requireMatchingSelfie = requireMatchingSelfie
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(allowedTypes, forKey: "allowed_types")
                            encoder.encode(requireIDNumber, forKey: "require_id_number")
                            encoder.encode(requireLiveCapture, forKey: "require_live_capture")
                            encoder.encode(requireMatchingSelfie, forKey: "require_matching_selfie")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public init(document: Document? = nil) {
                    self.document = document
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(document, forKey: "document")
                    return encoder.items
                }
            }

            /// The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
            public enum `Type`: String, Codable, CaseIterable {
                case document
                case idNumber = "id_number"
            }

            public init(expand: [String]? = nil, metadata: [String: String]? = nil, options: Options? = nil, returnURL: String? = nil, type: `Type`) {
                self.expand = expand
                self.metadata = metadata
                self.options = options
                self.returnURL = returnURL
                self.type = type
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(options, forKey: "options")
                encoder.encode(returnURL, forKey: "return_url")
                encoder.encode(type, forKey: "type")
                return encoder.items
            }
        }
    }
}
