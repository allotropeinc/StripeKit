// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.ShippingRates {
    public func shippingRateToken(_ shippingRateToken: String) -> WithShippingRateToken {
        WithShippingRateToken(path: "\(path)/\(shippingRateToken)")
    }

    public struct WithShippingRateToken {
        /// Path: `/v1/shipping_rates/{shipping_rate_token}`
        public let path: String

        /// <p>Returns the shipping rate object with the given ID.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.ShippingRate> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetShippingRatesShippingRateToken")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates an existing shipping rate object.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.ShippingRate> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostShippingRatesShippingRateToken")
        }

        public struct PostRequest: Encodable {
            /// Whether the shipping rate can be used for new purchases. Defaults to `true`.
            public var isActive: Bool?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Fixed_amount_update
            ///
            /// Describes a fixed amount to charge for shipping. Must be present if type is `fixed_amount`.
            public var fixedAmount: FixedAmount?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?
            /// Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
            public var taxBehavior: TaxBehavior?

            /// Fixed_amount_update
            ///
            /// Describes a fixed amount to charge for shipping. Must be present if type is `fixed_amount`.
            public struct FixedAmount: Encodable {
                public var currencyOptions: [String: CurrencyOption]?

                /// Currency_option_update
                public struct CurrencyOption: Encodable {
                    public var amount: Int?
                    public var taxBehavior: TaxBehavior?

                    public enum TaxBehavior: String, Codable, CaseIterable {
                        case exclusive
                        case inclusive
                        case unspecified
                    }

                    public init(amount: Int? = nil, taxBehavior: TaxBehavior? = nil) {
                        self.amount = amount
                        self.taxBehavior = taxBehavior
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(amount, forKey: "amount")
                        encoder.encode(taxBehavior, forKey: "tax_behavior")
                        return encoder.items
                    }
                }

                public init(currencyOptions: [String: CurrencyOption]? = nil) {
                    self.currencyOptions = currencyOptions
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(currencyOptions, forKey: "currency_options")
                    return encoder.items
                }
            }

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
            public enum TaxBehavior: String, Codable, CaseIterable {
                case exclusive
                case inclusive
                case unspecified
            }

            public init(isActive: Bool? = nil, expand: [String]? = nil, fixedAmount: FixedAmount? = nil, metadata: Metadata? = nil, taxBehavior: TaxBehavior? = nil) {
                self.isActive = isActive
                self.expand = expand
                self.fixedAmount = fixedAmount
                self.metadata = metadata
                self.taxBehavior = taxBehavior
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isActive, forKey: "active")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fixedAmount, forKey: "fixed_amount")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(taxBehavior, forKey: "tax_behavior")
                return encoder.items
            }
        }
    }
}
