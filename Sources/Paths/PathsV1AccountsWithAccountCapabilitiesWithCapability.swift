// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Accounts.WithAccount.Capabilities {
    public func capability(_ capability: String) -> WithCapability {
        WithCapability(path: "\(path)/\(capability)")
    }

    public struct WithCapability {
        /// Path: `/v1/accounts/{account}/capabilities/{capability}`
        public let path: String

        /// <p>Retrieves information about the specified Account Capability.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.Capability> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetAccountsAccountCapabilitiesCapability")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates an existing Account Capability.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.Capability> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostAccountsAccountCapabilitiesCapability")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays.
            public var isRequested: Bool?

            public init(expand: [String]? = nil, isRequested: Bool? = nil) {
                self.expand = expand
                self.isRequested = isRequested
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(isRequested, forKey: "requested")
                return encoder.items
            }
        }
    }
}
