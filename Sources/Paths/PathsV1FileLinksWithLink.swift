// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.FileLinks {
    public func link(_ link: String) -> WithLink {
        WithLink(path: "\(path)/\(link)")
    }

    public struct WithLink {
        /// Path: `/v1/file_links/{link}`
        public let path: String

        /// <p>Retrieves the file link with the given ID.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.FileLink> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetFileLinksLink")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates an existing file link object. Expired links can no longer be updated.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.FileLink> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostFileLinksLink")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// A future timestamp after which the link will no longer be usable, or `now` to expire the link immediately.
            public var expiresAt: ExpiresAt?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?

            /// A future timestamp after which the link will no longer be usable, or `now` to expire the link immediately.
            public struct ExpiresAt: Encodable {
                public var object1: Object1?
                public var int: Int?
                public var object2: Object2?

                public enum Object1: String, Codable, CaseIterable {
                    case now
                }

                public enum Object2: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(object1: Object1? = nil, int: Int? = nil, object2: Object2? = nil) {
                    self.object1 = object1
                    self.int = int
                    self.object2 = object2
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(object1, forKey: "object1")
                    encoder.encode(int, forKey: "int")
                    encoder.encode(object2, forKey: "object2")
                    return encoder.items
                }
            }

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            public init(expand: [String]? = nil, expiresAt: ExpiresAt? = nil, metadata: Metadata? = nil) {
                self.expand = expand
                self.expiresAt = expiresAt
                self.metadata = metadata
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(expiresAt, forKey: "expires_at")
                encoder.encode(metadata, forKey: "metadata")
                return encoder.items
            }
        }
    }
}
