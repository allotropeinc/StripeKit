// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.TestHelpers.Customers.WithCustomer {
    public var fundCashBalance: FundCashBalance {
        FundCashBalance(path: path + "/fund_cash_balance")
    }

    public struct FundCashBalance {
        /// Path: `/v1/test_helpers/customers/{customer}/fund_cash_balance`
        public let path: String

        /// <p>Create an incoming testmode bank transfer</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.CustomerBalanceTransaction> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostTestHelpersCustomersCustomerFundCashBalance")
        }

        public struct PostRequest: Encodable {
            /// Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
            public var amount: Int
            /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
            public var currency: String
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            public var reference: String?

            public init(amount: Int, currency: String, expand: [String]? = nil, reference: String? = nil) {
                self.amount = amount
                self.currency = currency
                self.expand = expand
                self.reference = reference
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(amount, forKey: "amount")
                encoder.encode(currency, forKey: "currency")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(reference, forKey: "reference")
                return encoder.items
            }
        }
    }
}
