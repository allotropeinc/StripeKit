// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Subscriptions {
    public func subscriptionExposedID(_ subscriptionExposedID: String) -> WithSubscriptionExposedID {
        WithSubscriptionExposedID(path: "\(path)/\(subscriptionExposedID)")
    }

    public struct WithSubscriptionExposedID {
        /// Path: `/v1/subscriptions/{subscription_exposed_id}`
        public let path: String

        /// <p>Retrieves the subscription with the given ID.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.Subscription> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetSubscriptionsSubscriptionExposedId")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.Subscription> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostSubscriptionsSubscriptionExposedId")
        }

        public struct PostRequest: Encodable {
            /// A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
            public var addInvoiceItems: [AddInvoiceItem]?
            /// A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).
            public var applicationFeePercent: Double?
            /// Automatic_tax_config
            ///
            /// Automatic tax settings for this subscription. We recommend you only include this parameter when the existing value is being changed.
            public var automaticTax: AutomaticTax?
            /// Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time (in UTC). For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
            public var billingCycleAnchor: BillingCycleAnchor?
            /// Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds.
            public var billingThresholds: BillingThresholds?
            /// A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period.
            public var cancelAt: CancelAt?
            /// Boolean indicating whether this subscription should cancel at the end of the current period.
            public var isCancelAtPeriodEnd: Bool?
            /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
            public var collectionMethod: CollectionMethod?
            /// The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.
            public var coupon: String?
            /// Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.
            public var daysUntilDue: Int?
            /// ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
            public var defaultPaymentMethod: String?
            /// ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
            public var defaultSource: String?
            /// The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates.
            public var defaultTaxRates: DefaultTaxRates?
            /// The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces.
            public var description: String?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// A list of up to 20 subscription items, each with an attached price.
            public var items: [Item]?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?
            /// Indicates if a customer is on or off-session while an invoice payment is attempted.
            public var isOffSession: Bool?
            /// If specified, payment collection for this subscription will be paused.
            public var pauseCollection: PauseCollection?
            /// Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
            /// 
            /// Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscriptionâ€™s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
            /// 
            /// Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
            /// 
            /// Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
            public var paymentBehavior: PaymentBehavior?
            /// Payment_settings
            ///
            /// Payment settings to pass to invoices created by the subscription.
            public var paymentSettings: PaymentSettings?
            /// Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.
            public var pendingInvoiceItemInterval: PendingInvoiceItemInterval?
            /// The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription.
            public var promotionCode: String?
            /// Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes.
            public var prorationBehavior: ProrationBehavior?
            /// If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
            public var prorationDate: Int?
            /// If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. This will be unset if you POST an empty value.
            public var transferData: TransferData?
            /// Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`.
            public var trialEnd: TrialEnd?
            /// Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
            public var isTrialFromPlan: Bool?

            /// Add_invoice_item_entry
            public struct AddInvoiceItem: Encodable {
                public var price: String?
                /// One_time_price_data
                public var priceData: PriceData?
                public var quantity: Int?
                public var taxRates: TaxRates?

                /// One_time_price_data
                public struct PriceData: Encodable {
                    public var currency: String
                    public var product: String
                    public var taxBehavior: TaxBehavior?
                    public var unitAmount: Int?
                    public var unitAmountDecimal: String?

                    public enum TaxBehavior: String, Codable, CaseIterable {
                        case exclusive
                        case inclusive
                        case unspecified
                    }

                    public init(currency: String, product: String, taxBehavior: TaxBehavior? = nil, unitAmount: Int? = nil, unitAmountDecimal: String? = nil) {
                        self.currency = currency
                        self.product = product
                        self.taxBehavior = taxBehavior
                        self.unitAmount = unitAmount
                        self.unitAmountDecimal = unitAmountDecimal
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(currency, forKey: "currency")
                        encoder.encode(product, forKey: "product")
                        encoder.encode(taxBehavior, forKey: "tax_behavior")
                        encoder.encode(unitAmount, forKey: "unit_amount")
                        encoder.encode(unitAmountDecimal, forKey: "unit_amount_decimal")
                        return encoder.items
                    }
                }

                public struct TaxRates: Encodable {
                    public var strings: [String]?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(strings: [String]? = nil, object: Object? = nil) {
                        self.strings = strings
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(strings, forKey: "strings")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public init(price: String? = nil, priceData: PriceData? = nil, quantity: Int? = nil, taxRates: TaxRates? = nil) {
                    self.price = price
                    self.priceData = priceData
                    self.quantity = quantity
                    self.taxRates = taxRates
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(price, forKey: "price")
                    encoder.encode(priceData, forKey: "price_data")
                    encoder.encode(quantity, forKey: "quantity")
                    encoder.encode(taxRates, forKey: "tax_rates")
                    return encoder.items
                }
            }

            /// Automatic_tax_config
            ///
            /// Automatic tax settings for this subscription. We recommend you only include this parameter when the existing value is being changed.
            public struct AutomaticTax: Encodable {
                public var isEnabled: Bool

                public init(isEnabled: Bool) {
                    self.isEnabled = isEnabled
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(isEnabled, forKey: "enabled")
                    return encoder.items
                }
            }

            /// Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time (in UTC). For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
            public enum BillingCycleAnchor: String, Codable, CaseIterable {
                case now
                case unchanged
            }

            /// Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds.
            public struct BillingThresholds: Encodable {
                /// Billing_thresholds_param
                public var a: A?
                public var b: B?

                /// Billing_thresholds_param
                public struct A: Encodable {
                    public var amountGte: Int?
                    public var isResetBillingCycleAnchor: Bool?

                    public init(amountGte: Int? = nil, isResetBillingCycleAnchor: Bool? = nil) {
                        self.amountGte = amountGte
                        self.isResetBillingCycleAnchor = isResetBillingCycleAnchor
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(amountGte, forKey: "amount_gte")
                        encoder.encode(isResetBillingCycleAnchor, forKey: "reset_billing_cycle_anchor")
                        return encoder.items
                    }
                }

                public enum B: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(a: A? = nil, b: B? = nil) {
                    self.a = a
                    self.b = b
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(a, forKey: "a")
                    encoder.encode(b, forKey: "b")
                    return encoder.items
                }
            }

            /// A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period.
            public struct CancelAt: Encodable {
                public var int: Int?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(int: Int? = nil, object: Object? = nil) {
                    self.int = int
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(int, forKey: "int")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
            public enum CollectionMethod: String, Codable, CaseIterable {
                case chargeAutomatically = "charge_automatically"
                case sendInvoice = "send_invoice"
            }

            /// The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates.
            public struct DefaultTaxRates: Encodable {
                public var strings: [String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(strings: [String]? = nil, object: Object? = nil) {
                    self.strings = strings
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(strings, forKey: "strings")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// Subscription_item_update_params
            public struct Item: Encodable {
                public var billingThresholds: BillingThresholds?
                public var isClearUsage: Bool?
                public var isDeleted: Bool?
                public var id: String?
                public var metadata: Metadata?
                public var price: String?
                /// Recurring_price_data
                public var priceData: PriceData?
                public var quantity: Int?
                public var taxRates: TaxRates?

                public struct BillingThresholds: Encodable {
                    /// Item_billing_thresholds_param
                    public var a: A?
                    public var b: B?

                    /// Item_billing_thresholds_param
                    public struct A: Encodable {
                        public var usageGte: Int

                        public init(usageGte: Int) {
                            self.usageGte = usageGte
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(usageGte, forKey: "usage_gte")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public struct Metadata: Encodable {
                    public var stringString: [String: String]?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(stringString: [String: String]? = nil, object: Object? = nil) {
                        self.stringString = stringString
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(stringString, forKey: "stringString")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                /// Recurring_price_data
                public struct PriceData: Encodable {
                    public var currency: String
                    public var product: String
                    /// Recurring_adhoc
                    public var recurring: Recurring
                    public var taxBehavior: TaxBehavior?
                    public var unitAmount: Int?
                    public var unitAmountDecimal: String?

                    /// Recurring_adhoc
                    public struct Recurring: Encodable {
                        public var interval: Interval
                        public var intervalCount: Int?

                        public enum Interval: String, Codable, CaseIterable {
                            case day
                            case month
                            case week
                            case year
                        }

                        public init(interval: Interval, intervalCount: Int? = nil) {
                            self.interval = interval
                            self.intervalCount = intervalCount
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(interval, forKey: "interval")
                            encoder.encode(intervalCount, forKey: "interval_count")
                            return encoder.items
                        }
                    }

                    public enum TaxBehavior: String, Codable, CaseIterable {
                        case exclusive
                        case inclusive
                        case unspecified
                    }

                    public init(currency: String, product: String, recurring: Recurring, taxBehavior: TaxBehavior? = nil, unitAmount: Int? = nil, unitAmountDecimal: String? = nil) {
                        self.currency = currency
                        self.product = product
                        self.recurring = recurring
                        self.taxBehavior = taxBehavior
                        self.unitAmount = unitAmount
                        self.unitAmountDecimal = unitAmountDecimal
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(currency, forKey: "currency")
                        encoder.encode(product, forKey: "product")
                        encoder.encode(recurring, forKey: "recurring")
                        encoder.encode(taxBehavior, forKey: "tax_behavior")
                        encoder.encode(unitAmount, forKey: "unit_amount")
                        encoder.encode(unitAmountDecimal, forKey: "unit_amount_decimal")
                        return encoder.items
                    }
                }

                public struct TaxRates: Encodable {
                    public var strings: [String]?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(strings: [String]? = nil, object: Object? = nil) {
                        self.strings = strings
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(strings, forKey: "strings")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public init(billingThresholds: BillingThresholds? = nil, isClearUsage: Bool? = nil, isDeleted: Bool? = nil, id: String? = nil, metadata: Metadata? = nil, price: String? = nil, priceData: PriceData? = nil, quantity: Int? = nil, taxRates: TaxRates? = nil) {
                    self.billingThresholds = billingThresholds
                    self.isClearUsage = isClearUsage
                    self.isDeleted = isDeleted
                    self.id = id
                    self.metadata = metadata
                    self.price = price
                    self.priceData = priceData
                    self.quantity = quantity
                    self.taxRates = taxRates
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(billingThresholds, forKey: "billing_thresholds")
                    encoder.encode(isClearUsage, forKey: "clear_usage")
                    encoder.encode(isDeleted, forKey: "deleted")
                    encoder.encode(id, forKey: "id")
                    encoder.encode(metadata, forKey: "metadata")
                    encoder.encode(price, forKey: "price")
                    encoder.encode(priceData, forKey: "price_data")
                    encoder.encode(quantity, forKey: "quantity")
                    encoder.encode(taxRates, forKey: "tax_rates")
                    return encoder.items
                }
            }

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// If specified, payment collection for this subscription will be paused.
            public struct PauseCollection: Encodable {
                /// Pause_collection_param
                public var a: A?
                public var b: B?

                /// Pause_collection_param
                public struct A: Encodable {
                    public var behavior: Behavior
                    public var resumesAt: Int?

                    public enum Behavior: String, Codable, CaseIterable {
                        case keepAsDraft = "keep_as_draft"
                        case markUncollectible = "mark_uncollectible"
                        case void
                    }

                    public init(behavior: Behavior, resumesAt: Int? = nil) {
                        self.behavior = behavior
                        self.resumesAt = resumesAt
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(behavior, forKey: "behavior")
                        encoder.encode(resumesAt, forKey: "resumes_at")
                        return encoder.items
                    }
                }

                public enum B: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(a: A? = nil, b: B? = nil) {
                    self.a = a
                    self.b = b
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(a, forKey: "a")
                    encoder.encode(b, forKey: "b")
                    return encoder.items
                }
            }

            /// Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
            /// 
            /// Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscriptionâ€™s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
            /// 
            /// Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
            /// 
            /// Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
            public enum PaymentBehavior: String, Codable, CaseIterable {
                case allowIncomplete = "allow_incomplete"
                case defaultIncomplete = "default_incomplete"
                case errorIfIncomplete = "error_if_incomplete"
                case pendingIfIncomplete = "pending_if_incomplete"
            }

            /// Payment_settings
            ///
            /// Payment settings to pass to invoices created by the subscription.
            public struct PaymentSettings: Encodable {
                /// Payment_method_options
                public var paymentMethodOptions: PaymentMethodOptions?
                public var paymentMethodTypes: PaymentMethodTypes?
                public var saveDefaultPaymentMethod: SaveDefaultPaymentMethod?

                /// Payment_method_options
                public struct PaymentMethodOptions: Encodable {
                    public var acssDebit: AcssDebit?
                    public var bancontact: Bancontact?
                    public var card: Card?
                    public var customerBalance: CustomerBalance?
                    public var konbini: Konbini?
                    public var usBankAccount: UsBankAccount?

                    public struct AcssDebit: Encodable {
                        /// Invoice_payment_method_options_param
                        public var a: A?
                        public var b: B?

                        /// Invoice_payment_method_options_param
                        public struct A: Encodable {
                            /// Mandate_options_param
                            public var mandateOptions: MandateOptions?
                            public var verificationMethod: VerificationMethod?

                            /// Mandate_options_param
                            public struct MandateOptions: Encodable {
                                public var transactionType: TransactionType?

                                public enum TransactionType: String, Codable, CaseIterable {
                                    case business
                                    case personal
                                }

                                public init(transactionType: TransactionType? = nil) {
                                    self.transactionType = transactionType
                                }

                                public var asQuery: [(String, String?)] {
                                    let encoder = URLQueryEncoder()
                                    encoder.encode(transactionType, forKey: "transaction_type")
                                    return encoder.items
                                }
                            }

                            public enum VerificationMethod: String, Codable, CaseIterable {
                                case automatic
                                case instant
                                case microdeposits
                            }

                            public init(mandateOptions: MandateOptions? = nil, verificationMethod: VerificationMethod? = nil) {
                                self.mandateOptions = mandateOptions
                                self.verificationMethod = verificationMethod
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(mandateOptions, forKey: "mandate_options")
                                encoder.encode(verificationMethod, forKey: "verification_method")
                                return encoder.items
                            }
                        }

                        public enum B: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(a: A? = nil, b: B? = nil) {
                            self.a = a
                            self.b = b
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(a, forKey: "a")
                            encoder.encode(b, forKey: "b")
                            return encoder.items
                        }
                    }

                    public struct Bancontact: Encodable {
                        /// Invoice_payment_method_options_param
                        public var a: A?
                        public var b: B?

                        /// Invoice_payment_method_options_param
                        public struct A: Encodable {
                            public var preferredLanguage: PreferredLanguage?

                            public enum PreferredLanguage: String, Codable, CaseIterable {
                                case de
                                case en
                                case fr
                                case nl
                            }

                            public init(preferredLanguage: PreferredLanguage? = nil) {
                                self.preferredLanguage = preferredLanguage
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(preferredLanguage, forKey: "preferred_language")
                                return encoder.items
                            }
                        }

                        public enum B: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(a: A? = nil, b: B? = nil) {
                            self.a = a
                            self.b = b
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(a, forKey: "a")
                            encoder.encode(b, forKey: "b")
                            return encoder.items
                        }
                    }

                    public struct Card: Encodable {
                        /// Subscription_payment_method_options_param
                        public var a: A?
                        public var b: B?

                        /// Subscription_payment_method_options_param
                        public struct A: Encodable {
                            /// Mandate_options_param
                            public var mandateOptions: MandateOptions?
                            public var requestThreeDSecure: RequestThreeDSecure?

                            /// Mandate_options_param
                            public struct MandateOptions: Encodable {
                                public var amount: Int?
                                public var amountType: AmountType?
                                public var description: String?

                                public enum AmountType: String, Codable, CaseIterable {
                                    case fixed
                                    case maximum
                                }

                                public init(amount: Int? = nil, amountType: AmountType? = nil, description: String? = nil) {
                                    self.amount = amount
                                    self.amountType = amountType
                                    self.description = description
                                }

                                public var asQuery: [(String, String?)] {
                                    let encoder = URLQueryEncoder()
                                    encoder.encode(amount, forKey: "amount")
                                    encoder.encode(amountType, forKey: "amount_type")
                                    encoder.encode(description, forKey: "description")
                                    return encoder.items
                                }
                            }

                            public enum RequestThreeDSecure: String, Codable, CaseIterable {
                                case any
                                case automatic
                            }

                            public init(mandateOptions: MandateOptions? = nil, requestThreeDSecure: RequestThreeDSecure? = nil) {
                                self.mandateOptions = mandateOptions
                                self.requestThreeDSecure = requestThreeDSecure
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(mandateOptions, forKey: "mandate_options")
                                encoder.encode(requestThreeDSecure, forKey: "request_three_d_secure")
                                return encoder.items
                            }
                        }

                        public enum B: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(a: A? = nil, b: B? = nil) {
                            self.a = a
                            self.b = b
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(a, forKey: "a")
                            encoder.encode(b, forKey: "b")
                            return encoder.items
                        }
                    }

                    public struct CustomerBalance: Encodable {
                        /// Invoice_payment_method_options_param
                        public var a: A?
                        public var b: B?

                        /// Invoice_payment_method_options_param
                        public struct A: Encodable {
                            /// Bank_transfer_param
                            public var bankTransfer: BankTransfer?
                            public var fundingType: String?

                            /// Bank_transfer_param
                            public struct BankTransfer: Encodable {
                                /// Eu_bank_transfer_param
                                public var euBankTransfer: EuBankTransfer?
                                public var type: String?

                                /// Eu_bank_transfer_param
                                public struct EuBankTransfer: Encodable {
                                    public var country: String

                                    public init(country: String) {
                                        self.country = country
                                    }

                                    public var asQuery: [(String, String?)] {
                                        let encoder = URLQueryEncoder()
                                        encoder.encode(country, forKey: "country")
                                        return encoder.items
                                    }
                                }

                                public init(euBankTransfer: EuBankTransfer? = nil, type: String? = nil) {
                                    self.euBankTransfer = euBankTransfer
                                    self.type = type
                                }

                                public var asQuery: [(String, String?)] {
                                    let encoder = URLQueryEncoder()
                                    encoder.encode(euBankTransfer, forKey: "eu_bank_transfer")
                                    encoder.encode(type, forKey: "type")
                                    return encoder.items
                                }
                            }

                            public init(bankTransfer: BankTransfer? = nil, fundingType: String? = nil) {
                                self.bankTransfer = bankTransfer
                                self.fundingType = fundingType
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(bankTransfer, forKey: "bank_transfer")
                                encoder.encode(fundingType, forKey: "funding_type")
                                return encoder.items
                            }
                        }

                        public enum B: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(a: A? = nil, b: B? = nil) {
                            self.a = a
                            self.b = b
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(a, forKey: "a")
                            encoder.encode(b, forKey: "b")
                            return encoder.items
                        }
                    }

                    public struct Konbini: Encodable {
                        /// Invoice_payment_method_options_param
                        public var object: [String: AnyJSON]?
                        public var object2: Object2?

                        public enum Object2: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(object: [String: AnyJSON]? = nil, object2: Object2? = nil) {
                            self.object = object
                            self.object2 = object2
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(object, forKey: "object")
                            encoder.encode(object2, forKey: "object2")
                            return encoder.items
                        }
                    }

                    public struct UsBankAccount: Encodable {
                        /// Invoice_payment_method_options_param
                        public var a: A?
                        public var b: B?

                        /// Invoice_payment_method_options_param
                        public struct A: Encodable {
                            /// Invoice_linked_account_options_param
                            public var financialConnections: FinancialConnections?
                            public var verificationMethod: VerificationMethod?

                            /// Invoice_linked_account_options_param
                            public struct FinancialConnections: Encodable {
                                public var permissions: [Permission]?

                                public enum Permission: String, Codable, CaseIterable {
                                    case balances
                                    case ownership
                                    case paymentMethod = "payment_method"
                                    case transactions
                                }

                                public init(permissions: [Permission]? = nil) {
                                    self.permissions = permissions
                                }

                                public var asQuery: [(String, String?)] {
                                    let encoder = URLQueryEncoder()
                                    encoder.encode(permissions, forKey: "permissions")
                                    return encoder.items
                                }
                            }

                            public enum VerificationMethod: String, Codable, CaseIterable {
                                case automatic
                                case instant
                                case microdeposits
                            }

                            public init(financialConnections: FinancialConnections? = nil, verificationMethod: VerificationMethod? = nil) {
                                self.financialConnections = financialConnections
                                self.verificationMethod = verificationMethod
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(financialConnections, forKey: "financial_connections")
                                encoder.encode(verificationMethod, forKey: "verification_method")
                                return encoder.items
                            }
                        }

                        public enum B: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(a: A? = nil, b: B? = nil) {
                            self.a = a
                            self.b = b
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(a, forKey: "a")
                            encoder.encode(b, forKey: "b")
                            return encoder.items
                        }
                    }

                    public init(acssDebit: AcssDebit? = nil, bancontact: Bancontact? = nil, card: Card? = nil, customerBalance: CustomerBalance? = nil, konbini: Konbini? = nil, usBankAccount: UsBankAccount? = nil) {
                        self.acssDebit = acssDebit
                        self.bancontact = bancontact
                        self.card = card
                        self.customerBalance = customerBalance
                        self.konbini = konbini
                        self.usBankAccount = usBankAccount
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(acssDebit, forKey: "acss_debit")
                        encoder.encode(bancontact, forKey: "bancontact")
                        encoder.encode(card, forKey: "card")
                        encoder.encode(customerBalance, forKey: "customer_balance")
                        encoder.encode(konbini, forKey: "konbini")
                        encoder.encode(usBankAccount, forKey: "us_bank_account")
                        return encoder.items
                    }
                }

                public struct PaymentMethodTypes: Encodable {
                    public var placeholderItems: [PlaceholderItem]?
                    public var object: Object?

                    public enum PlaceholderItem: String, Codable, CaseIterable {
                        case achCreditTransfer = "ach_credit_transfer"
                        case achDebit = "ach_debit"
                        case acssDebit = "acss_debit"
                        case auBecsDebit = "au_becs_debit"
                        case bacsDebit = "bacs_debit"
                        case bancontact
                        case boleto
                        case card
                        case customerBalance = "customer_balance"
                        case fpx
                        case giropay
                        case grabpay
                        case ideal
                        case konbini
                        case link
                        case paynow
                        case promptpay
                        case sepaDebit = "sepa_debit"
                        case sofort
                        case usBankAccount = "us_bank_account"
                        case wechatPay = "wechat_pay"
                    }

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(placeholderItems: [PlaceholderItem]? = nil, object: Object? = nil) {
                        self.placeholderItems = placeholderItems
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(placeholderItems, forKey: "placeholderItems")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public enum SaveDefaultPaymentMethod: String, Codable, CaseIterable {
                    case off
                    case onSubscription = "on_subscription"
                }

                public init(paymentMethodOptions: PaymentMethodOptions? = nil, paymentMethodTypes: PaymentMethodTypes? = nil, saveDefaultPaymentMethod: SaveDefaultPaymentMethod? = nil) {
                    self.paymentMethodOptions = paymentMethodOptions
                    self.paymentMethodTypes = paymentMethodTypes
                    self.saveDefaultPaymentMethod = saveDefaultPaymentMethod
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(paymentMethodOptions, forKey: "payment_method_options")
                    encoder.encode(paymentMethodTypes, forKey: "payment_method_types")
                    encoder.encode(saveDefaultPaymentMethod, forKey: "save_default_payment_method")
                    return encoder.items
                }
            }

            /// Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.
            public struct PendingInvoiceItemInterval: Encodable {
                /// Pending_invoice_item_interval_params
                public var a: A?
                public var b: B?

                /// Pending_invoice_item_interval_params
                public struct A: Encodable {
                    public var interval: Interval
                    public var intervalCount: Int?

                    public enum Interval: String, Codable, CaseIterable {
                        case day
                        case month
                        case week
                        case year
                    }

                    public init(interval: Interval, intervalCount: Int? = nil) {
                        self.interval = interval
                        self.intervalCount = intervalCount
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(interval, forKey: "interval")
                        encoder.encode(intervalCount, forKey: "interval_count")
                        return encoder.items
                    }
                }

                public enum B: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(a: A? = nil, b: B? = nil) {
                    self.a = a
                    self.b = b
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(a, forKey: "a")
                    encoder.encode(b, forKey: "b")
                    return encoder.items
                }
            }

            /// Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes.
            public enum ProrationBehavior: String, Codable, CaseIterable {
                case alwaysInvoice = "always_invoice"
                case createProrations = "create_prorations"
                case `none`
            }

            /// If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. This will be unset if you POST an empty value.
            public struct TransferData: Encodable {
                /// Transfer_data_specs
                public var a: A?
                public var b: B?

                /// Transfer_data_specs
                public struct A: Encodable {
                    public var amountPercent: Double?
                    public var destination: String

                    public init(amountPercent: Double? = nil, destination: String) {
                        self.amountPercent = amountPercent
                        self.destination = destination
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(amountPercent, forKey: "amount_percent")
                        encoder.encode(destination, forKey: "destination")
                        return encoder.items
                    }
                }

                public enum B: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(a: A? = nil, b: B? = nil) {
                    self.a = a
                    self.b = b
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(a, forKey: "a")
                    encoder.encode(b, forKey: "b")
                    return encoder.items
                }
            }

            /// Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`.
            public struct TrialEnd: Encodable {
                public var object: Object?
                public var int: Int?

                public enum Object: String, Codable, CaseIterable {
                    case now
                }

                public init(object: Object? = nil, int: Int? = nil) {
                    self.object = object
                    self.int = int
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(object, forKey: "object")
                    encoder.encode(int, forKey: "int")
                    return encoder.items
                }
            }

            public init(addInvoiceItems: [AddInvoiceItem]? = nil, applicationFeePercent: Double? = nil, automaticTax: AutomaticTax? = nil, billingCycleAnchor: BillingCycleAnchor? = nil, billingThresholds: BillingThresholds? = nil, cancelAt: CancelAt? = nil, isCancelAtPeriodEnd: Bool? = nil, collectionMethod: CollectionMethod? = nil, coupon: String? = nil, daysUntilDue: Int? = nil, defaultPaymentMethod: String? = nil, defaultSource: String? = nil, defaultTaxRates: DefaultTaxRates? = nil, description: String? = nil, expand: [String]? = nil, items: [Item]? = nil, metadata: Metadata? = nil, isOffSession: Bool? = nil, pauseCollection: PauseCollection? = nil, paymentBehavior: PaymentBehavior? = nil, paymentSettings: PaymentSettings? = nil, pendingInvoiceItemInterval: PendingInvoiceItemInterval? = nil, promotionCode: String? = nil, prorationBehavior: ProrationBehavior? = nil, prorationDate: Int? = nil, transferData: TransferData? = nil, trialEnd: TrialEnd? = nil, isTrialFromPlan: Bool? = nil) {
                self.addInvoiceItems = addInvoiceItems
                self.applicationFeePercent = applicationFeePercent
                self.automaticTax = automaticTax
                self.billingCycleAnchor = billingCycleAnchor
                self.billingThresholds = billingThresholds
                self.cancelAt = cancelAt
                self.isCancelAtPeriodEnd = isCancelAtPeriodEnd
                self.collectionMethod = collectionMethod
                self.coupon = coupon
                self.daysUntilDue = daysUntilDue
                self.defaultPaymentMethod = defaultPaymentMethod
                self.defaultSource = defaultSource
                self.defaultTaxRates = defaultTaxRates
                self.description = description
                self.expand = expand
                self.items = items
                self.metadata = metadata
                self.isOffSession = isOffSession
                self.pauseCollection = pauseCollection
                self.paymentBehavior = paymentBehavior
                self.paymentSettings = paymentSettings
                self.pendingInvoiceItemInterval = pendingInvoiceItemInterval
                self.promotionCode = promotionCode
                self.prorationBehavior = prorationBehavior
                self.prorationDate = prorationDate
                self.transferData = transferData
                self.trialEnd = trialEnd
                self.isTrialFromPlan = isTrialFromPlan
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(addInvoiceItems, forKey: "add_invoice_items")
                encoder.encode(applicationFeePercent, forKey: "application_fee_percent")
                encoder.encode(automaticTax, forKey: "automatic_tax")
                encoder.encode(billingCycleAnchor, forKey: "billing_cycle_anchor")
                encoder.encode(billingThresholds, forKey: "billing_thresholds")
                encoder.encode(cancelAt, forKey: "cancel_at")
                encoder.encode(isCancelAtPeriodEnd, forKey: "cancel_at_period_end")
                encoder.encode(collectionMethod, forKey: "collection_method")
                encoder.encode(coupon, forKey: "coupon")
                encoder.encode(daysUntilDue, forKey: "days_until_due")
                encoder.encode(defaultPaymentMethod, forKey: "default_payment_method")
                encoder.encode(defaultSource, forKey: "default_source")
                encoder.encode(defaultTaxRates, forKey: "default_tax_rates")
                encoder.encode(description, forKey: "description")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(items, forKey: "items")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(isOffSession, forKey: "off_session")
                encoder.encode(pauseCollection, forKey: "pause_collection")
                encoder.encode(paymentBehavior, forKey: "payment_behavior")
                encoder.encode(paymentSettings, forKey: "payment_settings")
                encoder.encode(pendingInvoiceItemInterval, forKey: "pending_invoice_item_interval")
                encoder.encode(promotionCode, forKey: "promotion_code")
                encoder.encode(prorationBehavior, forKey: "proration_behavior")
                encoder.encode(prorationDate, forKey: "proration_date")
                encoder.encode(transferData, forKey: "transfer_data")
                encoder.encode(trialEnd, forKey: "trial_end")
                encoder.encode(isTrialFromPlan, forKey: "trial_from_plan")
                return encoder.items
            }
        }

        /// <p>Cancels a customerâ€™s subscription immediately. The customer will not be charged again for the subscription.</p>
        /// 
        /// <p>Note, however, that any pending invoice items that youâ€™ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If youâ€™ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
        /// 
        /// <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
        public func delete(_ body: DeleteRequest? = nil) -> Request<StripeKit.Subscription> {
            Request(method: "DELETE", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "DeleteSubscriptionsSubscriptionExposedId")
        }

        public struct DeleteRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items.
            public var isInvoiceNow: Bool?
            /// Will generate a proration invoice item that credits remaining unused time until the subscription period end.
            public var isProrate: Bool?

            public init(expand: [String]? = nil, isInvoiceNow: Bool? = nil, isProrate: Bool? = nil) {
                self.expand = expand
                self.isInvoiceNow = isInvoiceNow
                self.isProrate = isProrate
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(isInvoiceNow, forKey: "invoice_now")
                encoder.encode(isProrate, forKey: "prorate")
                return encoder.items
            }
        }
    }
}
