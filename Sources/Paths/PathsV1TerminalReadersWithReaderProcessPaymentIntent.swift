// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Terminal.Readers.WithReader {
    public var processPaymentIntent: ProcessPaymentIntent {
        ProcessPaymentIntent(path: path + "/process_payment_intent")
    }

    public struct ProcessPaymentIntent {
        /// Path: `/v1/terminal/readers/{reader}/process_payment_intent`
        public let path: String

        /// <p>Initiates a payment flow on a Reader.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.TerminalReader> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostTerminalReadersReaderProcessPaymentIntent")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// PaymentIntent ID
            public var paymentIntent: String
            /// Process_config
            ///
            /// Configuration overrides
            public var processConfig: ProcessConfig?

            /// Process_config
            ///
            /// Configuration overrides
            public struct ProcessConfig: Encodable {
                public var isSkipTipping: Bool?

                public init(isSkipTipping: Bool? = nil) {
                    self.isSkipTipping = isSkipTipping
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(isSkipTipping, forKey: "skip_tipping")
                    return encoder.items
                }
            }

            public init(expand: [String]? = nil, paymentIntent: String, processConfig: ProcessConfig? = nil) {
                self.expand = expand
                self.paymentIntent = paymentIntent
                self.processConfig = processConfig
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(paymentIntent, forKey: "payment_intent")
                encoder.encode(processConfig, forKey: "process_config")
                return encoder.items
            }
        }
    }
}
