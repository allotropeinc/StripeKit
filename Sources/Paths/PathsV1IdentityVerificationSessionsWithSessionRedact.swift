// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Identity.VerificationSessions.WithSession {
    public var redact: Redact {
        Redact(path: path + "/redact")
    }

    public struct Redact {
        /// Path: `/v1/identity/verification_sessions/{session}/redact`
        public let path: String

        /// <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
        /// the VerificationSession and all objects related to it, including VerificationReports, Events,
        /// request logs, etc.</p>
        /// 
        /// <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
        /// <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
        /// state will automatically cancel it.</p>
        /// 
        /// <p>The redaction process may take up to four days. When the redaction process is in progress, the
        /// VerificationSessionâ€™s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
        /// finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
        /// will be emitted.</p>
        /// 
        /// <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
        /// fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar
        /// placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
        /// used for any purpose.</p>
        /// 
        /// <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.IdentityVerificationSession> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostIdentityVerificationSessionsSessionRedact")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?

            public init(expand: [String]? = nil) {
                self.expand = expand
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                return encoder.items
            }
        }
    }
}
