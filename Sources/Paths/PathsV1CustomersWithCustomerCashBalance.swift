// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Customers.WithCustomer {
    public var cashBalance: CashBalance {
        CashBalance(path: path + "/cash_balance")
    }

    public struct CashBalance {
        /// Path: `/v1/customers/{customer}/cash_balance`
        public let path: String

        /// <p>Retrieves a customer’s cash balance.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.CashBalance> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetCustomersCustomerCashBalance")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Changes the settings on a customer’s cash balance.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.CashBalance> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostCustomersCustomerCashBalance")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Balance_settings_param
            ///
            /// A hash of settings for this cash balance.
            public var settings: Settings?

            /// Balance_settings_param
            ///
            /// A hash of settings for this cash balance.
            public struct Settings: Encodable {
                public var reconciliationMode: ReconciliationMode?

                public enum ReconciliationMode: String, Codable, CaseIterable {
                    case automatic
                    case manual
                }

                public init(reconciliationMode: ReconciliationMode? = nil) {
                    self.reconciliationMode = reconciliationMode
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(reconciliationMode, forKey: "reconciliation_mode")
                    return encoder.items
                }
            }

            public init(expand: [String]? = nil, settings: Settings? = nil) {
                self.expand = expand
                self.settings = settings
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(settings, forKey: "settings")
                return encoder.items
            }
        }
    }
}
