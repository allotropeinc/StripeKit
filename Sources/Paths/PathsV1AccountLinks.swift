// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var accountLinks: AccountLinks {
        AccountLinks(path: "/v1/account_links")
    }

    public struct AccountLinks {
        /// Path: `/v1/account_links`
        public let path: String

        /// <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.AccountLink> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostAccountLinks")
        }

        public struct PostRequest: Encodable {
            /// The identifier of the account to create an account link for.
            public var account: String
            /// Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`.
            public var collect: Collect?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link's URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.
            public var refreshURL: String?
            /// The URL that the user will be redirected to upon leaving or completing the linked flow.
            public var returnURL: String?
            /// The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.
            public var type: `Type`

            /// Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`.
            public enum Collect: String, Codable, CaseIterable {
                case currentlyDue = "currently_due"
                case eventuallyDue = "eventually_due"
            }

            /// The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.
            public enum `Type`: String, Codable, CaseIterable {
                case accountOnboarding = "account_onboarding"
                case accountUpdate = "account_update"
            }

            public init(account: String, collect: Collect? = nil, expand: [String]? = nil, refreshURL: String? = nil, returnURL: String? = nil, type: `Type`) {
                self.account = account
                self.collect = collect
                self.expand = expand
                self.refreshURL = refreshURL
                self.returnURL = returnURL
                self.type = type
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(account, forKey: "account")
                encoder.encode(collect, forKey: "collect")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(refreshURL, forKey: "refresh_url")
                encoder.encode(returnURL, forKey: "return_url")
                encoder.encode(type, forKey: "type")
                return encoder.items
            }
        }
    }
}
