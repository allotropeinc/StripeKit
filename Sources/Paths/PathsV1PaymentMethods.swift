// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var paymentMethods: PaymentMethods {
        PaymentMethods(path: "/v1/payment_methods")
    }

    public struct PaymentMethods {
        /// Path: `/v1/payment_methods`
        public let path: String

        /// <p>Returns a list of PaymentMethods attached to the StripeAccount. For listing a customer’s payment methods, you should use <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a></p>
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters.asQuery, id: "GetPaymentMethods")
        }

        /// PaymentFlowsPaymentMethodList
        public struct GetResponse: Decodable {
            public var data: [StripeKit.PaymentMethod]
            /// True if this list has another page of items after this one that can be fetched.
            public var hasMore: Bool
            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public var object: Object
            /// The URL where this list can be accessed.
            public var url: String

            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public enum Object: String, Codable, CaseIterable {
                case list
            }

            public init(data: [StripeKit.PaymentMethod], hasMore: Bool, object: Object, url: String) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.data = try values.decode([StripeKit.PaymentMethod].self, forKey: "data")
                self.hasMore = try values.decode(Bool.self, forKey: "has_more")
                self.object = try values.decode(Object.self, forKey: "object")
                self.url = try values.decode(String.self, forKey: "url")
            }
        }

        public struct GetParameters {
            public var customer: String?
            public var endingBefore: String?
            public var expand: [String]?
            public var limit: Int?
            public var startingAfter: String?
            public var type: `Type`

            public enum `Type`: String, Codable, CaseIterable {
                case acssDebit = "acss_debit"
                case affirm
                case afterpayClearpay = "afterpay_clearpay"
                case alipay
                case auBecsDebit = "au_becs_debit"
                case bacsDebit = "bacs_debit"
                case bancontact
                case blik
                case boleto
                case card
                case customerBalance = "customer_balance"
                case eps
                case fpx
                case giropay
                case grabpay
                case ideal
                case klarna
                case konbini
                case link
                case oxxo
                case p24
                case paynow
                case promptpay
                case sepaDebit = "sepa_debit"
                case sofort
                case usBankAccount = "us_bank_account"
                case wechatPay = "wechat_pay"
            }

            public init(customer: String? = nil, endingBefore: String? = nil, expand: [String]? = nil, limit: Int? = nil, startingAfter: String? = nil, type: `Type`) {
                self.customer = customer
                self.endingBefore = endingBefore
                self.expand = expand
                self.limit = limit
                self.startingAfter = startingAfter
                self.type = type
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(customer, forKey: "customer")
                encoder.encode(endingBefore, forKey: "ending_before")
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(limit, forKey: "limit")
                encoder.encode(startingAfter, forKey: "starting_after")
                encoder.encode(type, forKey: "type")
                return encoder.items
            }
        }

        /// <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>
        /// 
        /// <p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.PaymentMethod> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostPaymentMethods")
        }

        public struct PostRequest: Encodable {
            /// Payment_method_param
            ///
            /// If this is an `acss_debit` PaymentMethod, this hash contains details about the ACSS Debit payment method.
            public var acssDebit: AcssDebit?
            /// Param
            ///
            /// If this is an `affirm` PaymentMethod, this hash contains details about the Affirm payment method.
            public var affirm: [String: AnyJSON]?
            /// Param
            ///
            /// If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method.
            public var afterpayClearpay: [String: AnyJSON]?
            /// Param
            ///
            /// If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method.
            public var alipay: [String: AnyJSON]?
            /// Param
            ///
            /// If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account.
            public var auBecsDebit: AuBecsDebit?
            /// Param
            ///
            /// If this is a `bacs_debit` PaymentMethod, this hash contains details about the Bacs Direct Debit bank account.
            public var bacsDebit: BacsDebit?
            /// Param
            ///
            /// If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method.
            public var bancontact: [String: AnyJSON]?
            /// Billing_details_inner_params
            ///
            /// Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
            public var billingDetails: BillingDetails?
            /// Param
            ///
            /// If this is a `blik` PaymentMethod, this hash contains details about the BLIK payment method.
            public var blik: [String: AnyJSON]?
            /// Param
            ///
            /// If this is a `boleto` PaymentMethod, this hash contains details about the Boleto payment method.
            public var boleto: Boleto?
            /// If this is a `card` PaymentMethod, this hash contains the user's card details. For backwards compatibility, you can alternatively provide a Stripe token (e.g., for Apple Pay, Amex Express Checkout, or legacy Checkout) into the card hash with format `card: {token: "tok_visa"}`. When providing a card number, you must meet the requirements for [PCI compliance](https://stripe.com/docs/security#validating-pci-compliance). We strongly recommend using Stripe.js instead of interacting with this API directly.
            public var card: Card?
            /// The `Customer` to whom the original PaymentMethod is attached.
            public var customer: String?
            /// Param
            ///
            /// If this is a `customer_balance` PaymentMethod, this hash contains details about the CustomerBalance payment method.
            public var customerBalance: [String: AnyJSON]?
            /// Param
            ///
            /// If this is an `eps` PaymentMethod, this hash contains details about the EPS payment method.
            public var eps: Eps?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Param
            ///
            /// If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method.
            public var fpx: Fpx?
            /// Param
            ///
            /// If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method.
            public var giropay: [String: AnyJSON]?
            /// Param
            ///
            /// If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method.
            public var grabpay: [String: AnyJSON]?
            /// Param
            ///
            /// If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method.
            public var ideal: Ideal?
            /// Param
            ///
            /// If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method.
            public var interacPresent: [String: AnyJSON]?
            /// Param
            ///
            /// If this is a `klarna` PaymentMethod, this hash contains details about the Klarna payment method.
            public var klarna: Klarna?
            /// Param
            ///
            /// If this is a `konbini` PaymentMethod, this hash contains details about the Konbini payment method.
            public var konbini: [String: AnyJSON]?
            /// Param
            ///
            /// If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
            public var link: [String: AnyJSON]?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: [String: String]?
            /// Param
            ///
            /// If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method.
            public var oxxo: [String: AnyJSON]?
            /// Param
            ///
            /// If this is a `p24` PaymentMethod, this hash contains details about the P24 payment method.
            public var p24: P24?
            /// The PaymentMethod to share.
            public var paymentMethod: String?
            /// Param
            ///
            /// If this is a `paynow` PaymentMethod, this hash contains details about the PayNow payment method.
            public var paynow: [String: AnyJSON]?
            /// Param
            ///
            /// If this is a `promptpay` PaymentMethod, this hash contains details about the PromptPay payment method.
            public var promptpay: [String: AnyJSON]?
            /// Radar_options
            ///
            /// Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
            public var radarOptions: RadarOptions?
            /// Param
            ///
            /// If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account.
            public var sepaDebit: SepaDebit?
            /// Param
            ///
            /// If this is a `sofort` PaymentMethod, this hash contains details about the SOFORT payment method.
            public var sofort: Sofort?
            /// The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
            public var type: `Type`?
            /// Payment_method_param
            ///
            /// If this is an `us_bank_account` PaymentMethod, this hash contains details about the US bank account payment method.
            public var usBankAccount: UsBankAccount?
            /// Param
            ///
            /// If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method.
            public var wechatPay: [String: AnyJSON]?

            /// Payment_method_param
            ///
            /// If this is an `acss_debit` PaymentMethod, this hash contains details about the ACSS Debit payment method.
            public struct AcssDebit: Encodable {
                public var accountNumber: String
                public var institutionNumber: String
                public var transitNumber: String

                public init(accountNumber: String, institutionNumber: String, transitNumber: String) {
                    self.accountNumber = accountNumber
                    self.institutionNumber = institutionNumber
                    self.transitNumber = transitNumber
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(accountNumber, forKey: "account_number")
                    encoder.encode(institutionNumber, forKey: "institution_number")
                    encoder.encode(transitNumber, forKey: "transit_number")
                    return encoder.items
                }
            }

            /// Param
            ///
            /// If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account.
            public struct AuBecsDebit: Encodable {
                public var accountNumber: String
                public var bsbNumber: String

                public init(accountNumber: String, bsbNumber: String) {
                    self.accountNumber = accountNumber
                    self.bsbNumber = bsbNumber
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(accountNumber, forKey: "account_number")
                    encoder.encode(bsbNumber, forKey: "bsb_number")
                    return encoder.items
                }
            }

            /// Param
            ///
            /// If this is a `bacs_debit` PaymentMethod, this hash contains details about the Bacs Direct Debit bank account.
            public struct BacsDebit: Encodable {
                public var accountNumber: String?
                public var sortCode: String?

                public init(accountNumber: String? = nil, sortCode: String? = nil) {
                    self.accountNumber = accountNumber
                    self.sortCode = sortCode
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(accountNumber, forKey: "account_number")
                    encoder.encode(sortCode, forKey: "sort_code")
                    return encoder.items
                }
            }

            /// Billing_details_inner_params
            ///
            /// Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
            public struct BillingDetails: Encodable {
                public var address: Address?
                public var email: Email?
                public var name: String?
                public var phone: String?

                public struct Address: Encodable {
                    /// Billing_details_address
                    public var a: A?
                    public var b: B?

                    /// Billing_details_address
                    public struct A: Encodable {
                        public var city: String?
                        public var country: String?
                        public var line1: String?
                        public var line2: String?
                        public var postalCode: String?
                        public var state: String?

                        public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                            self.city = city
                            self.country = country
                            self.line1 = line1
                            self.line2 = line2
                            self.postalCode = postalCode
                            self.state = state
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(city, forKey: "city")
                            encoder.encode(country, forKey: "country")
                            encoder.encode(line1, forKey: "line1")
                            encoder.encode(line2, forKey: "line2")
                            encoder.encode(postalCode, forKey: "postal_code")
                            encoder.encode(state, forKey: "state")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public struct Email: Encodable {
                    public var string: String?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(string: String? = nil, object: Object? = nil) {
                        self.string = string
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(string, forKey: "string")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public init(address: Address? = nil, email: Email? = nil, name: String? = nil, phone: String? = nil) {
                    self.address = address
                    self.email = email
                    self.name = name
                    self.phone = phone
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(address, forKey: "address")
                    encoder.encode(email, forKey: "email")
                    encoder.encode(name, forKey: "name")
                    encoder.encode(phone, forKey: "phone")
                    return encoder.items
                }
            }

            /// Param
            ///
            /// If this is a `boleto` PaymentMethod, this hash contains details about the Boleto payment method.
            public struct Boleto: Encodable {
                public var taxID: String

                public init(taxID: String) {
                    self.taxID = taxID
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(taxID, forKey: "tax_id")
                    return encoder.items
                }
            }

            /// If this is a `card` PaymentMethod, this hash contains the user's card details. For backwards compatibility, you can alternatively provide a Stripe token (e.g., for Apple Pay, Amex Express Checkout, or legacy Checkout) into the card hash with format `card: {token: "tok_visa"}`. When providing a card number, you must meet the requirements for [PCI compliance](https://stripe.com/docs/security#validating-pci-compliance). We strongly recommend using Stripe.js instead of interacting with this API directly.
            public struct Card: Encodable {
                /// Card_details_params
                public var a: A?
                /// Token_params
                public var b: B?

                /// Card_details_params
                public struct A: Encodable {
                    public var cvc: String?
                    public var expMonth: Int
                    public var expYear: Int
                    public var number: String

                    public init(cvc: String? = nil, expMonth: Int, expYear: Int, number: String) {
                        self.cvc = cvc
                        self.expMonth = expMonth
                        self.expYear = expYear
                        self.number = number
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(cvc, forKey: "cvc")
                        encoder.encode(expMonth, forKey: "exp_month")
                        encoder.encode(expYear, forKey: "exp_year")
                        encoder.encode(number, forKey: "number")
                        return encoder.items
                    }
                }

                /// Token_params
                public struct B: Encodable {
                    public var token: String

                    public init(token: String) {
                        self.token = token
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(token, forKey: "token")
                        return encoder.items
                    }
                }

                public init(a: A? = nil, b: B? = nil) {
                    self.a = a
                    self.b = b
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(a, forKey: "a")
                    encoder.encode(b, forKey: "b")
                    return encoder.items
                }
            }

            /// Param
            ///
            /// If this is an `eps` PaymentMethod, this hash contains details about the EPS payment method.
            public struct Eps: Encodable {
                public var bank: Bank?

                public enum Bank: String, Codable, CaseIterable {
                    case arzteUndApothekerBank = "arzte_und_apotheker_bank"
                    case austrianAnadiBankAg = "austrian_anadi_bank_ag"
                    case bankAustria = "bank_austria"
                    case bankhausCarlSpangler = "bankhaus_carl_spangler"
                    case bankhausSchelhammerUndSchatteraAg = "bankhaus_schelhammer_und_schattera_ag"
                    case bawagPskAg = "bawag_psk_ag"
                    case bksBankAg = "bks_bank_ag"
                    case brullKallmusBankAg = "brull_kallmus_bank_ag"
                    case btvVierLanderBank = "btv_vier_lander_bank"
                    case capitalBankGraweGruppeAg = "capital_bank_grawe_gruppe_ag"
                    case dolomitenbank
                    case easybankAg = "easybank_ag"
                    case ersteBankUndSparkassen = "erste_bank_und_sparkassen"
                    case hypoAlpeadriabankInternationalAg = "hypo_alpeadriabank_international_ag"
                    case hypoBankBurgenlandAktiengesellschaft = "hypo_bank_burgenland_aktiengesellschaft"
                    case hypoNoeLbFurNiederosterreichUWien = "hypo_noe_lb_fur_niederosterreich_u_wien"
                    case hypoOberosterreichSalzburgSteiermark = "hypo_oberosterreich_salzburg_steiermark"
                    case hypoTirolBankAg = "hypo_tirol_bank_ag"
                    case hypoVorarlbergBankAg = "hypo_vorarlberg_bank_ag"
                    case marchfelderBank = "marchfelder_bank"
                    case oberbankAg = "oberbank_ag"
                    case raiffeisenBankengruppeOsterreich = "raiffeisen_bankengruppe_osterreich"
                    case schoellerbankAg = "schoellerbank_ag"
                    case spardaBankWien = "sparda_bank_wien"
                    case volksbankGruppe = "volksbank_gruppe"
                    case volkskreditbankAg = "volkskreditbank_ag"
                    case vrBankBraunau = "vr_bank_braunau"
                }

                public init(bank: Bank? = nil) {
                    self.bank = bank
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(bank, forKey: "bank")
                    return encoder.items
                }
            }

            /// Param
            ///
            /// If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method.
            public struct Fpx: Encodable {
                public var bank: Bank

                public enum Bank: String, Codable, CaseIterable {
                    case affinBank = "affin_bank"
                    case agrobank
                    case allianceBank = "alliance_bank"
                    case ambank
                    case bankIslam = "bank_islam"
                    case bankMuamalat = "bank_muamalat"
                    case bankRakyat = "bank_rakyat"
                    case bsn
                    case cimb
                    case deutscheBank = "deutsche_bank"
                    case hongLeongBank = "hong_leong_bank"
                    case hsbc
                    case kfh
                    case maybank2e
                    case maybank2u
                    case ocbc
                    case pbEnterprise = "pb_enterprise"
                    case publicBank = "public_bank"
                    case rhb
                    case standardChartered = "standard_chartered"
                    case uob
                }

                public init(bank: Bank) {
                    self.bank = bank
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(bank, forKey: "bank")
                    return encoder.items
                }
            }

            /// Param
            ///
            /// If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method.
            public struct Ideal: Encodable {
                public var bank: Bank?

                public enum Bank: String, Codable, CaseIterable {
                    case abnAmro = "abn_amro"
                    case asnBank = "asn_bank"
                    case bunq
                    case handelsbanken
                    case ing
                    case knab
                    case moneyou
                    case rabobank
                    case regiobank
                    case revolut
                    case snsBank = "sns_bank"
                    case triodosBank = "triodos_bank"
                    case vanLanschot = "van_lanschot"
                }

                public init(bank: Bank? = nil) {
                    self.bank = bank
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(bank, forKey: "bank")
                    return encoder.items
                }
            }

            /// Param
            ///
            /// If this is a `klarna` PaymentMethod, this hash contains details about the Klarna payment method.
            public struct Klarna: Encodable {
                /// Date_of_birth
                public var dob: Dob?

                /// Date_of_birth
                public struct Dob: Encodable {
                    public var day: Int
                    public var month: Int
                    public var year: Int

                    public init(day: Int, month: Int, year: Int) {
                        self.day = day
                        self.month = month
                        self.year = year
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(day, forKey: "day")
                        encoder.encode(month, forKey: "month")
                        encoder.encode(year, forKey: "year")
                        return encoder.items
                    }
                }

                public init(dob: Dob? = nil) {
                    self.dob = dob
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(dob, forKey: "dob")
                    return encoder.items
                }
            }

            /// Param
            ///
            /// If this is a `p24` PaymentMethod, this hash contains details about the P24 payment method.
            public struct P24: Encodable {
                public var bank: Bank?

                public enum Bank: String, Codable, CaseIterable {
                    case aliorBank = "alior_bank"
                    case bankMillennium = "bank_millennium"
                    case bankNowyBfgSa = "bank_nowy_bfg_sa"
                    case bankPekaoSa = "bank_pekao_sa"
                    case bankiSpbdzielcze = "banki_spbdzielcze"
                    case blik
                    case bnpParibas = "bnp_paribas"
                    case boz
                    case citiHandlowy = "citi_handlowy"
                    case creditAgricole = "credit_agricole"
                    case envelobank
                    case etransferPocztowy24 = "etransfer_pocztowy24"
                    case getinBank = "getin_bank"
                    case ideabank
                    case ing
                    case inteligo
                    case mbankMtransfer = "mbank_mtransfer"
                    case nestPrzelew = "nest_przelew"
                    case noblePay = "noble_pay"
                    case pbacZIpko = "pbac_z_ipko"
                    case plusBank = "plus_bank"
                    case santanderPrzelew24 = "santander_przelew24"
                    case tmobileUsbugiBankowe = "tmobile_usbugi_bankowe"
                    case toyotaBank = "toyota_bank"
                    case volkswagenBank = "volkswagen_bank"
                }

                public init(bank: Bank? = nil) {
                    self.bank = bank
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(bank, forKey: "bank")
                    return encoder.items
                }
            }

            /// Radar_options
            ///
            /// Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
            public struct RadarOptions: Encodable {
                public var session: String?

                public init(session: String? = nil) {
                    self.session = session
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(session, forKey: "session")
                    return encoder.items
                }
            }

            /// Param
            ///
            /// If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account.
            public struct SepaDebit: Encodable {
                public var iban: String

                public init(iban: String) {
                    self.iban = iban
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(iban, forKey: "iban")
                    return encoder.items
                }
            }

            /// Param
            ///
            /// If this is a `sofort` PaymentMethod, this hash contains details about the SOFORT payment method.
            public struct Sofort: Encodable {
                public var country: Country

                public enum Country: String, Codable, CaseIterable {
                    case at = "AT"
                    case be = "BE"
                    case de = "DE"
                    case es = "ES"
                    case it = "IT"
                    case nl = "NL"
                }

                public init(country: Country) {
                    self.country = country
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(country, forKey: "country")
                    return encoder.items
                }
            }

            /// The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
            public enum `Type`: String, Codable, CaseIterable {
                case acssDebit = "acss_debit"
                case affirm
                case afterpayClearpay = "afterpay_clearpay"
                case alipay
                case auBecsDebit = "au_becs_debit"
                case bacsDebit = "bacs_debit"
                case bancontact
                case blik
                case boleto
                case card
                case customerBalance = "customer_balance"
                case eps
                case fpx
                case giropay
                case grabpay
                case ideal
                case klarna
                case konbini
                case link
                case oxxo
                case p24
                case paynow
                case promptpay
                case sepaDebit = "sepa_debit"
                case sofort
                case usBankAccount = "us_bank_account"
                case wechatPay = "wechat_pay"
            }

            /// Payment_method_param
            ///
            /// If this is an `us_bank_account` PaymentMethod, this hash contains details about the US bank account payment method.
            public struct UsBankAccount: Encodable {
                public var accountHolderType: AccountHolderType?
                public var accountNumber: String?
                public var accountType: AccountType?
                public var financialConnectionsAccount: String?
                public var routingNumber: String?

                public enum AccountHolderType: String, Codable, CaseIterable {
                    case company
                    case individual
                }

                public enum AccountType: String, Codable, CaseIterable {
                    case checking
                    case savings
                }

                public init(accountHolderType: AccountHolderType? = nil, accountNumber: String? = nil, accountType: AccountType? = nil, financialConnectionsAccount: String? = nil, routingNumber: String? = nil) {
                    self.accountHolderType = accountHolderType
                    self.accountNumber = accountNumber
                    self.accountType = accountType
                    self.financialConnectionsAccount = financialConnectionsAccount
                    self.routingNumber = routingNumber
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(accountHolderType, forKey: "account_holder_type")
                    encoder.encode(accountNumber, forKey: "account_number")
                    encoder.encode(accountType, forKey: "account_type")
                    encoder.encode(financialConnectionsAccount, forKey: "financial_connections_account")
                    encoder.encode(routingNumber, forKey: "routing_number")
                    return encoder.items
                }
            }

            public init(acssDebit: AcssDebit? = nil, affirm: [String: AnyJSON]? = nil, afterpayClearpay: [String: AnyJSON]? = nil, alipay: [String: AnyJSON]? = nil, auBecsDebit: AuBecsDebit? = nil, bacsDebit: BacsDebit? = nil, bancontact: [String: AnyJSON]? = nil, billingDetails: BillingDetails? = nil, blik: [String: AnyJSON]? = nil, boleto: Boleto? = nil, card: Card? = nil, customer: String? = nil, customerBalance: [String: AnyJSON]? = nil, eps: Eps? = nil, expand: [String]? = nil, fpx: Fpx? = nil, giropay: [String: AnyJSON]? = nil, grabpay: [String: AnyJSON]? = nil, ideal: Ideal? = nil, interacPresent: [String: AnyJSON]? = nil, klarna: Klarna? = nil, konbini: [String: AnyJSON]? = nil, link: [String: AnyJSON]? = nil, metadata: [String: String]? = nil, oxxo: [String: AnyJSON]? = nil, p24: P24? = nil, paymentMethod: String? = nil, paynow: [String: AnyJSON]? = nil, promptpay: [String: AnyJSON]? = nil, radarOptions: RadarOptions? = nil, sepaDebit: SepaDebit? = nil, sofort: Sofort? = nil, type: `Type`? = nil, usBankAccount: UsBankAccount? = nil, wechatPay: [String: AnyJSON]? = nil) {
                self.acssDebit = acssDebit
                self.affirm = affirm
                self.afterpayClearpay = afterpayClearpay
                self.alipay = alipay
                self.auBecsDebit = auBecsDebit
                self.bacsDebit = bacsDebit
                self.bancontact = bancontact
                self.billingDetails = billingDetails
                self.blik = blik
                self.boleto = boleto
                self.card = card
                self.customer = customer
                self.customerBalance = customerBalance
                self.eps = eps
                self.expand = expand
                self.fpx = fpx
                self.giropay = giropay
                self.grabpay = grabpay
                self.ideal = ideal
                self.interacPresent = interacPresent
                self.klarna = klarna
                self.konbini = konbini
                self.link = link
                self.metadata = metadata
                self.oxxo = oxxo
                self.p24 = p24
                self.paymentMethod = paymentMethod
                self.paynow = paynow
                self.promptpay = promptpay
                self.radarOptions = radarOptions
                self.sepaDebit = sepaDebit
                self.sofort = sofort
                self.type = type
                self.usBankAccount = usBankAccount
                self.wechatPay = wechatPay
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(acssDebit, forKey: "acss_debit")
                encoder.encode(affirm, forKey: "affirm")
                encoder.encode(afterpayClearpay, forKey: "afterpay_clearpay")
                encoder.encode(alipay, forKey: "alipay")
                encoder.encode(auBecsDebit, forKey: "au_becs_debit")
                encoder.encode(bacsDebit, forKey: "bacs_debit")
                encoder.encode(bancontact, forKey: "bancontact")
                encoder.encode(billingDetails, forKey: "billing_details")
                encoder.encode(blik, forKey: "blik")
                encoder.encode(boleto, forKey: "boleto")
                encoder.encode(card, forKey: "card")
                encoder.encode(customer, forKey: "customer")
                encoder.encode(customerBalance, forKey: "customer_balance")
                encoder.encode(eps, forKey: "eps")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fpx, forKey: "fpx")
                encoder.encode(giropay, forKey: "giropay")
                encoder.encode(grabpay, forKey: "grabpay")
                encoder.encode(ideal, forKey: "ideal")
                encoder.encode(interacPresent, forKey: "interac_present")
                encoder.encode(klarna, forKey: "klarna")
                encoder.encode(konbini, forKey: "konbini")
                encoder.encode(link, forKey: "link")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(oxxo, forKey: "oxxo")
                encoder.encode(p24, forKey: "p24")
                encoder.encode(paymentMethod, forKey: "payment_method")
                encoder.encode(paynow, forKey: "paynow")
                encoder.encode(promptpay, forKey: "promptpay")
                encoder.encode(radarOptions, forKey: "radar_options")
                encoder.encode(sepaDebit, forKey: "sepa_debit")
                encoder.encode(sofort, forKey: "sofort")
                encoder.encode(type, forKey: "type")
                encoder.encode(usBankAccount, forKey: "us_bank_account")
                encoder.encode(wechatPay, forKey: "wechat_pay")
                return encoder.items
            }
        }
    }
}
