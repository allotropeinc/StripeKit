// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.SubscriptionSchedules.WithSchedule {
    public var release: Release {
        Release(path: path + "/release")
    }

    public struct Release {
        /// Path: `/v1/subscription_schedules/{schedule}/release`
        public let path: String

        /// <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscriptionâ€™s ID to the <code>released_subscription</code> property.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.SubscriptionSchedule> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostSubscriptionSchedulesScheduleRelease")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Keep any cancellation on the subscription that the schedule has set
            public var isPreserveCancelDate: Bool?

            public init(expand: [String]? = nil, isPreserveCancelDate: Bool? = nil) {
                self.expand = expand
                self.isPreserveCancelDate = isPreserveCancelDate
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(isPreserveCancelDate, forKey: "preserve_cancel_date")
                return encoder.items
            }
        }
    }
}
