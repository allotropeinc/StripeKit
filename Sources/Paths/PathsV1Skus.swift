// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var skus: Skus {
        Skus(path: "/v1/skus")
    }

    public struct Skus {
        /// Path: `/v1/skus`
        public let path: String

        /// <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p>
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "GetSkus")
        }

        /// ProductsMethodSKUList
        public struct GetResponse: Decodable {
            public var data: [StripeKit.Sku]
            /// True if this list has another page of items after this one that can be fetched.
            public var hasMore: Bool
            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public var object: Object
            /// The URL where this list can be accessed.
            public var url: String

            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public enum Object: String, Codable, CaseIterable {
                case list
            }

            public init(data: [StripeKit.Sku], hasMore: Bool, object: Object, url: String) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.data = try values.decode([StripeKit.Sku].self, forKey: "data")
                self.hasMore = try values.decode(Bool.self, forKey: "has_more")
                self.object = try values.decode(Object.self, forKey: "object")
                self.url = try values.decode(String.self, forKey: "url")
            }
        }

        public struct GetParameters {
            public var isActive: Bool?
            public var attributes: Attributes?
            public var endingBefore: String?
            public var expand: [String]?
            public var ids: [String]?
            public var isInStock: Bool?
            public var limit: Int?
            public var product: String?
            public var startingAfter: String?

            public typealias Attributes = [String: String]

            public init(isActive: Bool? = nil, attributes: Attributes? = nil, endingBefore: String? = nil, expand: [String]? = nil, ids: [String]? = nil, isInStock: Bool? = nil, limit: Int? = nil, product: String? = nil, startingAfter: String? = nil) {
                self.isActive = isActive
                self.attributes = attributes
                self.endingBefore = endingBefore
                self.expand = expand
                self.ids = ids
                self.isInStock = isInStock
                self.limit = limit
                self.product = product
                self.startingAfter = startingAfter
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isActive, forKey: "active")
                encoder.encode(attributes, forKey: "attributes", isDeepObject: true)
                encoder.encode(endingBefore, forKey: "ending_before")
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(ids, forKey: "ids", isDeepObject: true)
                encoder.encode(isInStock, forKey: "in_stock")
                encoder.encode(limit, forKey: "limit")
                encoder.encode(product, forKey: "product")
                encoder.encode(startingAfter, forKey: "starting_after")
                return encoder.items
            }
        }

        /// <p>Creates a new SKU associated with a product.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.Sku> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostSkus")
        }

        public struct PostRequest: Encodable {
            /// Whether the SKU is available for purchase. Default to `true`.
            public var isActive: Bool?
            /// A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`.
            public var attributes: [String: String]?
            /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
            public var currency: String
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated.
            public var id: String?
            /// The URL of an image for this SKU, meant to be displayable to the customer.
            public var image: String?
            /// Inventory_create_specs
            ///
            /// Description of the SKU's inventory.
            public var inventory: Inventory
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: [String: String]?
            /// Package_dimensions_specs
            ///
            /// The dimensions of this SKU for shipping purposes.
            public var packageDimensions: PackageDimensions?
            /// The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge Â¥100, Japanese Yen being a zero-decimal currency).
            public var price: Int
            /// The ID of the product this SKU is associated with. Must be a product with type `good`.
            public var product: String

            /// Inventory_create_specs
            ///
            /// Description of the SKU's inventory.
            public struct Inventory: Encodable {
                public var quantity: Int?
                public var type: `Type`
                public var value: Value?

                public enum `Type`: String, Codable, CaseIterable {
                    case bucket
                    case finite
                    case infinite
                }

                public enum Value: String, Codable, CaseIterable {
                    case empty = ""
                    case inStock = "in_stock"
                    case limited
                    case outOfStock = "out_of_stock"
                }

                public init(quantity: Int? = nil, type: `Type`, value: Value? = nil) {
                    self.quantity = quantity
                    self.type = type
                    self.value = value
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(quantity, forKey: "quantity")
                    encoder.encode(type, forKey: "type")
                    encoder.encode(value, forKey: "value")
                    return encoder.items
                }
            }

            /// Package_dimensions_specs
            ///
            /// The dimensions of this SKU for shipping purposes.
            public struct PackageDimensions: Encodable {
                public var height: Double
                public var length: Double
                public var weight: Double
                public var width: Double

                public init(height: Double, length: Double, weight: Double, width: Double) {
                    self.height = height
                    self.length = length
                    self.weight = weight
                    self.width = width
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(height, forKey: "height")
                    encoder.encode(length, forKey: "length")
                    encoder.encode(weight, forKey: "weight")
                    encoder.encode(width, forKey: "width")
                    return encoder.items
                }
            }

            public init(isActive: Bool? = nil, attributes: [String: String]? = nil, currency: String, expand: [String]? = nil, id: String? = nil, image: String? = nil, inventory: Inventory, metadata: [String: String]? = nil, packageDimensions: PackageDimensions? = nil, price: Int, product: String) {
                self.isActive = isActive
                self.attributes = attributes
                self.currency = currency
                self.expand = expand
                self.id = id
                self.image = image
                self.inventory = inventory
                self.metadata = metadata
                self.packageDimensions = packageDimensions
                self.price = price
                self.product = product
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isActive, forKey: "active")
                encoder.encode(attributes, forKey: "attributes")
                encoder.encode(currency, forKey: "currency")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(id, forKey: "id")
                encoder.encode(image, forKey: "image")
                encoder.encode(inventory, forKey: "inventory")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(packageDimensions, forKey: "package_dimensions")
                encoder.encode(price, forKey: "price")
                encoder.encode(product, forKey: "product")
                return encoder.items
            }
        }
    }
}
