// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Terminal {
    public var connectionTokens: ConnectionTokens {
        ConnectionTokens(path: path + "/connection_tokens")
    }

    public struct ConnectionTokens {
        /// Path: `/v1/terminal/connection_tokens`
        public let path: String

        /// <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.TerminalConnectionToken> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostTerminalConnectionTokens")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/fleet/locations#connection-tokens).
            public var location: String?

            public init(expand: [String]? = nil, location: String? = nil) {
                self.expand = expand
                self.location = location
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(location, forKey: "location")
                return encoder.items
            }
        }
    }
}
