// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Terminal.Locations {
    public func location(_ location: String) -> WithLocation {
        WithLocation(path: "\(path)/\(location)")
    }

    public struct WithLocation {
        /// Path: `/v1/terminal/locations/{location}`
        public let path: String

        /// <p>Retrieves a <code>Location</code> object.</p>
        public func get(expand: [String]? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetTerminalLocationsLocation")
        }

        public struct GetResponse: Decodable {
            /// TerminalLocationLocation
            ///
            /// A Location represents a grouping of readers.
            /// 
            /// Related guide: [Fleet Management](https://stripe.com/docs/terminal/fleet/locations).
            public var terminalLocation: StripeKit.TerminalLocation?
            /// TerminalLocationDeletedLocation
            public var deletedTerminalLocation: StripeKit.DeletedTerminalLocation?

            public init(terminalLocation: StripeKit.TerminalLocation? = nil, deletedTerminalLocation: StripeKit.DeletedTerminalLocation? = nil) {
                self.terminalLocation = terminalLocation
                self.deletedTerminalLocation = deletedTerminalLocation
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.terminalLocation = try? container.decode(StripeKit.TerminalLocation.self)
                self.deletedTerminalLocation = try? container.decode(StripeKit.DeletedTerminalLocation.self)
            }
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
        public func post(_ body: PostRequest? = nil) -> Request<PostResponse> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostTerminalLocationsLocation")
        }

        public struct PostResponse: Decodable {
            /// TerminalLocationLocation
            ///
            /// A Location represents a grouping of readers.
            /// 
            /// Related guide: [Fleet Management](https://stripe.com/docs/terminal/fleet/locations).
            public var terminalLocation: StripeKit.TerminalLocation?
            /// TerminalLocationDeletedLocation
            public var deletedTerminalLocation: StripeKit.DeletedTerminalLocation?

            public init(terminalLocation: StripeKit.TerminalLocation? = nil, deletedTerminalLocation: StripeKit.DeletedTerminalLocation? = nil) {
                self.terminalLocation = terminalLocation
                self.deletedTerminalLocation = deletedTerminalLocation
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.terminalLocation = try? container.decode(StripeKit.TerminalLocation.self)
                self.deletedTerminalLocation = try? container.decode(StripeKit.DeletedTerminalLocation.self)
            }
        }

        public struct PostRequest: Encodable {
            /// Optional_fields_address
            ///
            /// The full address of the location.
            public var address: Address?
            /// The ID of a configuration that will be used to customize all readers in this location.
            public var configurationOverrides: String?
            /// A name for the location.
            public var displayName: String?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?

            /// Optional_fields_address
            ///
            /// The full address of the location.
            public struct Address: Encodable {
                public var city: String?
                public var country: String?
                public var line1: String?
                public var line2: String?
                public var postalCode: String?
                public var state: String?

                public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                    self.city = city
                    self.country = country
                    self.line1 = line1
                    self.line2 = line2
                    self.postalCode = postalCode
                    self.state = state
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(city, forKey: "city")
                    encoder.encode(country, forKey: "country")
                    encoder.encode(line1, forKey: "line1")
                    encoder.encode(line2, forKey: "line2")
                    encoder.encode(postalCode, forKey: "postal_code")
                    encoder.encode(state, forKey: "state")
                    return encoder.items
                }
            }

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            public init(address: Address? = nil, configurationOverrides: String? = nil, displayName: String? = nil, expand: [String]? = nil, metadata: Metadata? = nil) {
                self.address = address
                self.configurationOverrides = configurationOverrides
                self.displayName = displayName
                self.expand = expand
                self.metadata = metadata
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(address, forKey: "address")
                encoder.encode(configurationOverrides, forKey: "configuration_overrides")
                encoder.encode(displayName, forKey: "display_name")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(metadata, forKey: "metadata")
                return encoder.items
            }
        }

        /// <p>Deletes a <code>Location</code> object.</p>
        public var delete: Request<StripeKit.DeletedTerminalLocation> {
            Request(method: "DELETE", url: path, id: "DeleteTerminalLocationsLocation")
        }
    }
}
