// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Treasury.FinancialAccounts {
    public func financialAccount(_ financialAccount: String) -> WithFinancialAccount {
        WithFinancialAccount(path: "\(path)/\(financialAccount)")
    }

    public struct WithFinancialAccount {
        /// Path: `/v1/treasury/financial_accounts/{financial_account}`
        public let path: String

        /// <p>Retrieves the details of a FinancialAccount.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.TreasuryFinancialAccount> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetTreasuryFinancialAccountsFinancialAccount")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates the details of a FinancialAccount.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.TreasuryFinancialAccount> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostTreasuryFinancialAccountsFinancialAccount")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Feature_access
            ///
            /// Encodes whether a FinancialAccount has access to a particular feature, with a status enum and associated `status_details`. Stripe or the platform may control features via the requested field.
            public var features: Features?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: [String: String]?
            /// Platform_restrictions
            ///
            /// The set of functionalities that the platform can restrict on the FinancialAccount.
            public var platformRestrictions: PlatformRestrictions?

            /// Feature_access
            ///
            /// Encodes whether a FinancialAccount has access to a particular feature, with a status enum and associated `status_details`. Stripe or the platform may control features via the requested field.
            public struct Features: Encodable {
                /// Access
                public var cardIssuing: CardIssuing?
                /// Access
                public var depositInsurance: DepositInsurance?
                /// Financial_addresses
                public var financialAddresses: FinancialAddresses?
                /// Inbound_transfers
                public var inboundTransfers: InboundTransfers?
                /// Access
                public var intraStripeFlows: IntraStripeFlows?
                /// Outbound_payments
                public var outboundPayments: OutboundPayments?
                /// Outbound_transfers
                public var outboundTransfers: OutboundTransfers?

                /// Access
                public struct CardIssuing: Encodable {
                    public var isRequested: Bool

                    public init(isRequested: Bool) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Access
                public struct DepositInsurance: Encodable {
                    public var isRequested: Bool

                    public init(isRequested: Bool) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Financial_addresses
                public struct FinancialAddresses: Encodable {
                    /// Access
                    public var aba: Aba?

                    /// Access
                    public struct Aba: Encodable {
                        public var isRequested: Bool

                        public init(isRequested: Bool) {
                            self.isRequested = isRequested
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isRequested, forKey: "requested")
                            return encoder.items
                        }
                    }

                    public init(aba: Aba? = nil) {
                        self.aba = aba
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(aba, forKey: "aba")
                        return encoder.items
                    }
                }

                /// Inbound_transfers
                public struct InboundTransfers: Encodable {
                    /// Access
                    public var ach: Ach?

                    /// Access
                    public struct Ach: Encodable {
                        public var isRequested: Bool

                        public init(isRequested: Bool) {
                            self.isRequested = isRequested
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isRequested, forKey: "requested")
                            return encoder.items
                        }
                    }

                    public init(ach: Ach? = nil) {
                        self.ach = ach
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(ach, forKey: "ach")
                        return encoder.items
                    }
                }

                /// Access
                public struct IntraStripeFlows: Encodable {
                    public var isRequested: Bool

                    public init(isRequested: Bool) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Outbound_payments
                public struct OutboundPayments: Encodable {
                    /// Access
                    public var ach: Ach?
                    /// Access
                    public var usDomesticWire: UsDomesticWire?

                    /// Access
                    public struct Ach: Encodable {
                        public var isRequested: Bool

                        public init(isRequested: Bool) {
                            self.isRequested = isRequested
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isRequested, forKey: "requested")
                            return encoder.items
                        }
                    }

                    /// Access
                    public struct UsDomesticWire: Encodable {
                        public var isRequested: Bool

                        public init(isRequested: Bool) {
                            self.isRequested = isRequested
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isRequested, forKey: "requested")
                            return encoder.items
                        }
                    }

                    public init(ach: Ach? = nil, usDomesticWire: UsDomesticWire? = nil) {
                        self.ach = ach
                        self.usDomesticWire = usDomesticWire
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(ach, forKey: "ach")
                        encoder.encode(usDomesticWire, forKey: "us_domestic_wire")
                        return encoder.items
                    }
                }

                /// Outbound_transfers
                public struct OutboundTransfers: Encodable {
                    /// Access
                    public var ach: Ach?
                    /// Access
                    public var usDomesticWire: UsDomesticWire?

                    /// Access
                    public struct Ach: Encodable {
                        public var isRequested: Bool

                        public init(isRequested: Bool) {
                            self.isRequested = isRequested
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isRequested, forKey: "requested")
                            return encoder.items
                        }
                    }

                    /// Access
                    public struct UsDomesticWire: Encodable {
                        public var isRequested: Bool

                        public init(isRequested: Bool) {
                            self.isRequested = isRequested
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isRequested, forKey: "requested")
                            return encoder.items
                        }
                    }

                    public init(ach: Ach? = nil, usDomesticWire: UsDomesticWire? = nil) {
                        self.ach = ach
                        self.usDomesticWire = usDomesticWire
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(ach, forKey: "ach")
                        encoder.encode(usDomesticWire, forKey: "us_domestic_wire")
                        return encoder.items
                    }
                }

                public init(cardIssuing: CardIssuing? = nil, depositInsurance: DepositInsurance? = nil, financialAddresses: FinancialAddresses? = nil, inboundTransfers: InboundTransfers? = nil, intraStripeFlows: IntraStripeFlows? = nil, outboundPayments: OutboundPayments? = nil, outboundTransfers: OutboundTransfers? = nil) {
                    self.cardIssuing = cardIssuing
                    self.depositInsurance = depositInsurance
                    self.financialAddresses = financialAddresses
                    self.inboundTransfers = inboundTransfers
                    self.intraStripeFlows = intraStripeFlows
                    self.outboundPayments = outboundPayments
                    self.outboundTransfers = outboundTransfers
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(cardIssuing, forKey: "card_issuing")
                    encoder.encode(depositInsurance, forKey: "deposit_insurance")
                    encoder.encode(financialAddresses, forKey: "financial_addresses")
                    encoder.encode(inboundTransfers, forKey: "inbound_transfers")
                    encoder.encode(intraStripeFlows, forKey: "intra_stripe_flows")
                    encoder.encode(outboundPayments, forKey: "outbound_payments")
                    encoder.encode(outboundTransfers, forKey: "outbound_transfers")
                    return encoder.items
                }
            }

            /// Platform_restrictions
            ///
            /// The set of functionalities that the platform can restrict on the FinancialAccount.
            public struct PlatformRestrictions: Encodable {
                public var inboundFlows: InboundFlows?
                public var outboundFlows: OutboundFlows?

                public enum InboundFlows: String, Codable, CaseIterable {
                    case restricted
                    case unrestricted
                }

                public enum OutboundFlows: String, Codable, CaseIterable {
                    case restricted
                    case unrestricted
                }

                public init(inboundFlows: InboundFlows? = nil, outboundFlows: OutboundFlows? = nil) {
                    self.inboundFlows = inboundFlows
                    self.outboundFlows = outboundFlows
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(inboundFlows, forKey: "inbound_flows")
                    encoder.encode(outboundFlows, forKey: "outbound_flows")
                    return encoder.items
                }
            }

            public init(expand: [String]? = nil, features: Features? = nil, metadata: [String: String]? = nil, platformRestrictions: PlatformRestrictions? = nil) {
                self.expand = expand
                self.features = features
                self.metadata = metadata
                self.platformRestrictions = platformRestrictions
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(features, forKey: "features")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(platformRestrictions, forKey: "platform_restrictions")
                return encoder.items
            }
        }
    }
}
