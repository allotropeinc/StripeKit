// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Issuing.Disputes {
    public func dispute(_ dispute: String) -> WithDispute {
        WithDispute(path: "\(path)/\(dispute)")
    }

    public struct WithDispute {
        /// Path: `/v1/issuing/disputes/{dispute}`
        public let path: String

        /// <p>Retrieves an Issuing <code>Dispute</code> object.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.IssuingDispute> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetIssuingDisputesDispute")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.IssuingDispute> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostIssuingDisputesDispute")
        }

        public struct PostRequest: Encodable {
            /// Evidence_param
            ///
            /// Evidence provided for the dispute.
            public var evidence: Evidence?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?

            /// Evidence_param
            ///
            /// Evidence provided for the dispute.
            public struct Evidence: Encodable {
                public var canceled: Canceled?
                public var duplicate: Duplicate?
                public var fraudulent: Fraudulent?
                public var merchandiseNotAsDescribed: MerchandiseNotAsDescribed?
                public var notReceived: NotReceived?
                public var other: Other?
                public var reason: Reason?
                public var serviceNotAsDescribed: ServiceNotAsDescribed?

                public struct Canceled: Encodable {
                    /// Canceled
                    public var a: A?
                    public var b: B?

                    /// Canceled
                    public struct A: Encodable {
                        public var additionalDocumentation: AdditionalDocumentation?
                        public var canceledAt: CanceledAt?
                        public var cancellationPolicyProvided: CancellationPolicyProvided?
                        public var cancellationReason: String?
                        public var expectedAt: ExpectedAt?
                        public var explanation: String?
                        public var productDescription: String?
                        public var productType: ProductType?
                        public var returnStatus: ReturnStatus?
                        public var returnedAt: ReturnedAt?

                        public struct AdditionalDocumentation: Encodable {
                            public var string: String?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(string: String? = nil, object: Object? = nil) {
                                self.string = string
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(string, forKey: "string")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public struct CanceledAt: Encodable {
                            public var int: Int?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(int: Int? = nil, object: Object? = nil) {
                                self.int = int
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(int, forKey: "int")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public struct CancellationPolicyProvided: Encodable {
                            public var isBool: Bool?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(isBool: Bool? = nil, object: Object? = nil) {
                                self.isBool = isBool
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(isBool, forKey: "bool")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public struct ExpectedAt: Encodable {
                            public var int: Int?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(int: Int? = nil, object: Object? = nil) {
                                self.int = int
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(int, forKey: "int")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public enum ProductType: String, Codable, CaseIterable {
                            case empty = ""
                            case merchandise
                            case service
                        }

                        public enum ReturnStatus: String, Codable, CaseIterable {
                            case empty = ""
                            case merchantRejected = "merchant_rejected"
                            case successful
                        }

                        public struct ReturnedAt: Encodable {
                            public var int: Int?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(int: Int? = nil, object: Object? = nil) {
                                self.int = int
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(int, forKey: "int")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public init(additionalDocumentation: AdditionalDocumentation? = nil, canceledAt: CanceledAt? = nil, cancellationPolicyProvided: CancellationPolicyProvided? = nil, cancellationReason: String? = nil, expectedAt: ExpectedAt? = nil, explanation: String? = nil, productDescription: String? = nil, productType: ProductType? = nil, returnStatus: ReturnStatus? = nil, returnedAt: ReturnedAt? = nil) {
                            self.additionalDocumentation = additionalDocumentation
                            self.canceledAt = canceledAt
                            self.cancellationPolicyProvided = cancellationPolicyProvided
                            self.cancellationReason = cancellationReason
                            self.expectedAt = expectedAt
                            self.explanation = explanation
                            self.productDescription = productDescription
                            self.productType = productType
                            self.returnStatus = returnStatus
                            self.returnedAt = returnedAt
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(additionalDocumentation, forKey: "additional_documentation")
                            encoder.encode(canceledAt, forKey: "canceled_at")
                            encoder.encode(cancellationPolicyProvided, forKey: "cancellation_policy_provided")
                            encoder.encode(cancellationReason, forKey: "cancellation_reason")
                            encoder.encode(expectedAt, forKey: "expected_at")
                            encoder.encode(explanation, forKey: "explanation")
                            encoder.encode(productDescription, forKey: "product_description")
                            encoder.encode(productType, forKey: "product_type")
                            encoder.encode(returnStatus, forKey: "return_status")
                            encoder.encode(returnedAt, forKey: "returned_at")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public struct Duplicate: Encodable {
                    /// Duplicate
                    public var a: A?
                    public var b: B?

                    /// Duplicate
                    public struct A: Encodable {
                        public var additionalDocumentation: AdditionalDocumentation?
                        public var cardStatement: CardStatement?
                        public var cashReceipt: CashReceipt?
                        public var checkImage: CheckImage?
                        public var explanation: String?
                        public var originalTransaction: String?

                        public struct AdditionalDocumentation: Encodable {
                            public var string: String?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(string: String? = nil, object: Object? = nil) {
                                self.string = string
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(string, forKey: "string")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public struct CardStatement: Encodable {
                            public var string: String?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(string: String? = nil, object: Object? = nil) {
                                self.string = string
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(string, forKey: "string")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public struct CashReceipt: Encodable {
                            public var string: String?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(string: String? = nil, object: Object? = nil) {
                                self.string = string
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(string, forKey: "string")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public struct CheckImage: Encodable {
                            public var string: String?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(string: String? = nil, object: Object? = nil) {
                                self.string = string
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(string, forKey: "string")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public init(additionalDocumentation: AdditionalDocumentation? = nil, cardStatement: CardStatement? = nil, cashReceipt: CashReceipt? = nil, checkImage: CheckImage? = nil, explanation: String? = nil, originalTransaction: String? = nil) {
                            self.additionalDocumentation = additionalDocumentation
                            self.cardStatement = cardStatement
                            self.cashReceipt = cashReceipt
                            self.checkImage = checkImage
                            self.explanation = explanation
                            self.originalTransaction = originalTransaction
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(additionalDocumentation, forKey: "additional_documentation")
                            encoder.encode(cardStatement, forKey: "card_statement")
                            encoder.encode(cashReceipt, forKey: "cash_receipt")
                            encoder.encode(checkImage, forKey: "check_image")
                            encoder.encode(explanation, forKey: "explanation")
                            encoder.encode(originalTransaction, forKey: "original_transaction")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public struct Fraudulent: Encodable {
                    /// Fraudulent
                    public var a: A?
                    public var b: B?

                    /// Fraudulent
                    public struct A: Encodable {
                        public var additionalDocumentation: AdditionalDocumentation?
                        public var explanation: String?

                        public struct AdditionalDocumentation: Encodable {
                            public var string: String?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(string: String? = nil, object: Object? = nil) {
                                self.string = string
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(string, forKey: "string")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public init(additionalDocumentation: AdditionalDocumentation? = nil, explanation: String? = nil) {
                            self.additionalDocumentation = additionalDocumentation
                            self.explanation = explanation
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(additionalDocumentation, forKey: "additional_documentation")
                            encoder.encode(explanation, forKey: "explanation")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public struct MerchandiseNotAsDescribed: Encodable {
                    /// Merchandise_not_as_described
                    public var a: A?
                    public var b: B?

                    /// Merchandise_not_as_described
                    public struct A: Encodable {
                        public var additionalDocumentation: AdditionalDocumentation?
                        public var explanation: String?
                        public var receivedAt: ReceivedAt?
                        public var returnDescription: String?
                        public var returnStatus: ReturnStatus?
                        public var returnedAt: ReturnedAt?

                        public struct AdditionalDocumentation: Encodable {
                            public var string: String?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(string: String? = nil, object: Object? = nil) {
                                self.string = string
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(string, forKey: "string")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public struct ReceivedAt: Encodable {
                            public var int: Int?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(int: Int? = nil, object: Object? = nil) {
                                self.int = int
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(int, forKey: "int")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public enum ReturnStatus: String, Codable, CaseIterable {
                            case empty = ""
                            case merchantRejected = "merchant_rejected"
                            case successful
                        }

                        public struct ReturnedAt: Encodable {
                            public var int: Int?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(int: Int? = nil, object: Object? = nil) {
                                self.int = int
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(int, forKey: "int")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public init(additionalDocumentation: AdditionalDocumentation? = nil, explanation: String? = nil, receivedAt: ReceivedAt? = nil, returnDescription: String? = nil, returnStatus: ReturnStatus? = nil, returnedAt: ReturnedAt? = nil) {
                            self.additionalDocumentation = additionalDocumentation
                            self.explanation = explanation
                            self.receivedAt = receivedAt
                            self.returnDescription = returnDescription
                            self.returnStatus = returnStatus
                            self.returnedAt = returnedAt
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(additionalDocumentation, forKey: "additional_documentation")
                            encoder.encode(explanation, forKey: "explanation")
                            encoder.encode(receivedAt, forKey: "received_at")
                            encoder.encode(returnDescription, forKey: "return_description")
                            encoder.encode(returnStatus, forKey: "return_status")
                            encoder.encode(returnedAt, forKey: "returned_at")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public struct NotReceived: Encodable {
                    /// Not_received
                    public var a: A?
                    public var b: B?

                    /// Not_received
                    public struct A: Encodable {
                        public var additionalDocumentation: AdditionalDocumentation?
                        public var expectedAt: ExpectedAt?
                        public var explanation: String?
                        public var productDescription: String?
                        public var productType: ProductType?

                        public struct AdditionalDocumentation: Encodable {
                            public var string: String?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(string: String? = nil, object: Object? = nil) {
                                self.string = string
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(string, forKey: "string")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public struct ExpectedAt: Encodable {
                            public var int: Int?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(int: Int? = nil, object: Object? = nil) {
                                self.int = int
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(int, forKey: "int")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public enum ProductType: String, Codable, CaseIterable {
                            case empty = ""
                            case merchandise
                            case service
                        }

                        public init(additionalDocumentation: AdditionalDocumentation? = nil, expectedAt: ExpectedAt? = nil, explanation: String? = nil, productDescription: String? = nil, productType: ProductType? = nil) {
                            self.additionalDocumentation = additionalDocumentation
                            self.expectedAt = expectedAt
                            self.explanation = explanation
                            self.productDescription = productDescription
                            self.productType = productType
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(additionalDocumentation, forKey: "additional_documentation")
                            encoder.encode(expectedAt, forKey: "expected_at")
                            encoder.encode(explanation, forKey: "explanation")
                            encoder.encode(productDescription, forKey: "product_description")
                            encoder.encode(productType, forKey: "product_type")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public struct Other: Encodable {
                    /// Other
                    public var a: A?
                    public var b: B?

                    /// Other
                    public struct A: Encodable {
                        public var additionalDocumentation: AdditionalDocumentation?
                        public var explanation: String?
                        public var productDescription: String?
                        public var productType: ProductType?

                        public struct AdditionalDocumentation: Encodable {
                            public var string: String?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(string: String? = nil, object: Object? = nil) {
                                self.string = string
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(string, forKey: "string")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public enum ProductType: String, Codable, CaseIterable {
                            case empty = ""
                            case merchandise
                            case service
                        }

                        public init(additionalDocumentation: AdditionalDocumentation? = nil, explanation: String? = nil, productDescription: String? = nil, productType: ProductType? = nil) {
                            self.additionalDocumentation = additionalDocumentation
                            self.explanation = explanation
                            self.productDescription = productDescription
                            self.productType = productType
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(additionalDocumentation, forKey: "additional_documentation")
                            encoder.encode(explanation, forKey: "explanation")
                            encoder.encode(productDescription, forKey: "product_description")
                            encoder.encode(productType, forKey: "product_type")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public enum Reason: String, Codable, CaseIterable {
                    case canceled
                    case duplicate
                    case fraudulent
                    case merchandiseNotAsDescribed = "merchandise_not_as_described"
                    case notReceived = "not_received"
                    case other
                    case serviceNotAsDescribed = "service_not_as_described"
                }

                public struct ServiceNotAsDescribed: Encodable {
                    /// Service_not_as_described
                    public var a: A?
                    public var b: B?

                    /// Service_not_as_described
                    public struct A: Encodable {
                        public var additionalDocumentation: AdditionalDocumentation?
                        public var canceledAt: CanceledAt?
                        public var cancellationReason: String?
                        public var explanation: String?
                        public var receivedAt: ReceivedAt?

                        public struct AdditionalDocumentation: Encodable {
                            public var string: String?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(string: String? = nil, object: Object? = nil) {
                                self.string = string
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(string, forKey: "string")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public struct CanceledAt: Encodable {
                            public var int: Int?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(int: Int? = nil, object: Object? = nil) {
                                self.int = int
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(int, forKey: "int")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public struct ReceivedAt: Encodable {
                            public var int: Int?
                            public var object: Object?

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(int: Int? = nil, object: Object? = nil) {
                                self.int = int
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(int, forKey: "int")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public init(additionalDocumentation: AdditionalDocumentation? = nil, canceledAt: CanceledAt? = nil, cancellationReason: String? = nil, explanation: String? = nil, receivedAt: ReceivedAt? = nil) {
                            self.additionalDocumentation = additionalDocumentation
                            self.canceledAt = canceledAt
                            self.cancellationReason = cancellationReason
                            self.explanation = explanation
                            self.receivedAt = receivedAt
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(additionalDocumentation, forKey: "additional_documentation")
                            encoder.encode(canceledAt, forKey: "canceled_at")
                            encoder.encode(cancellationReason, forKey: "cancellation_reason")
                            encoder.encode(explanation, forKey: "explanation")
                            encoder.encode(receivedAt, forKey: "received_at")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public init(canceled: Canceled? = nil, duplicate: Duplicate? = nil, fraudulent: Fraudulent? = nil, merchandiseNotAsDescribed: MerchandiseNotAsDescribed? = nil, notReceived: NotReceived? = nil, other: Other? = nil, reason: Reason? = nil, serviceNotAsDescribed: ServiceNotAsDescribed? = nil) {
                    self.canceled = canceled
                    self.duplicate = duplicate
                    self.fraudulent = fraudulent
                    self.merchandiseNotAsDescribed = merchandiseNotAsDescribed
                    self.notReceived = notReceived
                    self.other = other
                    self.reason = reason
                    self.serviceNotAsDescribed = serviceNotAsDescribed
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(canceled, forKey: "canceled")
                    encoder.encode(duplicate, forKey: "duplicate")
                    encoder.encode(fraudulent, forKey: "fraudulent")
                    encoder.encode(merchandiseNotAsDescribed, forKey: "merchandise_not_as_described")
                    encoder.encode(notReceived, forKey: "not_received")
                    encoder.encode(other, forKey: "other")
                    encoder.encode(reason, forKey: "reason")
                    encoder.encode(serviceNotAsDescribed, forKey: "service_not_as_described")
                    return encoder.items
                }
            }

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            public init(evidence: Evidence? = nil, expand: [String]? = nil, metadata: Metadata? = nil) {
                self.evidence = evidence
                self.expand = expand
                self.metadata = metadata
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(evidence, forKey: "evidence")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(metadata, forKey: "metadata")
                return encoder.items
            }
        }
    }
}
