// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Terminal {
    public var readers: Readers {
        Readers(path: path + "/readers")
    }

    public struct Readers {
        /// Path: `/v1/terminal/readers`
        public let path: String

        /// <p>Returns a list of <code>Reader</code> objects.</p>
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "GetTerminalReaders")
        }

        /// TerminalReaderRetrieveReader
        public struct GetResponse: Decodable {
            /// A list of readers
            public var data: [StripeKit.TerminalReader]
            /// True if this list has another page of items after this one that can be fetched.
            public var hasMore: Bool
            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public var object: Object
            /// The URL where this list can be accessed.
            public var url: String

            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public enum Object: String, Codable, CaseIterable {
                case list
            }

            public init(data: [StripeKit.TerminalReader], hasMore: Bool, object: Object, url: String) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.data = try values.decode([StripeKit.TerminalReader].self, forKey: "data")
                self.hasMore = try values.decode(Bool.self, forKey: "has_more")
                self.object = try values.decode(Object.self, forKey: "object")
                self.url = try values.decode(String.self, forKey: "url")
            }
        }

        public struct GetParameters {
            public var deviceType: DeviceType?
            public var endingBefore: String?
            public var expand: [String]?
            public var limit: Int?
            public var location: String?
            public var startingAfter: String?
            public var status: Status?

            public enum DeviceType: String, Codable, CaseIterable {
                case bbposChipper2x = "bbpos_chipper2x"
                case bbposWisepad3 = "bbpos_wisepad3"
                case bbposWiseposE = "bbpos_wisepos_e"
                case simulatedWiseposE = "simulated_wisepos_e"
                case stripeM2 = "stripe_m2"
                case verifoneP400 = "verifone_P400"
            }

            public enum Status: String, Codable, CaseIterable {
                case offline
                case online
            }

            public init(deviceType: DeviceType? = nil, endingBefore: String? = nil, expand: [String]? = nil, limit: Int? = nil, location: String? = nil, startingAfter: String? = nil, status: Status? = nil) {
                self.deviceType = deviceType
                self.endingBefore = endingBefore
                self.expand = expand
                self.limit = limit
                self.location = location
                self.startingAfter = startingAfter
                self.status = status
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(deviceType, forKey: "device_type")
                encoder.encode(endingBefore, forKey: "ending_before")
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(limit, forKey: "limit")
                encoder.encode(location, forKey: "location")
                encoder.encode(startingAfter, forKey: "starting_after")
                encoder.encode(status, forKey: "status")
                return encoder.items
            }
        }

        /// <p>Creates a new <code>Reader</code> object.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.TerminalReader> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostTerminalReaders")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.
            public var label: String?
            /// The location to assign the reader to.
            public var location: String?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?
            /// A code generated by the reader used for registering to an account.
            public var registrationCode: String

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            public init(expand: [String]? = nil, label: String? = nil, location: String? = nil, metadata: Metadata? = nil, registrationCode: String) {
                self.expand = expand
                self.label = label
                self.location = location
                self.metadata = metadata
                self.registrationCode = registrationCode
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(label, forKey: "label")
                encoder.encode(location, forKey: "location")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(registrationCode, forKey: "registration_code")
                return encoder.items
            }
        }
    }
}
