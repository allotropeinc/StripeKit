// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.PaymentIntents.WithIntent {
    public var capture: Capture {
        Capture(path: path + "/capture")
    }

    public struct Capture {
        /// Path: `/v1/payment_intents/{intent}/capture`
        public let path: String

        /// <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
        /// 
        /// <p>Uncaptured PaymentIntents will be canceled a set number of days after they are created (7 by default).</p>
        /// 
        /// <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.PaymentIntent> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostPaymentIntentsIntentCapture")
        }

        public struct PostRequest: Encodable {
            /// The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. Defaults to the full `amount_capturable` if not provided.
            public var amountToCapture: Int?
            /// The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
            public var applicationFeeAmount: Int?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.
            public var statementDescriptor: String?
            /// Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
            public var statementDescriptorSuffix: String?
            /// Transfer_data_update_params
            ///
            /// The parameters used to automatically create a Transfer when the payment
            /// is captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
            public var transferData: TransferData?

            /// Transfer_data_update_params
            ///
            /// The parameters used to automatically create a Transfer when the payment
            /// is captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
            public struct TransferData: Encodable {
                public var amount: Int?

                public init(amount: Int? = nil) {
                    self.amount = amount
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(amount, forKey: "amount")
                    return encoder.items
                }
            }

            public init(amountToCapture: Int? = nil, applicationFeeAmount: Int? = nil, expand: [String]? = nil, statementDescriptor: String? = nil, statementDescriptorSuffix: String? = nil, transferData: TransferData? = nil) {
                self.amountToCapture = amountToCapture
                self.applicationFeeAmount = applicationFeeAmount
                self.expand = expand
                self.statementDescriptor = statementDescriptor
                self.statementDescriptorSuffix = statementDescriptorSuffix
                self.transferData = transferData
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(amountToCapture, forKey: "amount_to_capture")
                encoder.encode(applicationFeeAmount, forKey: "application_fee_amount")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(statementDescriptor, forKey: "statement_descriptor")
                encoder.encode(statementDescriptorSuffix, forKey: "statement_descriptor_suffix")
                encoder.encode(transferData, forKey: "transfer_data")
                return encoder.items
            }
        }
    }
}
