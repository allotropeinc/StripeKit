// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Charges {
    public func charge(_ charge: String) -> WithCharge {
        WithCharge(path: "\(path)/\(charge)")
    }

    public struct WithCharge {
        /// Path: `/v1/charges/{charge}`
        public let path: String

        /// <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.Charge> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetChargesCharge")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.Charge> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostChargesCharge")
        }

        public struct PostRequest: Encodable {
            /// The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge.
            public var customer: String?
            /// An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.
            public var description: String?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Fraud_details
            ///
            /// A set of key-value pairs you can attach to a charge giving information about its riskiness. If you believe a charge is fraudulent, include a `user_report` key with a value of `fraudulent`. If you believe a charge is safe, include a `user_report` key with a value of `safe`. Stripe will use the information you send to improve our fraud detection algorithms.
            public var fraudDetails: FraudDetails?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?
            /// This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address.
            public var receiptEmail: String?
            /// Optional_fields_shipping
            ///
            /// Shipping information for the charge. Helps prevent fraud on charges for physical goods.
            public var shipping: Shipping?
            /// A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
            public var transferGroup: String?

            /// Fraud_details
            ///
            /// A set of key-value pairs you can attach to a charge giving information about its riskiness. If you believe a charge is fraudulent, include a `user_report` key with a value of `fraudulent`. If you believe a charge is safe, include a `user_report` key with a value of `safe`. Stripe will use the information you send to improve our fraud detection algorithms.
            public struct FraudDetails: Encodable {
                public var userReport: UserReport

                public enum UserReport: String, Codable, CaseIterable {
                    case empty = ""
                    case fraudulent
                    case safe
                }

                public init(userReport: UserReport) {
                    self.userReport = userReport
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(userReport, forKey: "user_report")
                    return encoder.items
                }
            }

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// Optional_fields_shipping
            ///
            /// Shipping information for the charge. Helps prevent fraud on charges for physical goods.
            public struct Shipping: Encodable {
                /// Optional_fields_address
                public var address: Address
                public var carrier: String?
                public var name: String
                public var phone: String?
                public var trackingNumber: String?

                /// Optional_fields_address
                public struct Address: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        return encoder.items
                    }
                }

                public init(address: Address, carrier: String? = nil, name: String, phone: String? = nil, trackingNumber: String? = nil) {
                    self.address = address
                    self.carrier = carrier
                    self.name = name
                    self.phone = phone
                    self.trackingNumber = trackingNumber
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(address, forKey: "address")
                    encoder.encode(carrier, forKey: "carrier")
                    encoder.encode(name, forKey: "name")
                    encoder.encode(phone, forKey: "phone")
                    encoder.encode(trackingNumber, forKey: "tracking_number")
                    return encoder.items
                }
            }

            public init(customer: String? = nil, description: String? = nil, expand: [String]? = nil, fraudDetails: FraudDetails? = nil, metadata: Metadata? = nil, receiptEmail: String? = nil, shipping: Shipping? = nil, transferGroup: String? = nil) {
                self.customer = customer
                self.description = description
                self.expand = expand
                self.fraudDetails = fraudDetails
                self.metadata = metadata
                self.receiptEmail = receiptEmail
                self.shipping = shipping
                self.transferGroup = transferGroup
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(customer, forKey: "customer")
                encoder.encode(description, forKey: "description")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fraudDetails, forKey: "fraud_details")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(receiptEmail, forKey: "receipt_email")
                encoder.encode(shipping, forKey: "shipping")
                encoder.encode(transferGroup, forKey: "transfer_group")
                return encoder.items
            }
        }
    }
}
