// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var promotionCodes: PromotionCodes {
        PromotionCodes(path: "/v1/promotion_codes")
    }

    public struct PromotionCodes {
        /// Path: `/v1/promotion_codes`
        public let path: String

        /// <p>Returns a list of your promotion codes.</p>
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "GetPromotionCodes")
        }

        /// PromotionCodesResourcePromotionCodeList
        public struct GetResponse: Decodable {
            public var data: [StripeKit.PromotionCode]
            /// True if this list has another page of items after this one that can be fetched.
            public var hasMore: Bool
            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public var object: Object
            /// The URL where this list can be accessed.
            public var url: String

            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public enum Object: String, Codable, CaseIterable {
                case list
            }

            public init(data: [StripeKit.PromotionCode], hasMore: Bool, object: Object, url: String) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.data = try values.decode([StripeKit.PromotionCode].self, forKey: "data")
                self.hasMore = try values.decode(Bool.self, forKey: "has_more")
                self.object = try values.decode(Object.self, forKey: "object")
                self.url = try values.decode(String.self, forKey: "url")
            }
        }

        public struct GetParameters {
            public var isActive: Bool?
            public var code: String?
            public var coupon: String?
            public var created: Created?
            public var customer: String?
            public var endingBefore: String?
            public var expand: [String]?
            public var limit: Int?
            public var startingAfter: String?

            public struct Created: Codable {
                /// Range_query_specs
                public var object: Object?
                public var int: Int?

                /// Range_query_specs
                public struct Object: Codable {
                    public var gt: Int?
                    public var gte: Int?
                    public var lt: Int?
                    public var lte: Int?

                    public init(gt: Int? = nil, gte: Int? = nil, lt: Int? = nil, lte: Int? = nil) {
                        self.gt = gt
                        self.gte = gte
                        self.lt = lt
                        self.lte = lte
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(gt, forKey: "gt")
                        encoder.encode(gte, forKey: "gte")
                        encoder.encode(lt, forKey: "lt")
                        encoder.encode(lte, forKey: "lte")
                        return encoder.items
                    }
                }

                public init(object: Object? = nil, int: Int? = nil) {
                    self.object = object
                    self.int = int
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(object, forKey: "object")
                    encoder.encode(int, forKey: "int")
                    return encoder.items
                }
            }

            public init(isActive: Bool? = nil, code: String? = nil, coupon: String? = nil, created: Created? = nil, customer: String? = nil, endingBefore: String? = nil, expand: [String]? = nil, limit: Int? = nil, startingAfter: String? = nil) {
                self.isActive = isActive
                self.code = code
                self.coupon = coupon
                self.created = created
                self.customer = customer
                self.endingBefore = endingBefore
                self.expand = expand
                self.limit = limit
                self.startingAfter = startingAfter
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isActive, forKey: "active")
                encoder.encode(code, forKey: "code")
                encoder.encode(coupon, forKey: "coupon")
                encoder.encode(created, forKey: "created", isDeepObject: true)
                encoder.encode(customer, forKey: "customer")
                encoder.encode(endingBefore, forKey: "ending_before")
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(limit, forKey: "limit")
                encoder.encode(startingAfter, forKey: "starting_after")
                return encoder.items
            }
        }

        /// <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.PromotionCode> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostPromotionCodes")
        }

        public struct PostRequest: Encodable {
            /// Whether the promotion code is currently active.
            public var isActive: Bool?
            /// The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer. If left blank, we will generate one automatically.
            public var code: String?
            /// The coupon for this promotion code.
            public var coupon: String
            /// The customer that this promotion code can be used by. If not set, the promotion code can be used by all customers.
            public var customer: String?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The timestamp at which this promotion code will expire. If the coupon has specified a `redeems_by`, then this value cannot be after the coupon's `redeems_by`.
            public var expiresAt: Int?
            /// A positive integer specifying the number of times the promotion code can be redeemed. If the coupon has specified a `max_redemptions`, then this value cannot be greater than the coupon's `max_redemptions`.
            public var maxRedemptions: Int?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: [String: String]?
            /// Restrictions_params
            ///
            /// Settings that restrict the redemption of the promotion code.
            public var restrictions: Restrictions?

            /// Restrictions_params
            ///
            /// Settings that restrict the redemption of the promotion code.
            public struct Restrictions: Encodable {
                public var currencyOptions: [String: CurrencyOption]?
                public var isFirstTimeTransaction: Bool?
                public var minimumAmount: Int?
                public var minimumAmountCurrency: String?

                /// Currency_option
                public struct CurrencyOption: Encodable {
                    public var minimumAmount: Int?

                    public init(minimumAmount: Int? = nil) {
                        self.minimumAmount = minimumAmount
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(minimumAmount, forKey: "minimum_amount")
                        return encoder.items
                    }
                }

                public init(currencyOptions: [String: CurrencyOption]? = nil, isFirstTimeTransaction: Bool? = nil, minimumAmount: Int? = nil, minimumAmountCurrency: String? = nil) {
                    self.currencyOptions = currencyOptions
                    self.isFirstTimeTransaction = isFirstTimeTransaction
                    self.minimumAmount = minimumAmount
                    self.minimumAmountCurrency = minimumAmountCurrency
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(currencyOptions, forKey: "currency_options")
                    encoder.encode(isFirstTimeTransaction, forKey: "first_time_transaction")
                    encoder.encode(minimumAmount, forKey: "minimum_amount")
                    encoder.encode(minimumAmountCurrency, forKey: "minimum_amount_currency")
                    return encoder.items
                }
            }

            public init(isActive: Bool? = nil, code: String? = nil, coupon: String, customer: String? = nil, expand: [String]? = nil, expiresAt: Int? = nil, maxRedemptions: Int? = nil, metadata: [String: String]? = nil, restrictions: Restrictions? = nil) {
                self.isActive = isActive
                self.code = code
                self.coupon = coupon
                self.customer = customer
                self.expand = expand
                self.expiresAt = expiresAt
                self.maxRedemptions = maxRedemptions
                self.metadata = metadata
                self.restrictions = restrictions
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isActive, forKey: "active")
                encoder.encode(code, forKey: "code")
                encoder.encode(coupon, forKey: "coupon")
                encoder.encode(customer, forKey: "customer")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(expiresAt, forKey: "expires_at")
                encoder.encode(maxRedemptions, forKey: "max_redemptions")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(restrictions, forKey: "restrictions")
                return encoder.items
            }
        }
    }
}
