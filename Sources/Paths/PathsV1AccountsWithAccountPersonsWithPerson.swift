// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Accounts.WithAccount.Persons {
    public func person(_ person: String) -> WithPerson {
        WithPerson(path: "\(path)/\(person)")
    }

    public struct WithPerson {
        /// Path: `/v1/accounts/{account}/persons/{person}`
        public let path: String

        /// <p>Retrieves an existing person.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.Person> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetAccountsAccountPersonsPerson")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates an existing person.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.Person> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostAccountsAccountPersonsPerson")
        }

        public struct PostRequest: Encodable {
            /// Address_specs
            ///
            /// The person's address.
            public var address: Address?
            /// Japan_address_kana_specs
            ///
            /// The Kana variation of the person's address (Japan only).
            public var addressKana: AddressKana?
            /// Japan_address_kanji_specs
            ///
            /// The Kanji variation of the person's address (Japan only).
            public var addressKanji: AddressKanji?
            /// The person's date of birth.
            public var dob: Dob?
            /// Person_documents_specs
            ///
            /// Documents that may be submitted to satisfy various informational requests.
            public var documents: Documents?
            /// The person's email address.
            public var email: String?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The person's first name.
            public var firstName: String?
            /// The Kana variation of the person's first name (Japan only).
            public var firstNameKana: String?
            /// The Kanji variation of the person's first name (Japan only).
            public var firstNameKanji: String?
            /// A list of alternate names or aliases that the person is known by.
            public var fullNameAliases: FullNameAliases?
            /// The person's gender (International regulations require either "male" or "female").
            public var gender: String?
            /// The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii).
            public var idNumber: String?
            /// The person's secondary ID number, as appropriate for their country, will be used for enhanced verification checks. In Thailand, this would be the laser code found on the back of an ID card. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii).
            public var idNumberSecondary: String?
            /// The person's last name.
            public var lastName: String?
            /// The Kana variation of the person's last name (Japan only).
            public var lastNameKana: String?
            /// The Kanji variation of the person's last name (Japan only).
            public var lastNameKanji: String?
            /// The person's maiden name.
            public var maidenName: String?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?
            /// The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable.
            public var nationality: String?
            /// A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person.
            public var personToken: String?
            /// The person's phone number.
            public var phone: String?
            /// Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
            public var politicalExposure: String?
            /// Address_specs
            ///
            /// The person's registered address.
            public var registeredAddress: RegisteredAddress?
            /// Relationship_specs
            ///
            /// The relationship that this person has with the account's legal entity.
            public var relationship: Relationship?
            /// The last four digits of the person's Social Security number (U.S. only).
            public var ssnLast4: String?
            /// Person_verification_specs
            ///
            /// The person's verification status.
            public var verification: Verification?

            /// Address_specs
            ///
            /// The person's address.
            public struct Address: Encodable {
                public var city: String?
                public var country: String?
                public var line1: String?
                public var line2: String?
                public var postalCode: String?
                public var state: String?

                public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                    self.city = city
                    self.country = country
                    self.line1 = line1
                    self.line2 = line2
                    self.postalCode = postalCode
                    self.state = state
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(city, forKey: "city")
                    encoder.encode(country, forKey: "country")
                    encoder.encode(line1, forKey: "line1")
                    encoder.encode(line2, forKey: "line2")
                    encoder.encode(postalCode, forKey: "postal_code")
                    encoder.encode(state, forKey: "state")
                    return encoder.items
                }
            }

            /// Japan_address_kana_specs
            ///
            /// The Kana variation of the person's address (Japan only).
            public struct AddressKana: Encodable {
                public var city: String?
                public var country: String?
                public var line1: String?
                public var line2: String?
                public var postalCode: String?
                public var state: String?
                public var town: String?

                public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
                    self.city = city
                    self.country = country
                    self.line1 = line1
                    self.line2 = line2
                    self.postalCode = postalCode
                    self.state = state
                    self.town = town
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(city, forKey: "city")
                    encoder.encode(country, forKey: "country")
                    encoder.encode(line1, forKey: "line1")
                    encoder.encode(line2, forKey: "line2")
                    encoder.encode(postalCode, forKey: "postal_code")
                    encoder.encode(state, forKey: "state")
                    encoder.encode(town, forKey: "town")
                    return encoder.items
                }
            }

            /// Japan_address_kanji_specs
            ///
            /// The Kanji variation of the person's address (Japan only).
            public struct AddressKanji: Encodable {
                public var city: String?
                public var country: String?
                public var line1: String?
                public var line2: String?
                public var postalCode: String?
                public var state: String?
                public var town: String?

                public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
                    self.city = city
                    self.country = country
                    self.line1 = line1
                    self.line2 = line2
                    self.postalCode = postalCode
                    self.state = state
                    self.town = town
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(city, forKey: "city")
                    encoder.encode(country, forKey: "country")
                    encoder.encode(line1, forKey: "line1")
                    encoder.encode(line2, forKey: "line2")
                    encoder.encode(postalCode, forKey: "postal_code")
                    encoder.encode(state, forKey: "state")
                    encoder.encode(town, forKey: "town")
                    return encoder.items
                }
            }

            /// The person's date of birth.
            public struct Dob: Encodable {
                /// Date_of_birth_specs
                public var a: A?
                public var b: B?

                /// Date_of_birth_specs
                public struct A: Encodable {
                    public var day: Int
                    public var month: Int
                    public var year: Int

                    public init(day: Int, month: Int, year: Int) {
                        self.day = day
                        self.month = month
                        self.year = year
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(day, forKey: "day")
                        encoder.encode(month, forKey: "month")
                        encoder.encode(year, forKey: "year")
                        return encoder.items
                    }
                }

                public enum B: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(a: A? = nil, b: B? = nil) {
                    self.a = a
                    self.b = b
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(a, forKey: "a")
                    encoder.encode(b, forKey: "b")
                    return encoder.items
                }
            }

            /// Person_documents_specs
            ///
            /// Documents that may be submitted to satisfy various informational requests.
            public struct Documents: Encodable {
                /// Documents_param
                public var companyAuthorization: CompanyAuthorization?
                /// Documents_param
                public var passport: Passport?
                /// Documents_param
                public var visa: Visa?

                /// Documents_param
                public struct CompanyAuthorization: Encodable {
                    public var files: [String]?

                    public init(files: [String]? = nil) {
                        self.files = files
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(files, forKey: "files")
                        return encoder.items
                    }
                }

                /// Documents_param
                public struct Passport: Encodable {
                    public var files: [String]?

                    public init(files: [String]? = nil) {
                        self.files = files
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(files, forKey: "files")
                        return encoder.items
                    }
                }

                /// Documents_param
                public struct Visa: Encodable {
                    public var files: [String]?

                    public init(files: [String]? = nil) {
                        self.files = files
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(files, forKey: "files")
                        return encoder.items
                    }
                }

                public init(companyAuthorization: CompanyAuthorization? = nil, passport: Passport? = nil, visa: Visa? = nil) {
                    self.companyAuthorization = companyAuthorization
                    self.passport = passport
                    self.visa = visa
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(companyAuthorization, forKey: "company_authorization")
                    encoder.encode(passport, forKey: "passport")
                    encoder.encode(visa, forKey: "visa")
                    return encoder.items
                }
            }

            /// A list of alternate names or aliases that the person is known by.
            public struct FullNameAliases: Encodable {
                public var strings: [String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(strings: [String]? = nil, object: Object? = nil) {
                    self.strings = strings
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(strings, forKey: "strings")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// Address_specs
            ///
            /// The person's registered address.
            public struct RegisteredAddress: Encodable {
                public var city: String?
                public var country: String?
                public var line1: String?
                public var line2: String?
                public var postalCode: String?
                public var state: String?

                public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                    self.city = city
                    self.country = country
                    self.line1 = line1
                    self.line2 = line2
                    self.postalCode = postalCode
                    self.state = state
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(city, forKey: "city")
                    encoder.encode(country, forKey: "country")
                    encoder.encode(line1, forKey: "line1")
                    encoder.encode(line2, forKey: "line2")
                    encoder.encode(postalCode, forKey: "postal_code")
                    encoder.encode(state, forKey: "state")
                    return encoder.items
                }
            }

            /// Relationship_specs
            ///
            /// The relationship that this person has with the account's legal entity.
            public struct Relationship: Encodable {
                public var isDirector: Bool?
                public var isExecutive: Bool?
                public var isOwner: Bool?
                public var percentOwnership: PercentOwnership?
                public var isRepresentative: Bool?
                public var title: String?

                public struct PercentOwnership: Encodable {
                    public var double: Double?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(double: Double? = nil, object: Object? = nil) {
                        self.double = double
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(double, forKey: "double")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public init(isDirector: Bool? = nil, isExecutive: Bool? = nil, isOwner: Bool? = nil, percentOwnership: PercentOwnership? = nil, isRepresentative: Bool? = nil, title: String? = nil) {
                    self.isDirector = isDirector
                    self.isExecutive = isExecutive
                    self.isOwner = isOwner
                    self.percentOwnership = percentOwnership
                    self.isRepresentative = isRepresentative
                    self.title = title
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(isDirector, forKey: "director")
                    encoder.encode(isExecutive, forKey: "executive")
                    encoder.encode(isOwner, forKey: "owner")
                    encoder.encode(percentOwnership, forKey: "percent_ownership")
                    encoder.encode(isRepresentative, forKey: "representative")
                    encoder.encode(title, forKey: "title")
                    return encoder.items
                }
            }

            /// Person_verification_specs
            ///
            /// The person's verification status.
            public struct Verification: Encodable {
                /// Person_verification_document_specs
                public var additionalDocument: AdditionalDocument?
                /// Person_verification_document_specs
                public var document: Document?

                /// Person_verification_document_specs
                public struct AdditionalDocument: Encodable {
                    public var back: String?
                    public var front: String?

                    public init(back: String? = nil, front: String? = nil) {
                        self.back = back
                        self.front = front
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(back, forKey: "back")
                        encoder.encode(front, forKey: "front")
                        return encoder.items
                    }
                }

                /// Person_verification_document_specs
                public struct Document: Encodable {
                    public var back: String?
                    public var front: String?

                    public init(back: String? = nil, front: String? = nil) {
                        self.back = back
                        self.front = front
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(back, forKey: "back")
                        encoder.encode(front, forKey: "front")
                        return encoder.items
                    }
                }

                public init(additionalDocument: AdditionalDocument? = nil, document: Document? = nil) {
                    self.additionalDocument = additionalDocument
                    self.document = document
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(additionalDocument, forKey: "additional_document")
                    encoder.encode(document, forKey: "document")
                    return encoder.items
                }
            }

            public init(address: Address? = nil, addressKana: AddressKana? = nil, addressKanji: AddressKanji? = nil, dob: Dob? = nil, documents: Documents? = nil, email: String? = nil, expand: [String]? = nil, firstName: String? = nil, firstNameKana: String? = nil, firstNameKanji: String? = nil, fullNameAliases: FullNameAliases? = nil, gender: String? = nil, idNumber: String? = nil, idNumberSecondary: String? = nil, lastName: String? = nil, lastNameKana: String? = nil, lastNameKanji: String? = nil, maidenName: String? = nil, metadata: Metadata? = nil, nationality: String? = nil, personToken: String? = nil, phone: String? = nil, politicalExposure: String? = nil, registeredAddress: RegisteredAddress? = nil, relationship: Relationship? = nil, ssnLast4: String? = nil, verification: Verification? = nil) {
                self.address = address
                self.addressKana = addressKana
                self.addressKanji = addressKanji
                self.dob = dob
                self.documents = documents
                self.email = email
                self.expand = expand
                self.firstName = firstName
                self.firstNameKana = firstNameKana
                self.firstNameKanji = firstNameKanji
                self.fullNameAliases = fullNameAliases
                self.gender = gender
                self.idNumber = idNumber
                self.idNumberSecondary = idNumberSecondary
                self.lastName = lastName
                self.lastNameKana = lastNameKana
                self.lastNameKanji = lastNameKanji
                self.maidenName = maidenName
                self.metadata = metadata
                self.nationality = nationality
                self.personToken = personToken
                self.phone = phone
                self.politicalExposure = politicalExposure
                self.registeredAddress = registeredAddress
                self.relationship = relationship
                self.ssnLast4 = ssnLast4
                self.verification = verification
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(address, forKey: "address")
                encoder.encode(addressKana, forKey: "address_kana")
                encoder.encode(addressKanji, forKey: "address_kanji")
                encoder.encode(dob, forKey: "dob")
                encoder.encode(documents, forKey: "documents")
                encoder.encode(email, forKey: "email")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(firstName, forKey: "first_name")
                encoder.encode(firstNameKana, forKey: "first_name_kana")
                encoder.encode(firstNameKanji, forKey: "first_name_kanji")
                encoder.encode(fullNameAliases, forKey: "full_name_aliases")
                encoder.encode(gender, forKey: "gender")
                encoder.encode(idNumber, forKey: "id_number")
                encoder.encode(idNumberSecondary, forKey: "id_number_secondary")
                encoder.encode(lastName, forKey: "last_name")
                encoder.encode(lastNameKana, forKey: "last_name_kana")
                encoder.encode(lastNameKanji, forKey: "last_name_kanji")
                encoder.encode(maidenName, forKey: "maiden_name")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(nationality, forKey: "nationality")
                encoder.encode(personToken, forKey: "person_token")
                encoder.encode(phone, forKey: "phone")
                encoder.encode(politicalExposure, forKey: "political_exposure")
                encoder.encode(registeredAddress, forKey: "registered_address")
                encoder.encode(relationship, forKey: "relationship")
                encoder.encode(ssnLast4, forKey: "ssn_last_4")
                encoder.encode(verification, forKey: "verification")
                return encoder.items
            }
        }

        /// <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
        public var delete: Request<StripeKit.DeletedPerson> {
            Request(method: "DELETE", url: path, id: "DeleteAccountsAccountPersonsPerson")
        }
    }
}
