// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var sources: Sources {
        Sources(path: "/v1/sources")
    }

    public struct Sources {
        /// Path: `/v1/sources`
        public let path: String

        /// <p>Creates a new source object.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.Source> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostSources")
        }

        public struct PostRequest: Encodable {
            /// Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land.
            public var amount: Int?
            /// Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.
            public var currency: String?
            /// The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`).
            public var customer: String?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.
            public var flow: Flow?
            /// Mandate_params
            ///
            /// Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
            public var mandate: Mandate?
            public var metadata: [String: String]?
            /// The source to share.
            public var originalSource: String?
            /// Information about the owner of the payment instrument that may be used or required by particular source types.
            public var owner: Owner?
            /// Receiver_params
            ///
            /// Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`).
            public var receiver: Receiver?
            /// Redirect_params
            ///
            /// Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`).
            public var redirect: Redirect?
            /// Shallow_order_specs
            ///
            /// Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
            public var sourceOrder: SourceOrder?
            /// An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all.
            public var statementDescriptor: String?
            /// An optional token used to create the source. When passed, token properties will override source parameters.
            public var token: String?
            /// The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide)
            public var type: String?
            public var usage: Usage?

            /// The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.
            public enum Flow: String, Codable, CaseIterable {
                case codeVerification = "code_verification"
                case `none`
                case receiver
                case redirect
            }

            /// Mandate_params
            ///
            /// Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
            public struct Mandate: Encodable {
                /// Mandate_acceptance_params
                public var acceptance: Acceptance?
                public var amount: Amount?
                public var currency: String?
                public var interval: Interval?
                public var notificationMethod: NotificationMethod?

                /// Mandate_acceptance_params
                public struct Acceptance: Encodable {
                    public var date: Int?
                    public var ip: String?
                    /// Mandate_offline_acceptance_params
                    public var offline: Offline?
                    /// Mandate_online_acceptance_params
                    public var online: Online?
                    public var status: Status
                    public var type: `Type`?
                    public var userAgent: String?

                    /// Mandate_offline_acceptance_params
                    public struct Offline: Encodable {
                        public var contactEmail: String

                        public init(contactEmail: String) {
                            self.contactEmail = contactEmail
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(contactEmail, forKey: "contact_email")
                            return encoder.items
                        }
                    }

                    /// Mandate_online_acceptance_params
                    public struct Online: Encodable {
                        public var date: Int?
                        public var ip: String?
                        public var userAgent: String?

                        public init(date: Int? = nil, ip: String? = nil, userAgent: String? = nil) {
                            self.date = date
                            self.ip = ip
                            self.userAgent = userAgent
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(date, forKey: "date")
                            encoder.encode(ip, forKey: "ip")
                            encoder.encode(userAgent, forKey: "user_agent")
                            return encoder.items
                        }
                    }

                    public enum Status: String, Codable, CaseIterable {
                        case accepted
                        case pending
                        case refused
                        case revoked
                    }

                    public enum `Type`: String, Codable, CaseIterable {
                        case offline
                        case online
                    }

                    public init(date: Int? = nil, ip: String? = nil, offline: Offline? = nil, online: Online? = nil, status: Status, type: `Type`? = nil, userAgent: String? = nil) {
                        self.date = date
                        self.ip = ip
                        self.offline = offline
                        self.online = online
                        self.status = status
                        self.type = type
                        self.userAgent = userAgent
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(date, forKey: "date")
                        encoder.encode(ip, forKey: "ip")
                        encoder.encode(offline, forKey: "offline")
                        encoder.encode(online, forKey: "online")
                        encoder.encode(status, forKey: "status")
                        encoder.encode(type, forKey: "type")
                        encoder.encode(userAgent, forKey: "user_agent")
                        return encoder.items
                    }
                }

                public struct Amount: Encodable {
                    public var int: Int?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(int: Int? = nil, object: Object? = nil) {
                        self.int = int
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(int, forKey: "int")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public enum Interval: String, Codable, CaseIterable {
                    case oneTime = "one_time"
                    case scheduled
                    case variable
                }

                public enum NotificationMethod: String, Codable, CaseIterable {
                    case deprecatedNone = "deprecated_none"
                    case email
                    case manual
                    case `none`
                    case stripeEmail = "stripe_email"
                }

                public init(acceptance: Acceptance? = nil, amount: Amount? = nil, currency: String? = nil, interval: Interval? = nil, notificationMethod: NotificationMethod? = nil) {
                    self.acceptance = acceptance
                    self.amount = amount
                    self.currency = currency
                    self.interval = interval
                    self.notificationMethod = notificationMethod
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(acceptance, forKey: "acceptance")
                    encoder.encode(amount, forKey: "amount")
                    encoder.encode(currency, forKey: "currency")
                    encoder.encode(interval, forKey: "interval")
                    encoder.encode(notificationMethod, forKey: "notification_method")
                    return encoder.items
                }
            }

            /// Information about the owner of the payment instrument that may be used or required by particular source types.
            public struct Owner: Encodable {
                /// Source_address
                public var address: Address?
                public var email: String?
                public var name: String?
                public var phone: String?

                /// Source_address
                public struct Address: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        return encoder.items
                    }
                }

                public init(address: Address? = nil, email: String? = nil, name: String? = nil, phone: String? = nil) {
                    self.address = address
                    self.email = email
                    self.name = name
                    self.phone = phone
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(address, forKey: "address")
                    encoder.encode(email, forKey: "email")
                    encoder.encode(name, forKey: "name")
                    encoder.encode(phone, forKey: "phone")
                    return encoder.items
                }
            }

            /// Receiver_params
            ///
            /// Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`).
            public struct Receiver: Encodable {
                public var refundAttributesMethod: RefundAttributesMethod?

                public enum RefundAttributesMethod: String, Codable, CaseIterable {
                    case email
                    case manual
                    case `none`
                }

                public init(refundAttributesMethod: RefundAttributesMethod? = nil) {
                    self.refundAttributesMethod = refundAttributesMethod
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(refundAttributesMethod, forKey: "refund_attributes_method")
                    return encoder.items
                }
            }

            /// Redirect_params
            ///
            /// Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`).
            public struct Redirect: Encodable {
                public var returnURL: String

                public init(returnURL: String) {
                    self.returnURL = returnURL
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(returnURL, forKey: "return_url")
                    return encoder.items
                }
            }

            /// Shallow_order_specs
            ///
            /// Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
            public struct SourceOrder: Encodable {
                public var items: [Item]?
                /// Order_shipping
                public var shipping: Shipping?

                /// Order_item_specs
                public struct Item: Encodable {
                    public var amount: Int?
                    public var currency: String?
                    public var description: String?
                    public var parent: String?
                    public var quantity: Int?
                    public var type: `Type`?

                    public enum `Type`: String, Codable, CaseIterable {
                        case discount
                        case shipping
                        case sku
                        case tax
                    }

                    public init(amount: Int? = nil, currency: String? = nil, description: String? = nil, parent: String? = nil, quantity: Int? = nil, type: `Type`? = nil) {
                        self.amount = amount
                        self.currency = currency
                        self.description = description
                        self.parent = parent
                        self.quantity = quantity
                        self.type = type
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(amount, forKey: "amount")
                        encoder.encode(currency, forKey: "currency")
                        encoder.encode(description, forKey: "description")
                        encoder.encode(parent, forKey: "parent")
                        encoder.encode(quantity, forKey: "quantity")
                        encoder.encode(type, forKey: "type")
                        return encoder.items
                    }
                }

                /// Order_shipping
                public struct Shipping: Encodable {
                    public var address: Address
                    public var carrier: String?
                    public var name: String?
                    public var phone: String?
                    public var trackingNumber: String?

                    public struct Address: Encodable {
                        public var city: String?
                        public var country: String?
                        public var line1: String
                        public var line2: String?
                        public var postalCode: String?
                        public var state: String?

                        public init(city: String? = nil, country: String? = nil, line1: String, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                            self.city = city
                            self.country = country
                            self.line1 = line1
                            self.line2 = line2
                            self.postalCode = postalCode
                            self.state = state
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(city, forKey: "city")
                            encoder.encode(country, forKey: "country")
                            encoder.encode(line1, forKey: "line1")
                            encoder.encode(line2, forKey: "line2")
                            encoder.encode(postalCode, forKey: "postal_code")
                            encoder.encode(state, forKey: "state")
                            return encoder.items
                        }
                    }

                    public init(address: Address, carrier: String? = nil, name: String? = nil, phone: String? = nil, trackingNumber: String? = nil) {
                        self.address = address
                        self.carrier = carrier
                        self.name = name
                        self.phone = phone
                        self.trackingNumber = trackingNumber
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(address, forKey: "address")
                        encoder.encode(carrier, forKey: "carrier")
                        encoder.encode(name, forKey: "name")
                        encoder.encode(phone, forKey: "phone")
                        encoder.encode(trackingNumber, forKey: "tracking_number")
                        return encoder.items
                    }
                }

                public init(items: [Item]? = nil, shipping: Shipping? = nil) {
                    self.items = items
                    self.shipping = shipping
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(items, forKey: "items")
                    encoder.encode(shipping, forKey: "shipping")
                    return encoder.items
                }
            }

            public enum Usage: String, Codable, CaseIterable {
                case reusable
                case singleUse = "single_use"
            }

            public init(amount: Int? = nil, currency: String? = nil, customer: String? = nil, expand: [String]? = nil, flow: Flow? = nil, mandate: Mandate? = nil, metadata: [String: String]? = nil, originalSource: String? = nil, owner: Owner? = nil, receiver: Receiver? = nil, redirect: Redirect? = nil, sourceOrder: SourceOrder? = nil, statementDescriptor: String? = nil, token: String? = nil, type: String? = nil, usage: Usage? = nil) {
                self.amount = amount
                self.currency = currency
                self.customer = customer
                self.expand = expand
                self.flow = flow
                self.mandate = mandate
                self.metadata = metadata
                self.originalSource = originalSource
                self.owner = owner
                self.receiver = receiver
                self.redirect = redirect
                self.sourceOrder = sourceOrder
                self.statementDescriptor = statementDescriptor
                self.token = token
                self.type = type
                self.usage = usage
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(amount, forKey: "amount")
                encoder.encode(currency, forKey: "currency")
                encoder.encode(customer, forKey: "customer")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(flow, forKey: "flow")
                encoder.encode(mandate, forKey: "mandate")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(originalSource, forKey: "original_source")
                encoder.encode(owner, forKey: "owner")
                encoder.encode(receiver, forKey: "receiver")
                encoder.encode(redirect, forKey: "redirect")
                encoder.encode(sourceOrder, forKey: "source_order")
                encoder.encode(statementDescriptor, forKey: "statement_descriptor")
                encoder.encode(token, forKey: "token")
                encoder.encode(type, forKey: "type")
                encoder.encode(usage, forKey: "usage")
                return encoder.items
            }
        }
    }
}
