// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Accounts {
    public func account(_ account: String) -> WithAccount {
        WithAccount(path: "\(path)/\(account)")
    }

    public struct WithAccount {
        /// Path: `/v1/accounts/{account}`
        public let path: String

        /// <p>Retrieves the details of an account.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.Account> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetAccountsAccount")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p>
        /// 
        /// <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.Account> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostAccountsAccount")
        }

        public struct PostRequest: Encodable {
            /// An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account.
            public var accountToken: String?
            /// Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details.
            public var bankAccount: BankAccount?
            /// Business_profile_specs
            ///
            /// Business information about the account.
            public var businessProfile: BusinessProfile?
            /// The business type.
            public var businessType: BusinessType?
            /// Capabilities_param
            ///
            /// Each key of the dictionary represents a capability, and each capability maps to its settings (e.g. whether it has been requested or not). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive.
            public var capabilities: Capabilities?
            /// Company_specs
            ///
            /// Information about the company or business. This field is available for any `business_type`.
            public var company: Company?
            /// Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
            public var defaultCurrency: String?
            /// Documents_specs
            ///
            /// Documents that may be submitted to satisfy various informational requests.
            public var documents: Documents?
            /// The email address of the account holder. This is only to make the account easier to identify to you. Stripe only emails Custom accounts with your consent.
            public var email: String?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// A card or bank account to attach to the account for receiving [payouts](https://stripe.com/docs/connect/bank-debit-card-payouts) (you wonâ€™t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API.
            public var externalAccount: String?
            /// Individual_specs
            ///
            /// Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.
            public var individual: Individual?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?
            /// Settings_specs_update
            ///
            /// Options for customizing how the account functions within Stripe.
            public var settings: Settings?
            /// Tos_acceptance_specs
            ///
            /// Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).
            public var tosAcceptance: TosAcceptance?

            /// Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details.
            public struct BankAccount: Encodable {
                /// External_account_payout_bank_account
                public var object: Object?
                public var string: String?

                /// External_account_payout_bank_account
                public struct Object: Encodable {
                    public var accountHolderName: String?
                    public var accountHolderType: AccountHolderType?
                    public var accountNumber: String
                    public var accountType: AccountType?
                    public var country: String
                    public var currency: String?
                    public var object: Object?
                    public var routingNumber: String?

                    public enum AccountHolderType: String, Codable, CaseIterable {
                        case company
                        case individual
                    }

                    public enum AccountType: String, Codable, CaseIterable {
                        case checking
                        case futsu
                        case savings
                        case toza
                    }

                    public enum Object: String, Codable, CaseIterable {
                        case bankAccount = "bank_account"
                    }

                    public init(accountHolderName: String? = nil, accountHolderType: AccountHolderType? = nil, accountNumber: String, accountType: AccountType? = nil, country: String, currency: String? = nil, object: Object? = nil, routingNumber: String? = nil) {
                        self.accountHolderName = accountHolderName
                        self.accountHolderType = accountHolderType
                        self.accountNumber = accountNumber
                        self.accountType = accountType
                        self.country = country
                        self.currency = currency
                        self.object = object
                        self.routingNumber = routingNumber
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(accountHolderName, forKey: "account_holder_name")
                        encoder.encode(accountHolderType, forKey: "account_holder_type")
                        encoder.encode(accountNumber, forKey: "account_number")
                        encoder.encode(accountType, forKey: "account_type")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(currency, forKey: "currency")
                        encoder.encode(object, forKey: "object")
                        encoder.encode(routingNumber, forKey: "routing_number")
                        return encoder.items
                    }
                }

                public init(object: Object? = nil, string: String? = nil) {
                    self.object = object
                    self.string = string
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(object, forKey: "object")
                    encoder.encode(string, forKey: "string")
                    return encoder.items
                }
            }

            /// Business_profile_specs
            ///
            /// Business information about the account.
            public struct BusinessProfile: Encodable {
                public var mcc: String?
                public var name: String?
                public var productDescription: String?
                /// Address_specs
                public var supportAddress: SupportAddress?
                public var supportEmail: String?
                public var supportPhone: String?
                public var supportURL: SupportURL?
                public var url: String?

                /// Address_specs
                public struct SupportAddress: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        return encoder.items
                    }
                }

                public struct SupportURL: Encodable {
                    public var string: String?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(string: String? = nil, object: Object? = nil) {
                        self.string = string
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(string, forKey: "string")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public init(mcc: String? = nil, name: String? = nil, productDescription: String? = nil, supportAddress: SupportAddress? = nil, supportEmail: String? = nil, supportPhone: String? = nil, supportURL: SupportURL? = nil, url: String? = nil) {
                    self.mcc = mcc
                    self.name = name
                    self.productDescription = productDescription
                    self.supportAddress = supportAddress
                    self.supportEmail = supportEmail
                    self.supportPhone = supportPhone
                    self.supportURL = supportURL
                    self.url = url
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(mcc, forKey: "mcc")
                    encoder.encode(name, forKey: "name")
                    encoder.encode(productDescription, forKey: "product_description")
                    encoder.encode(supportAddress, forKey: "support_address")
                    encoder.encode(supportEmail, forKey: "support_email")
                    encoder.encode(supportPhone, forKey: "support_phone")
                    encoder.encode(supportURL, forKey: "support_url")
                    encoder.encode(url, forKey: "url")
                    return encoder.items
                }
            }

            /// The business type.
            public enum BusinessType: String, Codable, CaseIterable {
                case company
                case governmentEntity = "government_entity"
                case individual
                case nonProfit = "non_profit"
            }

            /// Capabilities_param
            ///
            /// Each key of the dictionary represents a capability, and each capability maps to its settings (e.g. whether it has been requested or not). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive.
            public struct Capabilities: Encodable {
                /// Capability_param
                public var acssDebitPayments: AcssDebitPayments?
                /// Capability_param
                public var affirmPayments: AffirmPayments?
                /// Capability_param
                public var afterpayClearpayPayments: AfterpayClearpayPayments?
                /// Capability_param
                public var auBecsDebitPayments: AuBecsDebitPayments?
                /// Capability_param
                public var bacsDebitPayments: BacsDebitPayments?
                /// Capability_param
                public var bancontactPayments: BancontactPayments?
                /// Capability_param
                public var bankTransferPayments: BankTransferPayments?
                /// Capability_param
                public var blikPayments: BlikPayments?
                /// Capability_param
                public var boletoPayments: BoletoPayments?
                /// Capability_param
                public var cardIssuing: CardIssuing?
                /// Capability_param
                public var cardPayments: CardPayments?
                /// Capability_param
                public var cartesBancairesPayments: CartesBancairesPayments?
                /// Capability_param
                public var epsPayments: EpsPayments?
                /// Capability_param
                public var fpxPayments: FpxPayments?
                /// Capability_param
                public var giropayPayments: GiropayPayments?
                /// Capability_param
                public var grabpayPayments: GrabpayPayments?
                /// Capability_param
                public var idealPayments: IdealPayments?
                /// Capability_param
                public var jcbPayments: JcbPayments?
                /// Capability_param
                public var klarnaPayments: KlarnaPayments?
                /// Capability_param
                public var konbiniPayments: KonbiniPayments?
                /// Capability_param
                public var legacyPayments: LegacyPayments?
                /// Capability_param
                public var linkPayments: LinkPayments?
                /// Capability_param
                public var oxxoPayments: OxxoPayments?
                /// Capability_param
                public var p24Payments: P24Payments?
                /// Capability_param
                public var paynowPayments: PaynowPayments?
                /// Capability_param
                public var promptpayPayments: PromptpayPayments?
                /// Capability_param
                public var sepaDebitPayments: SepaDebitPayments?
                /// Capability_param
                public var sofortPayments: SofortPayments?
                /// Capability_param
                public var taxReportingUs1099K: TaxReportingUs1099K?
                /// Capability_param
                public var taxReportingUs1099Misc: TaxReportingUs1099Misc?
                /// Capability_param
                public var transfers: Transfers?
                /// Capability_param
                public var treasury: Treasury?
                /// Capability_param
                public var usBankAccountAchPayments: UsBankAccountAchPayments?

                /// Capability_param
                public struct AcssDebitPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct AffirmPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct AfterpayClearpayPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct AuBecsDebitPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct BacsDebitPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct BancontactPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct BankTransferPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct BlikPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct BoletoPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct CardIssuing: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct CardPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct CartesBancairesPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct EpsPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct FpxPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct GiropayPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct GrabpayPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct IdealPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct JcbPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct KlarnaPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct KonbiniPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct LegacyPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct LinkPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct OxxoPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct P24Payments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct PaynowPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct PromptpayPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct SepaDebitPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct SofortPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct TaxReportingUs1099K: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct TaxReportingUs1099Misc: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct Transfers: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct Treasury: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Capability_param
                public struct UsBankAccountAchPayments: Encodable {
                    public var isRequested: Bool?

                    public init(isRequested: Bool? = nil) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                public init(acssDebitPayments: AcssDebitPayments? = nil, affirmPayments: AffirmPayments? = nil, afterpayClearpayPayments: AfterpayClearpayPayments? = nil, auBecsDebitPayments: AuBecsDebitPayments? = nil, bacsDebitPayments: BacsDebitPayments? = nil, bancontactPayments: BancontactPayments? = nil, bankTransferPayments: BankTransferPayments? = nil, blikPayments: BlikPayments? = nil, boletoPayments: BoletoPayments? = nil, cardIssuing: CardIssuing? = nil, cardPayments: CardPayments? = nil, cartesBancairesPayments: CartesBancairesPayments? = nil, epsPayments: EpsPayments? = nil, fpxPayments: FpxPayments? = nil, giropayPayments: GiropayPayments? = nil, grabpayPayments: GrabpayPayments? = nil, idealPayments: IdealPayments? = nil, jcbPayments: JcbPayments? = nil, klarnaPayments: KlarnaPayments? = nil, konbiniPayments: KonbiniPayments? = nil, legacyPayments: LegacyPayments? = nil, linkPayments: LinkPayments? = nil, oxxoPayments: OxxoPayments? = nil, p24Payments: P24Payments? = nil, paynowPayments: PaynowPayments? = nil, promptpayPayments: PromptpayPayments? = nil, sepaDebitPayments: SepaDebitPayments? = nil, sofortPayments: SofortPayments? = nil, taxReportingUs1099K: TaxReportingUs1099K? = nil, taxReportingUs1099Misc: TaxReportingUs1099Misc? = nil, transfers: Transfers? = nil, treasury: Treasury? = nil, usBankAccountAchPayments: UsBankAccountAchPayments? = nil) {
                    self.acssDebitPayments = acssDebitPayments
                    self.affirmPayments = affirmPayments
                    self.afterpayClearpayPayments = afterpayClearpayPayments
                    self.auBecsDebitPayments = auBecsDebitPayments
                    self.bacsDebitPayments = bacsDebitPayments
                    self.bancontactPayments = bancontactPayments
                    self.bankTransferPayments = bankTransferPayments
                    self.blikPayments = blikPayments
                    self.boletoPayments = boletoPayments
                    self.cardIssuing = cardIssuing
                    self.cardPayments = cardPayments
                    self.cartesBancairesPayments = cartesBancairesPayments
                    self.epsPayments = epsPayments
                    self.fpxPayments = fpxPayments
                    self.giropayPayments = giropayPayments
                    self.grabpayPayments = grabpayPayments
                    self.idealPayments = idealPayments
                    self.jcbPayments = jcbPayments
                    self.klarnaPayments = klarnaPayments
                    self.konbiniPayments = konbiniPayments
                    self.legacyPayments = legacyPayments
                    self.linkPayments = linkPayments
                    self.oxxoPayments = oxxoPayments
                    self.p24Payments = p24Payments
                    self.paynowPayments = paynowPayments
                    self.promptpayPayments = promptpayPayments
                    self.sepaDebitPayments = sepaDebitPayments
                    self.sofortPayments = sofortPayments
                    self.taxReportingUs1099K = taxReportingUs1099K
                    self.taxReportingUs1099Misc = taxReportingUs1099Misc
                    self.transfers = transfers
                    self.treasury = treasury
                    self.usBankAccountAchPayments = usBankAccountAchPayments
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(acssDebitPayments, forKey: "acss_debit_payments")
                    encoder.encode(affirmPayments, forKey: "affirm_payments")
                    encoder.encode(afterpayClearpayPayments, forKey: "afterpay_clearpay_payments")
                    encoder.encode(auBecsDebitPayments, forKey: "au_becs_debit_payments")
                    encoder.encode(bacsDebitPayments, forKey: "bacs_debit_payments")
                    encoder.encode(bancontactPayments, forKey: "bancontact_payments")
                    encoder.encode(bankTransferPayments, forKey: "bank_transfer_payments")
                    encoder.encode(blikPayments, forKey: "blik_payments")
                    encoder.encode(boletoPayments, forKey: "boleto_payments")
                    encoder.encode(cardIssuing, forKey: "card_issuing")
                    encoder.encode(cardPayments, forKey: "card_payments")
                    encoder.encode(cartesBancairesPayments, forKey: "cartes_bancaires_payments")
                    encoder.encode(epsPayments, forKey: "eps_payments")
                    encoder.encode(fpxPayments, forKey: "fpx_payments")
                    encoder.encode(giropayPayments, forKey: "giropay_payments")
                    encoder.encode(grabpayPayments, forKey: "grabpay_payments")
                    encoder.encode(idealPayments, forKey: "ideal_payments")
                    encoder.encode(jcbPayments, forKey: "jcb_payments")
                    encoder.encode(klarnaPayments, forKey: "klarna_payments")
                    encoder.encode(konbiniPayments, forKey: "konbini_payments")
                    encoder.encode(legacyPayments, forKey: "legacy_payments")
                    encoder.encode(linkPayments, forKey: "link_payments")
                    encoder.encode(oxxoPayments, forKey: "oxxo_payments")
                    encoder.encode(p24Payments, forKey: "p24_payments")
                    encoder.encode(paynowPayments, forKey: "paynow_payments")
                    encoder.encode(promptpayPayments, forKey: "promptpay_payments")
                    encoder.encode(sepaDebitPayments, forKey: "sepa_debit_payments")
                    encoder.encode(sofortPayments, forKey: "sofort_payments")
                    encoder.encode(taxReportingUs1099K, forKey: "tax_reporting_us_1099_k")
                    encoder.encode(taxReportingUs1099Misc, forKey: "tax_reporting_us_1099_misc")
                    encoder.encode(transfers, forKey: "transfers")
                    encoder.encode(treasury, forKey: "treasury")
                    encoder.encode(usBankAccountAchPayments, forKey: "us_bank_account_ach_payments")
                    return encoder.items
                }
            }

            /// Company_specs
            ///
            /// Information about the company or business. This field is available for any `business_type`.
            public struct Company: Encodable {
                /// Address_specs
                public var address: Address?
                /// Japan_address_kana_specs
                public var addressKana: AddressKana?
                /// Japan_address_kanji_specs
                public var addressKanji: AddressKanji?
                public var isDirectorsProvided: Bool?
                public var isExecutivesProvided: Bool?
                public var name: String?
                public var nameKana: String?
                public var nameKanji: String?
                public var isOwnersProvided: Bool?
                /// Company_ownership_declaration
                public var ownershipDeclaration: OwnershipDeclaration?
                public var phone: String?
                public var registrationNumber: String?
                public var structure: Structure?
                public var taxID: String?
                public var taxIDRegistrar: String?
                public var vatID: String?
                /// Verification_specs
                public var verification: Verification?

                /// Address_specs
                public struct Address: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        return encoder.items
                    }
                }

                /// Japan_address_kana_specs
                public struct AddressKana: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?
                    public var town: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                        self.town = town
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        encoder.encode(town, forKey: "town")
                        return encoder.items
                    }
                }

                /// Japan_address_kanji_specs
                public struct AddressKanji: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?
                    public var town: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                        self.town = town
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        encoder.encode(town, forKey: "town")
                        return encoder.items
                    }
                }

                /// Company_ownership_declaration
                public struct OwnershipDeclaration: Encodable {
                    public var date: Int?
                    public var ip: String?
                    public var userAgent: String?

                    public init(date: Int? = nil, ip: String? = nil, userAgent: String? = nil) {
                        self.date = date
                        self.ip = ip
                        self.userAgent = userAgent
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(date, forKey: "date")
                        encoder.encode(ip, forKey: "ip")
                        encoder.encode(userAgent, forKey: "user_agent")
                        return encoder.items
                    }
                }

                public enum Structure: String, Codable, CaseIterable {
                    case empty = ""
                    case freeZoneEstablishment = "free_zone_establishment"
                    case freeZoneLlc = "free_zone_llc"
                    case governmentInstrumentality = "government_instrumentality"
                    case governmentalUnit = "governmental_unit"
                    case incorporatedNonProfit = "incorporated_non_profit"
                    case limitedLiabilityPartnership = "limited_liability_partnership"
                    case llc
                    case multiMemberLlc = "multi_member_llc"
                    case privateCompany = "private_company"
                    case privateCorporation = "private_corporation"
                    case privatePartnership = "private_partnership"
                    case publicCompany = "public_company"
                    case publicCorporation = "public_corporation"
                    case publicPartnership = "public_partnership"
                    case singleMemberLlc = "single_member_llc"
                    case soleEstablishment = "sole_establishment"
                    case soleProprietorship = "sole_proprietorship"
                    case taxExemptGovernmentInstrumentality = "tax_exempt_government_instrumentality"
                    case unincorporatedAssociation = "unincorporated_association"
                    case unincorporatedNonProfit = "unincorporated_non_profit"
                }

                /// Verification_specs
                public struct Verification: Encodable {
                    /// Verification_document_specs
                    public var document: Document?

                    /// Verification_document_specs
                    public struct Document: Encodable {
                        public var back: String?
                        public var front: String?

                        public init(back: String? = nil, front: String? = nil) {
                            self.back = back
                            self.front = front
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(back, forKey: "back")
                            encoder.encode(front, forKey: "front")
                            return encoder.items
                        }
                    }

                    public init(document: Document? = nil) {
                        self.document = document
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(document, forKey: "document")
                        return encoder.items
                    }
                }

                public init(address: Address? = nil, addressKana: AddressKana? = nil, addressKanji: AddressKanji? = nil, isDirectorsProvided: Bool? = nil, isExecutivesProvided: Bool? = nil, name: String? = nil, nameKana: String? = nil, nameKanji: String? = nil, isOwnersProvided: Bool? = nil, ownershipDeclaration: OwnershipDeclaration? = nil, phone: String? = nil, registrationNumber: String? = nil, structure: Structure? = nil, taxID: String? = nil, taxIDRegistrar: String? = nil, vatID: String? = nil, verification: Verification? = nil) {
                    self.address = address
                    self.addressKana = addressKana
                    self.addressKanji = addressKanji
                    self.isDirectorsProvided = isDirectorsProvided
                    self.isExecutivesProvided = isExecutivesProvided
                    self.name = name
                    self.nameKana = nameKana
                    self.nameKanji = nameKanji
                    self.isOwnersProvided = isOwnersProvided
                    self.ownershipDeclaration = ownershipDeclaration
                    self.phone = phone
                    self.registrationNumber = registrationNumber
                    self.structure = structure
                    self.taxID = taxID
                    self.taxIDRegistrar = taxIDRegistrar
                    self.vatID = vatID
                    self.verification = verification
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(address, forKey: "address")
                    encoder.encode(addressKana, forKey: "address_kana")
                    encoder.encode(addressKanji, forKey: "address_kanji")
                    encoder.encode(isDirectorsProvided, forKey: "directors_provided")
                    encoder.encode(isExecutivesProvided, forKey: "executives_provided")
                    encoder.encode(name, forKey: "name")
                    encoder.encode(nameKana, forKey: "name_kana")
                    encoder.encode(nameKanji, forKey: "name_kanji")
                    encoder.encode(isOwnersProvided, forKey: "owners_provided")
                    encoder.encode(ownershipDeclaration, forKey: "ownership_declaration")
                    encoder.encode(phone, forKey: "phone")
                    encoder.encode(registrationNumber, forKey: "registration_number")
                    encoder.encode(structure, forKey: "structure")
                    encoder.encode(taxID, forKey: "tax_id")
                    encoder.encode(taxIDRegistrar, forKey: "tax_id_registrar")
                    encoder.encode(vatID, forKey: "vat_id")
                    encoder.encode(verification, forKey: "verification")
                    return encoder.items
                }
            }

            /// Documents_specs
            ///
            /// Documents that may be submitted to satisfy various informational requests.
            public struct Documents: Encodable {
                /// Documents_param
                public var bankAccountOwnershipVerification: BankAccountOwnershipVerification?
                /// Documents_param
                public var companyLicense: CompanyLicense?
                /// Documents_param
                public var companyMemorandumOfAssociation: CompanyMemorandumOfAssociation?
                /// Documents_param
                public var companyMinisterialDecree: CompanyMinisterialDecree?
                /// Documents_param
                public var companyRegistrationVerification: CompanyRegistrationVerification?
                /// Documents_param
                public var companyTaxIDVerification: CompanyTaxIDVerification?
                /// Documents_param
                public var proofOfRegistration: ProofOfRegistration?

                /// Documents_param
                public struct BankAccountOwnershipVerification: Encodable {
                    public var files: [String]?

                    public init(files: [String]? = nil) {
                        self.files = files
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(files, forKey: "files")
                        return encoder.items
                    }
                }

                /// Documents_param
                public struct CompanyLicense: Encodable {
                    public var files: [String]?

                    public init(files: [String]? = nil) {
                        self.files = files
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(files, forKey: "files")
                        return encoder.items
                    }
                }

                /// Documents_param
                public struct CompanyMemorandumOfAssociation: Encodable {
                    public var files: [String]?

                    public init(files: [String]? = nil) {
                        self.files = files
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(files, forKey: "files")
                        return encoder.items
                    }
                }

                /// Documents_param
                public struct CompanyMinisterialDecree: Encodable {
                    public var files: [String]?

                    public init(files: [String]? = nil) {
                        self.files = files
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(files, forKey: "files")
                        return encoder.items
                    }
                }

                /// Documents_param
                public struct CompanyRegistrationVerification: Encodable {
                    public var files: [String]?

                    public init(files: [String]? = nil) {
                        self.files = files
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(files, forKey: "files")
                        return encoder.items
                    }
                }

                /// Documents_param
                public struct CompanyTaxIDVerification: Encodable {
                    public var files: [String]?

                    public init(files: [String]? = nil) {
                        self.files = files
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(files, forKey: "files")
                        return encoder.items
                    }
                }

                /// Documents_param
                public struct ProofOfRegistration: Encodable {
                    public var files: [String]?

                    public init(files: [String]? = nil) {
                        self.files = files
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(files, forKey: "files")
                        return encoder.items
                    }
                }

                public init(bankAccountOwnershipVerification: BankAccountOwnershipVerification? = nil, companyLicense: CompanyLicense? = nil, companyMemorandumOfAssociation: CompanyMemorandumOfAssociation? = nil, companyMinisterialDecree: CompanyMinisterialDecree? = nil, companyRegistrationVerification: CompanyRegistrationVerification? = nil, companyTaxIDVerification: CompanyTaxIDVerification? = nil, proofOfRegistration: ProofOfRegistration? = nil) {
                    self.bankAccountOwnershipVerification = bankAccountOwnershipVerification
                    self.companyLicense = companyLicense
                    self.companyMemorandumOfAssociation = companyMemorandumOfAssociation
                    self.companyMinisterialDecree = companyMinisterialDecree
                    self.companyRegistrationVerification = companyRegistrationVerification
                    self.companyTaxIDVerification = companyTaxIDVerification
                    self.proofOfRegistration = proofOfRegistration
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(bankAccountOwnershipVerification, forKey: "bank_account_ownership_verification")
                    encoder.encode(companyLicense, forKey: "company_license")
                    encoder.encode(companyMemorandumOfAssociation, forKey: "company_memorandum_of_association")
                    encoder.encode(companyMinisterialDecree, forKey: "company_ministerial_decree")
                    encoder.encode(companyRegistrationVerification, forKey: "company_registration_verification")
                    encoder.encode(companyTaxIDVerification, forKey: "company_tax_id_verification")
                    encoder.encode(proofOfRegistration, forKey: "proof_of_registration")
                    return encoder.items
                }
            }

            /// Individual_specs
            ///
            /// Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.
            public struct Individual: Encodable {
                /// Address_specs
                public var address: Address?
                /// Japan_address_kana_specs
                public var addressKana: AddressKana?
                /// Japan_address_kanji_specs
                public var addressKanji: AddressKanji?
                public var dob: Dob?
                public var email: String?
                public var firstName: String?
                public var firstNameKana: String?
                public var firstNameKanji: String?
                public var fullNameAliases: FullNameAliases?
                public var gender: String?
                public var idNumber: String?
                public var idNumberSecondary: String?
                public var lastName: String?
                public var lastNameKana: String?
                public var lastNameKanji: String?
                public var maidenName: String?
                public var metadata: Metadata?
                public var phone: String?
                public var politicalExposure: PoliticalExposure?
                /// Address_specs
                public var registeredAddress: RegisteredAddress?
                public var ssnLast4: String?
                /// Person_verification_specs
                public var verification: Verification?

                /// Address_specs
                public struct Address: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        return encoder.items
                    }
                }

                /// Japan_address_kana_specs
                public struct AddressKana: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?
                    public var town: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                        self.town = town
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        encoder.encode(town, forKey: "town")
                        return encoder.items
                    }
                }

                /// Japan_address_kanji_specs
                public struct AddressKanji: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?
                    public var town: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                        self.town = town
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        encoder.encode(town, forKey: "town")
                        return encoder.items
                    }
                }

                public struct Dob: Encodable {
                    /// Date_of_birth_specs
                    public var a: A?
                    public var b: B?

                    /// Date_of_birth_specs
                    public struct A: Encodable {
                        public var day: Int
                        public var month: Int
                        public var year: Int

                        public init(day: Int, month: Int, year: Int) {
                            self.day = day
                            self.month = month
                            self.year = year
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(day, forKey: "day")
                            encoder.encode(month, forKey: "month")
                            encoder.encode(year, forKey: "year")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public struct FullNameAliases: Encodable {
                    public var strings: [String]?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(strings: [String]? = nil, object: Object? = nil) {
                        self.strings = strings
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(strings, forKey: "strings")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public struct Metadata: Encodable {
                    public var stringString: [String: String]?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(stringString: [String: String]? = nil, object: Object? = nil) {
                        self.stringString = stringString
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(stringString, forKey: "stringString")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public enum PoliticalExposure: String, Codable, CaseIterable {
                    case existing
                    case `none`
                }

                /// Address_specs
                public struct RegisteredAddress: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        return encoder.items
                    }
                }

                /// Person_verification_specs
                public struct Verification: Encodable {
                    /// Person_verification_document_specs
                    public var additionalDocument: AdditionalDocument?
                    /// Person_verification_document_specs
                    public var document: Document?

                    /// Person_verification_document_specs
                    public struct AdditionalDocument: Encodable {
                        public var back: String?
                        public var front: String?

                        public init(back: String? = nil, front: String? = nil) {
                            self.back = back
                            self.front = front
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(back, forKey: "back")
                            encoder.encode(front, forKey: "front")
                            return encoder.items
                        }
                    }

                    /// Person_verification_document_specs
                    public struct Document: Encodable {
                        public var back: String?
                        public var front: String?

                        public init(back: String? = nil, front: String? = nil) {
                            self.back = back
                            self.front = front
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(back, forKey: "back")
                            encoder.encode(front, forKey: "front")
                            return encoder.items
                        }
                    }

                    public init(additionalDocument: AdditionalDocument? = nil, document: Document? = nil) {
                        self.additionalDocument = additionalDocument
                        self.document = document
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(additionalDocument, forKey: "additional_document")
                        encoder.encode(document, forKey: "document")
                        return encoder.items
                    }
                }

                public init(address: Address? = nil, addressKana: AddressKana? = nil, addressKanji: AddressKanji? = nil, dob: Dob? = nil, email: String? = nil, firstName: String? = nil, firstNameKana: String? = nil, firstNameKanji: String? = nil, fullNameAliases: FullNameAliases? = nil, gender: String? = nil, idNumber: String? = nil, idNumberSecondary: String? = nil, lastName: String? = nil, lastNameKana: String? = nil, lastNameKanji: String? = nil, maidenName: String? = nil, metadata: Metadata? = nil, phone: String? = nil, politicalExposure: PoliticalExposure? = nil, registeredAddress: RegisteredAddress? = nil, ssnLast4: String? = nil, verification: Verification? = nil) {
                    self.address = address
                    self.addressKana = addressKana
                    self.addressKanji = addressKanji
                    self.dob = dob
                    self.email = email
                    self.firstName = firstName
                    self.firstNameKana = firstNameKana
                    self.firstNameKanji = firstNameKanji
                    self.fullNameAliases = fullNameAliases
                    self.gender = gender
                    self.idNumber = idNumber
                    self.idNumberSecondary = idNumberSecondary
                    self.lastName = lastName
                    self.lastNameKana = lastNameKana
                    self.lastNameKanji = lastNameKanji
                    self.maidenName = maidenName
                    self.metadata = metadata
                    self.phone = phone
                    self.politicalExposure = politicalExposure
                    self.registeredAddress = registeredAddress
                    self.ssnLast4 = ssnLast4
                    self.verification = verification
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(address, forKey: "address")
                    encoder.encode(addressKana, forKey: "address_kana")
                    encoder.encode(addressKanji, forKey: "address_kanji")
                    encoder.encode(dob, forKey: "dob")
                    encoder.encode(email, forKey: "email")
                    encoder.encode(firstName, forKey: "first_name")
                    encoder.encode(firstNameKana, forKey: "first_name_kana")
                    encoder.encode(firstNameKanji, forKey: "first_name_kanji")
                    encoder.encode(fullNameAliases, forKey: "full_name_aliases")
                    encoder.encode(gender, forKey: "gender")
                    encoder.encode(idNumber, forKey: "id_number")
                    encoder.encode(idNumberSecondary, forKey: "id_number_secondary")
                    encoder.encode(lastName, forKey: "last_name")
                    encoder.encode(lastNameKana, forKey: "last_name_kana")
                    encoder.encode(lastNameKanji, forKey: "last_name_kanji")
                    encoder.encode(maidenName, forKey: "maiden_name")
                    encoder.encode(metadata, forKey: "metadata")
                    encoder.encode(phone, forKey: "phone")
                    encoder.encode(politicalExposure, forKey: "political_exposure")
                    encoder.encode(registeredAddress, forKey: "registered_address")
                    encoder.encode(ssnLast4, forKey: "ssn_last_4")
                    encoder.encode(verification, forKey: "verification")
                    return encoder.items
                }
            }

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// Settings_specs_update
            ///
            /// Options for customizing how the account functions within Stripe.
            public struct Settings: Encodable {
                /// Branding_settings_specs
                public var branding: Branding?
                /// Card_issuing_settings_specs
                public var cardIssuing: CardIssuing?
                /// Card_payments_settings_specs
                public var cardPayments: CardPayments?
                /// Payments_settings_specs
                public var payments: Payments?
                /// Payout_settings_specs
                public var payouts: Payouts?
                /// Treasury_settings_specs
                public var treasury: Treasury?

                /// Branding_settings_specs
                public struct Branding: Encodable {
                    public var icon: String?
                    public var logo: String?
                    public var primaryColor: String?
                    public var secondaryColor: String?

                    public init(icon: String? = nil, logo: String? = nil, primaryColor: String? = nil, secondaryColor: String? = nil) {
                        self.icon = icon
                        self.logo = logo
                        self.primaryColor = primaryColor
                        self.secondaryColor = secondaryColor
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(icon, forKey: "icon")
                        encoder.encode(logo, forKey: "logo")
                        encoder.encode(primaryColor, forKey: "primary_color")
                        encoder.encode(secondaryColor, forKey: "secondary_color")
                        return encoder.items
                    }
                }

                /// Card_issuing_settings_specs
                public struct CardIssuing: Encodable {
                    /// Settings_terms_of_service_specs
                    public var tosAcceptance: TosAcceptance?

                    /// Settings_terms_of_service_specs
                    public struct TosAcceptance: Encodable {
                        public var date: Int?
                        public var ip: String?
                        public var userAgent: String?

                        public init(date: Int? = nil, ip: String? = nil, userAgent: String? = nil) {
                            self.date = date
                            self.ip = ip
                            self.userAgent = userAgent
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(date, forKey: "date")
                            encoder.encode(ip, forKey: "ip")
                            encoder.encode(userAgent, forKey: "user_agent")
                            return encoder.items
                        }
                    }

                    public init(tosAcceptance: TosAcceptance? = nil) {
                        self.tosAcceptance = tosAcceptance
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(tosAcceptance, forKey: "tos_acceptance")
                        return encoder.items
                    }
                }

                /// Card_payments_settings_specs
                public struct CardPayments: Encodable {
                    /// Decline_charge_on_specs
                    public var declineOn: DeclineOn?
                    public var statementDescriptorPrefix: String?
                    public var statementDescriptorPrefixKana: StatementDescriptorPrefixKana?
                    public var statementDescriptorPrefixKanji: StatementDescriptorPrefixKanji?

                    /// Decline_charge_on_specs
                    public struct DeclineOn: Encodable {
                        public var isAvsFailure: Bool?
                        public var isCvcFailure: Bool?

                        public init(isAvsFailure: Bool? = nil, isCvcFailure: Bool? = nil) {
                            self.isAvsFailure = isAvsFailure
                            self.isCvcFailure = isCvcFailure
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isAvsFailure, forKey: "avs_failure")
                            encoder.encode(isCvcFailure, forKey: "cvc_failure")
                            return encoder.items
                        }
                    }

                    public struct StatementDescriptorPrefixKana: Encodable {
                        public var string: String?
                        public var object: Object?

                        public enum Object: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(string: String? = nil, object: Object? = nil) {
                            self.string = string
                            self.object = object
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(string, forKey: "string")
                            encoder.encode(object, forKey: "object")
                            return encoder.items
                        }
                    }

                    public struct StatementDescriptorPrefixKanji: Encodable {
                        public var string: String?
                        public var object: Object?

                        public enum Object: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(string: String? = nil, object: Object? = nil) {
                            self.string = string
                            self.object = object
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(string, forKey: "string")
                            encoder.encode(object, forKey: "object")
                            return encoder.items
                        }
                    }

                    public init(declineOn: DeclineOn? = nil, statementDescriptorPrefix: String? = nil, statementDescriptorPrefixKana: StatementDescriptorPrefixKana? = nil, statementDescriptorPrefixKanji: StatementDescriptorPrefixKanji? = nil) {
                        self.declineOn = declineOn
                        self.statementDescriptorPrefix = statementDescriptorPrefix
                        self.statementDescriptorPrefixKana = statementDescriptorPrefixKana
                        self.statementDescriptorPrefixKanji = statementDescriptorPrefixKanji
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(declineOn, forKey: "decline_on")
                        encoder.encode(statementDescriptorPrefix, forKey: "statement_descriptor_prefix")
                        encoder.encode(statementDescriptorPrefixKana, forKey: "statement_descriptor_prefix_kana")
                        encoder.encode(statementDescriptorPrefixKanji, forKey: "statement_descriptor_prefix_kanji")
                        return encoder.items
                    }
                }

                /// Payments_settings_specs
                public struct Payments: Encodable {
                    public var statementDescriptor: String?
                    public var statementDescriptorKana: String?
                    public var statementDescriptorKanji: String?

                    public init(statementDescriptor: String? = nil, statementDescriptorKana: String? = nil, statementDescriptorKanji: String? = nil) {
                        self.statementDescriptor = statementDescriptor
                        self.statementDescriptorKana = statementDescriptorKana
                        self.statementDescriptorKanji = statementDescriptorKanji
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(statementDescriptor, forKey: "statement_descriptor")
                        encoder.encode(statementDescriptorKana, forKey: "statement_descriptor_kana")
                        encoder.encode(statementDescriptorKanji, forKey: "statement_descriptor_kanji")
                        return encoder.items
                    }
                }

                /// Payout_settings_specs
                public struct Payouts: Encodable {
                    public var isDebitNegativeBalances: Bool?
                    /// Transfer_schedule_specs
                    public var schedule: Schedule?
                    public var statementDescriptor: String?

                    /// Transfer_schedule_specs
                    public struct Schedule: Encodable {
                        public var delayDays: DelayDays?
                        public var interval: Interval?
                        public var monthlyAnchor: Int?
                        public var weeklyAnchor: WeeklyAnchor?

                        public struct DelayDays: Encodable {
                            public var object: Object?
                            public var int: Int?

                            public enum Object: String, Codable, CaseIterable {
                                case minimum
                            }

                            public init(object: Object? = nil, int: Int? = nil) {
                                self.object = object
                                self.int = int
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(object, forKey: "object")
                                encoder.encode(int, forKey: "int")
                                return encoder.items
                            }
                        }

                        public enum Interval: String, Codable, CaseIterable {
                            case daily
                            case manual
                            case monthly
                            case weekly
                        }

                        public enum WeeklyAnchor: String, Codable, CaseIterable {
                            case friday
                            case monday
                            case saturday
                            case sunday
                            case thursday
                            case tuesday
                            case wednesday
                        }

                        public init(delayDays: DelayDays? = nil, interval: Interval? = nil, monthlyAnchor: Int? = nil, weeklyAnchor: WeeklyAnchor? = nil) {
                            self.delayDays = delayDays
                            self.interval = interval
                            self.monthlyAnchor = monthlyAnchor
                            self.weeklyAnchor = weeklyAnchor
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(delayDays, forKey: "delay_days")
                            encoder.encode(interval, forKey: "interval")
                            encoder.encode(monthlyAnchor, forKey: "monthly_anchor")
                            encoder.encode(weeklyAnchor, forKey: "weekly_anchor")
                            return encoder.items
                        }
                    }

                    public init(isDebitNegativeBalances: Bool? = nil, schedule: Schedule? = nil, statementDescriptor: String? = nil) {
                        self.isDebitNegativeBalances = isDebitNegativeBalances
                        self.schedule = schedule
                        self.statementDescriptor = statementDescriptor
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isDebitNegativeBalances, forKey: "debit_negative_balances")
                        encoder.encode(schedule, forKey: "schedule")
                        encoder.encode(statementDescriptor, forKey: "statement_descriptor")
                        return encoder.items
                    }
                }

                /// Treasury_settings_specs
                public struct Treasury: Encodable {
                    /// Settings_terms_of_service_specs
                    public var tosAcceptance: TosAcceptance?

                    /// Settings_terms_of_service_specs
                    public struct TosAcceptance: Encodable {
                        public var date: Int?
                        public var ip: String?
                        public var userAgent: String?

                        public init(date: Int? = nil, ip: String? = nil, userAgent: String? = nil) {
                            self.date = date
                            self.ip = ip
                            self.userAgent = userAgent
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(date, forKey: "date")
                            encoder.encode(ip, forKey: "ip")
                            encoder.encode(userAgent, forKey: "user_agent")
                            return encoder.items
                        }
                    }

                    public init(tosAcceptance: TosAcceptance? = nil) {
                        self.tosAcceptance = tosAcceptance
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(tosAcceptance, forKey: "tos_acceptance")
                        return encoder.items
                    }
                }

                public init(branding: Branding? = nil, cardIssuing: CardIssuing? = nil, cardPayments: CardPayments? = nil, payments: Payments? = nil, payouts: Payouts? = nil, treasury: Treasury? = nil) {
                    self.branding = branding
                    self.cardIssuing = cardIssuing
                    self.cardPayments = cardPayments
                    self.payments = payments
                    self.payouts = payouts
                    self.treasury = treasury
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(branding, forKey: "branding")
                    encoder.encode(cardIssuing, forKey: "card_issuing")
                    encoder.encode(cardPayments, forKey: "card_payments")
                    encoder.encode(payments, forKey: "payments")
                    encoder.encode(payouts, forKey: "payouts")
                    encoder.encode(treasury, forKey: "treasury")
                    return encoder.items
                }
            }

            /// Tos_acceptance_specs
            ///
            /// Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).
            public struct TosAcceptance: Encodable {
                public var date: Int?
                public var ip: String?
                public var serviceAgreement: String?
                public var userAgent: String?

                public init(date: Int? = nil, ip: String? = nil, serviceAgreement: String? = nil, userAgent: String? = nil) {
                    self.date = date
                    self.ip = ip
                    self.serviceAgreement = serviceAgreement
                    self.userAgent = userAgent
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(date, forKey: "date")
                    encoder.encode(ip, forKey: "ip")
                    encoder.encode(serviceAgreement, forKey: "service_agreement")
                    encoder.encode(userAgent, forKey: "user_agent")
                    return encoder.items
                }
            }

            public init(accountToken: String? = nil, bankAccount: BankAccount? = nil, businessProfile: BusinessProfile? = nil, businessType: BusinessType? = nil, capabilities: Capabilities? = nil, company: Company? = nil, defaultCurrency: String? = nil, documents: Documents? = nil, email: String? = nil, expand: [String]? = nil, externalAccount: String? = nil, individual: Individual? = nil, metadata: Metadata? = nil, settings: Settings? = nil, tosAcceptance: TosAcceptance? = nil) {
                self.accountToken = accountToken
                self.bankAccount = bankAccount
                self.businessProfile = businessProfile
                self.businessType = businessType
                self.capabilities = capabilities
                self.company = company
                self.defaultCurrency = defaultCurrency
                self.documents = documents
                self.email = email
                self.expand = expand
                self.externalAccount = externalAccount
                self.individual = individual
                self.metadata = metadata
                self.settings = settings
                self.tosAcceptance = tosAcceptance
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(accountToken, forKey: "account_token")
                encoder.encode(bankAccount, forKey: "bank_account")
                encoder.encode(businessProfile, forKey: "business_profile")
                encoder.encode(businessType, forKey: "business_type")
                encoder.encode(capabilities, forKey: "capabilities")
                encoder.encode(company, forKey: "company")
                encoder.encode(defaultCurrency, forKey: "default_currency")
                encoder.encode(documents, forKey: "documents")
                encoder.encode(email, forKey: "email")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(externalAccount, forKey: "external_account")
                encoder.encode(individual, forKey: "individual")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(settings, forKey: "settings")
                encoder.encode(tosAcceptance, forKey: "tos_acceptance")
                return encoder.items
            }
        }

        /// <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p>
        /// 
        /// <p>Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p>
        /// 
        /// <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
        public var delete: Request<StripeKit.DeletedAccount> {
            Request(method: "DELETE", url: path, id: "DeleteAccountsAccount")
        }
    }
}
