// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Terminal.Readers {
    public func reader(_ reader: String) -> WithReader {
        WithReader(path: "\(path)/\(reader)")
    }

    public struct WithReader {
        /// Path: `/v1/terminal/readers/{reader}`
        public let path: String

        /// <p>Retrieves a <code>Reader</code> object.</p>
        public func get(expand: [String]? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetTerminalReadersReader")
        }

        public struct GetResponse: Decodable {
            /// TerminalReaderReader
            ///
            /// A Reader represents a physical device for accepting payment details.
            /// 
            /// Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/payments/connect-reader).
            public var terminalReader: StripeKit.TerminalReader?
            /// TerminalReaderDeletedReader
            public var deletedTerminalReader: StripeKit.DeletedTerminalReader?

            public init(terminalReader: StripeKit.TerminalReader? = nil, deletedTerminalReader: StripeKit.DeletedTerminalReader? = nil) {
                self.terminalReader = terminalReader
                self.deletedTerminalReader = deletedTerminalReader
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.terminalReader = try? container.decode(StripeKit.TerminalReader.self)
                self.deletedTerminalReader = try? container.decode(StripeKit.DeletedTerminalReader.self)
            }
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
        public func post(_ body: PostRequest? = nil) -> Request<PostResponse> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostTerminalReadersReader")
        }

        public struct PostResponse: Decodable {
            /// TerminalReaderReader
            ///
            /// A Reader represents a physical device for accepting payment details.
            /// 
            /// Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/payments/connect-reader).
            public var terminalReader: StripeKit.TerminalReader?
            /// TerminalReaderDeletedReader
            public var deletedTerminalReader: StripeKit.DeletedTerminalReader?

            public init(terminalReader: StripeKit.TerminalReader? = nil, deletedTerminalReader: StripeKit.DeletedTerminalReader? = nil) {
                self.terminalReader = terminalReader
                self.deletedTerminalReader = deletedTerminalReader
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.terminalReader = try? container.decode(StripeKit.TerminalReader.self)
                self.deletedTerminalReader = try? container.decode(StripeKit.DeletedTerminalReader.self)
            }
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The new label of the reader.
            public var label: String?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            public init(expand: [String]? = nil, label: String? = nil, metadata: Metadata? = nil) {
                self.expand = expand
                self.label = label
                self.metadata = metadata
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(label, forKey: "label")
                encoder.encode(metadata, forKey: "metadata")
                return encoder.items
            }
        }

        /// <p>Deletes a <code>Reader</code> object.</p>
        public var delete: Request<StripeKit.DeletedTerminalReader> {
            Request(method: "DELETE", url: path, id: "DeleteTerminalReadersReader")
        }
    }
}
