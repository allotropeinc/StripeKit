// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var products: Products {
        Products(path: "/v1/products")
    }

    public struct Products {
        /// Path: `/v1/products`
        public let path: String

        /// <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "GetProducts")
        }

        /// ProductList
        public struct GetResponse: Decodable {
            /// Details about each object.
            public var data: [StripeKit.Product]
            /// True if this list has another page of items after this one that can be fetched.
            public var hasMore: Bool
            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public var object: Object
            /// The URL where this list can be accessed.
            public var url: String

            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public enum Object: String, Codable, CaseIterable {
                case list
            }

            public init(data: [StripeKit.Product], hasMore: Bool, object: Object, url: String) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.data = try values.decode([StripeKit.Product].self, forKey: "data")
                self.hasMore = try values.decode(Bool.self, forKey: "has_more")
                self.object = try values.decode(Object.self, forKey: "object")
                self.url = try values.decode(String.self, forKey: "url")
            }
        }

        public struct GetParameters {
            public var isActive: Bool?
            public var created: Created?
            public var endingBefore: String?
            public var expand: [String]?
            public var ids: [String]?
            public var limit: Int?
            public var isShippable: Bool?
            public var startingAfter: String?
            public var url: String?

            public struct Created: Codable {
                /// Range_query_specs
                public var object: Object?
                public var int: Int?

                /// Range_query_specs
                public struct Object: Codable {
                    public var gt: Int?
                    public var gte: Int?
                    public var lt: Int?
                    public var lte: Int?

                    public init(gt: Int? = nil, gte: Int? = nil, lt: Int? = nil, lte: Int? = nil) {
                        self.gt = gt
                        self.gte = gte
                        self.lt = lt
                        self.lte = lte
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(gt, forKey: "gt")
                        encoder.encode(gte, forKey: "gte")
                        encoder.encode(lt, forKey: "lt")
                        encoder.encode(lte, forKey: "lte")
                        return encoder.items
                    }
                }

                public init(object: Object? = nil, int: Int? = nil) {
                    self.object = object
                    self.int = int
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(object, forKey: "object")
                    encoder.encode(int, forKey: "int")
                    return encoder.items
                }
            }

            public init(isActive: Bool? = nil, created: Created? = nil, endingBefore: String? = nil, expand: [String]? = nil, ids: [String]? = nil, limit: Int? = nil, isShippable: Bool? = nil, startingAfter: String? = nil, url: String? = nil) {
                self.isActive = isActive
                self.created = created
                self.endingBefore = endingBefore
                self.expand = expand
                self.ids = ids
                self.limit = limit
                self.isShippable = isShippable
                self.startingAfter = startingAfter
                self.url = url
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isActive, forKey: "active")
                encoder.encode(created, forKey: "created", isDeepObject: true)
                encoder.encode(endingBefore, forKey: "ending_before")
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(ids, forKey: "ids", isDeepObject: true)
                encoder.encode(limit, forKey: "limit")
                encoder.encode(isShippable, forKey: "shippable")
                encoder.encode(startingAfter, forKey: "starting_after")
                encoder.encode(url, forKey: "url")
                return encoder.items
            }
        }

        /// <p>Creates a new product object.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.Product> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostProducts")
        }

        public struct PostRequest: Encodable {
            /// Whether the product is currently available for purchase. Defaults to `true`.
            public var isActive: Bool?
            /// Price_data_without_product
            ///
            /// Data used to generate a new [Price](https://stripe.com/docs/api/prices) object. This Price will be set as the default price for this product.
            public var defaultPriceData: DefaultPriceData?
            /// The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
            public var description: String?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.
            public var id: String?
            /// A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
            public var images: [String]?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: [String: String]?
            /// The product's name, meant to be displayable to the customer.
            public var name: String
            /// Package_dimensions_specs
            ///
            /// The dimensions of this product for shipping purposes.
            public var packageDimensions: PackageDimensions?
            /// Whether this product is shipped (i.e., physical goods).
            public var isShippable: Bool?
            /// An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
            /// 
            /// This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
            ///  It must contain at least one letter.
            public var statementDescriptor: String?
            /// A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
            public var taxCode: String?
            /// A label that represents units of this product in Stripe and on customersâ€™ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
            public var unitLabel: String?
            /// A URL of a publicly-accessible webpage for this product.
            public var url: String?

            /// Price_data_without_product
            ///
            /// Data used to generate a new [Price](https://stripe.com/docs/api/prices) object. This Price will be set as the default price for this product.
            public struct DefaultPriceData: Encodable {
                public var currency: String
                public var currencyOptions: [String: CurrencyOption]?
                /// Recurring_adhoc
                public var recurring: Recurring?
                public var taxBehavior: TaxBehavior?
                public var unitAmount: Int?
                public var unitAmountDecimal: String?

                /// Currency_option
                public struct CurrencyOption: Encodable {
                    /// Custom_unit_amount
                    public var customUnitAmount: CustomUnitAmount?
                    public var taxBehavior: TaxBehavior?
                    public var tiers: [Tier]?
                    public var unitAmount: Int?
                    public var unitAmountDecimal: String?

                    /// Custom_unit_amount
                    public struct CustomUnitAmount: Encodable {
                        public var isEnabled: Bool
                        public var maximum: Int?
                        public var minimum: Int?
                        public var preset: Int?

                        public init(isEnabled: Bool, maximum: Int? = nil, minimum: Int? = nil, preset: Int? = nil) {
                            self.isEnabled = isEnabled
                            self.maximum = maximum
                            self.minimum = minimum
                            self.preset = preset
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isEnabled, forKey: "enabled")
                            encoder.encode(maximum, forKey: "maximum")
                            encoder.encode(minimum, forKey: "minimum")
                            encoder.encode(preset, forKey: "preset")
                            return encoder.items
                        }
                    }

                    public enum TaxBehavior: String, Codable, CaseIterable {
                        case exclusive
                        case inclusive
                        case unspecified
                    }

                    public struct Tier: Encodable {
                        public var flatAmount: Int?
                        public var flatAmountDecimal: String?
                        public var unitAmount: Int?
                        public var unitAmountDecimal: String?
                        public var upTo: UpTo

                        public struct UpTo: Encodable {
                            public var object: Object?
                            public var int: Int?

                            public enum Object: String, Codable, CaseIterable {
                                case inf
                            }

                            public init(object: Object? = nil, int: Int? = nil) {
                                self.object = object
                                self.int = int
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(object, forKey: "object")
                                encoder.encode(int, forKey: "int")
                                return encoder.items
                            }
                        }

                        public init(flatAmount: Int? = nil, flatAmountDecimal: String? = nil, unitAmount: Int? = nil, unitAmountDecimal: String? = nil, upTo: UpTo) {
                            self.flatAmount = flatAmount
                            self.flatAmountDecimal = flatAmountDecimal
                            self.unitAmount = unitAmount
                            self.unitAmountDecimal = unitAmountDecimal
                            self.upTo = upTo
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(flatAmount, forKey: "flat_amount")
                            encoder.encode(flatAmountDecimal, forKey: "flat_amount_decimal")
                            encoder.encode(unitAmount, forKey: "unit_amount")
                            encoder.encode(unitAmountDecimal, forKey: "unit_amount_decimal")
                            encoder.encode(upTo, forKey: "up_to")
                            return encoder.items
                        }
                    }

                    public init(customUnitAmount: CustomUnitAmount? = nil, taxBehavior: TaxBehavior? = nil, tiers: [Tier]? = nil, unitAmount: Int? = nil, unitAmountDecimal: String? = nil) {
                        self.customUnitAmount = customUnitAmount
                        self.taxBehavior = taxBehavior
                        self.tiers = tiers
                        self.unitAmount = unitAmount
                        self.unitAmountDecimal = unitAmountDecimal
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(customUnitAmount, forKey: "custom_unit_amount")
                        encoder.encode(taxBehavior, forKey: "tax_behavior")
                        encoder.encode(tiers, forKey: "tiers")
                        encoder.encode(unitAmount, forKey: "unit_amount")
                        encoder.encode(unitAmountDecimal, forKey: "unit_amount_decimal")
                        return encoder.items
                    }
                }

                /// Recurring_adhoc
                public struct Recurring: Encodable {
                    public var interval: Interval
                    public var intervalCount: Int?

                    public enum Interval: String, Codable, CaseIterable {
                        case day
                        case month
                        case week
                        case year
                    }

                    public init(interval: Interval, intervalCount: Int? = nil) {
                        self.interval = interval
                        self.intervalCount = intervalCount
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(interval, forKey: "interval")
                        encoder.encode(intervalCount, forKey: "interval_count")
                        return encoder.items
                    }
                }

                public enum TaxBehavior: String, Codable, CaseIterable {
                    case exclusive
                    case inclusive
                    case unspecified
                }

                public init(currency: String, currencyOptions: [String: CurrencyOption]? = nil, recurring: Recurring? = nil, taxBehavior: TaxBehavior? = nil, unitAmount: Int? = nil, unitAmountDecimal: String? = nil) {
                    self.currency = currency
                    self.currencyOptions = currencyOptions
                    self.recurring = recurring
                    self.taxBehavior = taxBehavior
                    self.unitAmount = unitAmount
                    self.unitAmountDecimal = unitAmountDecimal
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(currency, forKey: "currency")
                    encoder.encode(currencyOptions, forKey: "currency_options")
                    encoder.encode(recurring, forKey: "recurring")
                    encoder.encode(taxBehavior, forKey: "tax_behavior")
                    encoder.encode(unitAmount, forKey: "unit_amount")
                    encoder.encode(unitAmountDecimal, forKey: "unit_amount_decimal")
                    return encoder.items
                }
            }

            /// Package_dimensions_specs
            ///
            /// The dimensions of this product for shipping purposes.
            public struct PackageDimensions: Encodable {
                public var height: Double
                public var length: Double
                public var weight: Double
                public var width: Double

                public init(height: Double, length: Double, weight: Double, width: Double) {
                    self.height = height
                    self.length = length
                    self.weight = weight
                    self.width = width
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(height, forKey: "height")
                    encoder.encode(length, forKey: "length")
                    encoder.encode(weight, forKey: "weight")
                    encoder.encode(width, forKey: "width")
                    return encoder.items
                }
            }

            public init(isActive: Bool? = nil, defaultPriceData: DefaultPriceData? = nil, description: String? = nil, expand: [String]? = nil, id: String? = nil, images: [String]? = nil, metadata: [String: String]? = nil, name: String, packageDimensions: PackageDimensions? = nil, isShippable: Bool? = nil, statementDescriptor: String? = nil, taxCode: String? = nil, unitLabel: String? = nil, url: String? = nil) {
                self.isActive = isActive
                self.defaultPriceData = defaultPriceData
                self.description = description
                self.expand = expand
                self.id = id
                self.images = images
                self.metadata = metadata
                self.name = name
                self.packageDimensions = packageDimensions
                self.isShippable = isShippable
                self.statementDescriptor = statementDescriptor
                self.taxCode = taxCode
                self.unitLabel = unitLabel
                self.url = url
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isActive, forKey: "active")
                encoder.encode(defaultPriceData, forKey: "default_price_data")
                encoder.encode(description, forKey: "description")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(id, forKey: "id")
                encoder.encode(images, forKey: "images")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(name, forKey: "name")
                encoder.encode(packageDimensions, forKey: "package_dimensions")
                encoder.encode(isShippable, forKey: "shippable")
                encoder.encode(statementDescriptor, forKey: "statement_descriptor")
                encoder.encode(taxCode, forKey: "tax_code")
                encoder.encode(unitLabel, forKey: "unit_label")
                encoder.encode(url, forKey: "url")
                return encoder.items
            }
        }
    }
}
