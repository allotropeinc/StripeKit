// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.TestHelpers.Terminal.Readers.WithReader {
    public var presentPaymentMethod: PresentPaymentMethod {
        PresentPaymentMethod(path: path + "/present_payment_method")
    }

    public struct PresentPaymentMethod {
        /// Path: `/v1/test_helpers/terminal/readers/{reader}/present_payment_method`
        public let path: String

        /// <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.TerminalReader> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostTestHelpersTerminalReadersReaderPresentPaymentMethod")
        }

        public struct PostRequest: Encodable {
            /// Card_present
            ///
            /// Simulated data for the card_present payment method
            public var cardPresent: CardPresent?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Simulated payment type
            public var type: `Type`?

            /// Card_present
            ///
            /// Simulated data for the card_present payment method
            public struct CardPresent: Encodable {
                public var number: String?

                public init(number: String? = nil) {
                    self.number = number
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(number, forKey: "number")
                    return encoder.items
                }
            }

            /// Simulated payment type
            public enum `Type`: String, Codable, CaseIterable {
                case cardPresent = "card_present"
            }

            public init(cardPresent: CardPresent? = nil, expand: [String]? = nil, type: `Type`? = nil) {
                self.cardPresent = cardPresent
                self.expand = expand
                self.type = type
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(cardPresent, forKey: "card_present")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(type, forKey: "type")
                return encoder.items
            }
        }
    }
}
