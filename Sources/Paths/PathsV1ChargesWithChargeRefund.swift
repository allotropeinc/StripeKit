// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Charges.WithCharge {
    public var refund: Refund {
        Refund(path: path + "/refund")
    }

    public struct Refund {
        /// Path: `/v1/charges/{charge}/refund`
        public let path: String

        /// <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
        /// 
        /// <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
        /// Funds will be refunded to the credit or debit card that was originally charged.</p>
        /// 
        /// <p>You can optionally refund only part of a charge.
        /// You can do so multiple times, until the entire charge has been refunded.</p>
        /// 
        /// <p>Once entirely refunded, a charge canâ€™t be refunded again.
        /// This method will raise an error when called on an already-refunded charge,
        /// or when trying to refund more money than is left on a charge.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.Charge> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostChargesChargeRefund")
        }

        public struct PostRequest: Encodable {
            public var amount: Int?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            public var instructionsEmail: String?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?
            public var paymentIntent: String?
            public var reason: Reason?
            public var isRefundApplicationFee: Bool?
            public var isReverseTransfer: Bool?

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            public enum Reason: String, Codable, CaseIterable {
                case duplicate
                case fraudulent
                case requestedByCustomer = "requested_by_customer"
            }

            public init(amount: Int? = nil, expand: [String]? = nil, instructionsEmail: String? = nil, metadata: Metadata? = nil, paymentIntent: String? = nil, reason: Reason? = nil, isRefundApplicationFee: Bool? = nil, isReverseTransfer: Bool? = nil) {
                self.amount = amount
                self.expand = expand
                self.instructionsEmail = instructionsEmail
                self.metadata = metadata
                self.paymentIntent = paymentIntent
                self.reason = reason
                self.isRefundApplicationFee = isRefundApplicationFee
                self.isReverseTransfer = isReverseTransfer
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(amount, forKey: "amount")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(instructionsEmail, forKey: "instructions_email")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(paymentIntent, forKey: "payment_intent")
                encoder.encode(reason, forKey: "reason")
                encoder.encode(isRefundApplicationFee, forKey: "refund_application_fee")
                encoder.encode(isReverseTransfer, forKey: "reverse_transfer")
                return encoder.items
            }
        }
    }
}
