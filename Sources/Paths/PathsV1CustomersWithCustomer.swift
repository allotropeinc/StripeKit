// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Customers {
    public func customer(_ customer: String) -> WithCustomer {
        WithCustomer(path: "\(path)/\(customer)")
    }

    public struct WithCustomer {
        /// Path: `/v1/customers/{customer}`
        public let path: String

        /// <p>Retrieves a Customer object.</p>
        public func get(expand: [String]? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetCustomersCustomer")
        }

        public struct GetResponse: Decodable {
            /// This object represents a customer of your business. It lets you create recurring charges and track payments that belong to the same customer.
            /// 
            /// Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
            public var customer: StripeKit.Customer?
            public var deletedCustomer: StripeKit.DeletedCustomer?

            public init(customer: StripeKit.Customer? = nil, deletedCustomer: StripeKit.DeletedCustomer? = nil) {
                self.customer = customer
                self.deletedCustomer = deletedCustomer
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.customer = try? container.decode(StripeKit.Customer.self)
                self.deletedCustomer = try? container.decode(StripeKit.DeletedCustomer.self)
            }
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
        /// 
        /// <p>This request accepts mostly the same arguments as the customer creation call.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.Customer> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostCustomersCustomer")
        }

        public struct PostRequest: Encodable {
            /// The customer's address.
            public var address: Address?
            /// An integer amount in cents (or local equivalent) that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.
            public var balance: Int?
            /// Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details.
            public var bankAccount: BankAccount?
            /// A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js).
            public var card: Card?
            /// Cash_balance_param
            ///
            /// Balance information and default balance settings for this customer.
            public var cashBalance: CashBalance?
            public var coupon: String?
            /// ID of Alipay account to make the customer's new default for invoice payments.
            public var defaultAlipayAccount: String?
            /// ID of bank account to make the customer's new default for invoice payments.
            public var defaultBankAccount: String?
            /// ID of card to make the customer's new default for invoice payments.
            public var defaultCard: String?
            /// If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) parameter.
            /// 
            /// Provide the ID of a payment source already attached to this customer to make it this customer's default payment source.
            /// 
            /// If you want to add a new payment source and make it the default, see the [source](https://stripe.com/docs/api/customers/update#update_customer-source) property.
            public var defaultSource: String?
            /// An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.
            public var description: String?
            /// Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*.
            public var email: String?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.
            public var invoicePrefix: String?
            /// Customer_param
            ///
            /// Default invoice settings for this customer.
            public var invoiceSettings: InvoiceSettings?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?
            /// The customer's full name or business name.
            public var name: String?
            /// The sequence to be used on the customer's next invoice. Defaults to 1.
            public var nextInvoiceSequence: Int?
            /// The customer's phone number.
            public var phone: String?
            /// Customer's preferred languages, ordered by preference.
            public var preferredLocales: [String]?
            /// The API ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount.
            public var promotionCode: String?
            /// The customer's shipping information. Appears on invoices emailed to this customer.
            public var shipping: Shipping?
            public var source: String?
            /// Tax_param
            ///
            /// Tax details about the customer.
            public var tax: Tax?
            /// The customer's tax exemption. One of `none`, `exempt`, or `reverse`.
            public var taxExempt: TaxExempt?

            /// The customer's address.
            public struct Address: Encodable {
                /// Optional_fields_address
                public var a: A?
                public var b: B?

                /// Optional_fields_address
                public struct A: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        return encoder.items
                    }
                }

                public enum B: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(a: A? = nil, b: B? = nil) {
                    self.a = a
                    self.b = b
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(a, forKey: "a")
                    encoder.encode(b, forKey: "b")
                    return encoder.items
                }
            }

            /// Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details.
            public struct BankAccount: Encodable {
                /// Customer_payment_source_bank_account
                public var object: Object?
                public var string: String?

                /// Customer_payment_source_bank_account
                public struct Object: Encodable {
                    public var accountHolderName: String?
                    public var accountHolderType: AccountHolderType?
                    public var accountNumber: String
                    public var country: String
                    public var currency: String?
                    public var object: Object?
                    public var routingNumber: String?

                    public enum AccountHolderType: String, Codable, CaseIterable {
                        case company
                        case individual
                    }

                    public enum Object: String, Codable, CaseIterable {
                        case bankAccount = "bank_account"
                    }

                    public init(accountHolderName: String? = nil, accountHolderType: AccountHolderType? = nil, accountNumber: String, country: String, currency: String? = nil, object: Object? = nil, routingNumber: String? = nil) {
                        self.accountHolderName = accountHolderName
                        self.accountHolderType = accountHolderType
                        self.accountNumber = accountNumber
                        self.country = country
                        self.currency = currency
                        self.object = object
                        self.routingNumber = routingNumber
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(accountHolderName, forKey: "account_holder_name")
                        encoder.encode(accountHolderType, forKey: "account_holder_type")
                        encoder.encode(accountNumber, forKey: "account_number")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(currency, forKey: "currency")
                        encoder.encode(object, forKey: "object")
                        encoder.encode(routingNumber, forKey: "routing_number")
                        return encoder.items
                    }
                }

                public init(object: Object? = nil, string: String? = nil) {
                    self.object = object
                    self.string = string
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(object, forKey: "object")
                    encoder.encode(string, forKey: "string")
                    return encoder.items
                }
            }

            /// A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js).
            public struct Card: Encodable {
                /// Customer_payment_source_card
                public var object: Object?
                public var string: String?

                /// Customer_payment_source_card
                public struct Object: Encodable {
                    public var addressCity: String?
                    public var addressCountry: String?
                    public var addressLine1: String?
                    public var addressLine2: String?
                    public var addressState: String?
                    public var addressZip: String?
                    public var cvc: String?
                    public var expMonth: Int
                    public var expYear: Int
                    public var metadata: [String: String]?
                    public var name: String?
                    public var number: String
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case card
                    }

                    public init(addressCity: String? = nil, addressCountry: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, addressState: String? = nil, addressZip: String? = nil, cvc: String? = nil, expMonth: Int, expYear: Int, metadata: [String: String]? = nil, name: String? = nil, number: String, object: Object? = nil) {
                        self.addressCity = addressCity
                        self.addressCountry = addressCountry
                        self.addressLine1 = addressLine1
                        self.addressLine2 = addressLine2
                        self.addressState = addressState
                        self.addressZip = addressZip
                        self.cvc = cvc
                        self.expMonth = expMonth
                        self.expYear = expYear
                        self.metadata = metadata
                        self.name = name
                        self.number = number
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(addressCity, forKey: "address_city")
                        encoder.encode(addressCountry, forKey: "address_country")
                        encoder.encode(addressLine1, forKey: "address_line1")
                        encoder.encode(addressLine2, forKey: "address_line2")
                        encoder.encode(addressState, forKey: "address_state")
                        encoder.encode(addressZip, forKey: "address_zip")
                        encoder.encode(cvc, forKey: "cvc")
                        encoder.encode(expMonth, forKey: "exp_month")
                        encoder.encode(expYear, forKey: "exp_year")
                        encoder.encode(metadata, forKey: "metadata")
                        encoder.encode(name, forKey: "name")
                        encoder.encode(number, forKey: "number")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public init(object: Object? = nil, string: String? = nil) {
                    self.object = object
                    self.string = string
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(object, forKey: "object")
                    encoder.encode(string, forKey: "string")
                    return encoder.items
                }
            }

            /// Cash_balance_param
            ///
            /// Balance information and default balance settings for this customer.
            public struct CashBalance: Encodable {
                /// Balance_settings_param
                public var settings: Settings?

                /// Balance_settings_param
                public struct Settings: Encodable {
                    public var reconciliationMode: ReconciliationMode?

                    public enum ReconciliationMode: String, Codable, CaseIterable {
                        case automatic
                        case manual
                    }

                    public init(reconciliationMode: ReconciliationMode? = nil) {
                        self.reconciliationMode = reconciliationMode
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(reconciliationMode, forKey: "reconciliation_mode")
                        return encoder.items
                    }
                }

                public init(settings: Settings? = nil) {
                    self.settings = settings
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(settings, forKey: "settings")
                    return encoder.items
                }
            }

            /// Customer_param
            ///
            /// Default invoice settings for this customer.
            public struct InvoiceSettings: Encodable {
                public var customFields: CustomFields?
                public var defaultPaymentMethod: String?
                public var footer: String?
                public var renderingOptions: RenderingOptions?

                public struct CustomFields: Encodable {
                    public var placeholderItems: [PlaceholderItem]?
                    public var object: Object?

                    /// Custom_field_params
                    public struct PlaceholderItem: Encodable {
                        public var name: String
                        public var value: String

                        public init(name: String, value: String) {
                            self.name = name
                            self.value = value
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(name, forKey: "name")
                            encoder.encode(value, forKey: "value")
                            return encoder.items
                        }
                    }

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(placeholderItems: [PlaceholderItem]? = nil, object: Object? = nil) {
                        self.placeholderItems = placeholderItems
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(placeholderItems, forKey: "placeholderItems")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public struct RenderingOptions: Encodable {
                    /// Rendering_options_param
                    public var a: A?
                    public var b: B?

                    /// Rendering_options_param
                    public struct A: Encodable {
                        public var amountTaxDisplay: AmountTaxDisplay?

                        public enum AmountTaxDisplay: String, Codable, CaseIterable {
                            case empty = ""
                            case excludeTax = "exclude_tax"
                            case includeInclusiveTax = "include_inclusive_tax"
                        }

                        public init(amountTaxDisplay: AmountTaxDisplay? = nil) {
                            self.amountTaxDisplay = amountTaxDisplay
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(amountTaxDisplay, forKey: "amount_tax_display")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public init(customFields: CustomFields? = nil, defaultPaymentMethod: String? = nil, footer: String? = nil, renderingOptions: RenderingOptions? = nil) {
                    self.customFields = customFields
                    self.defaultPaymentMethod = defaultPaymentMethod
                    self.footer = footer
                    self.renderingOptions = renderingOptions
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(customFields, forKey: "custom_fields")
                    encoder.encode(defaultPaymentMethod, forKey: "default_payment_method")
                    encoder.encode(footer, forKey: "footer")
                    encoder.encode(renderingOptions, forKey: "rendering_options")
                    return encoder.items
                }
            }

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// The customer's shipping information. Appears on invoices emailed to this customer.
            public struct Shipping: Encodable {
                /// Customer_shipping
                public var a: A?
                public var b: B?

                /// Customer_shipping
                public struct A: Encodable {
                    /// Optional_fields_address
                    public var address: Address
                    public var name: String
                    public var phone: String?

                    /// Optional_fields_address
                    public struct Address: Encodable {
                        public var city: String?
                        public var country: String?
                        public var line1: String?
                        public var line2: String?
                        public var postalCode: String?
                        public var state: String?

                        public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                            self.city = city
                            self.country = country
                            self.line1 = line1
                            self.line2 = line2
                            self.postalCode = postalCode
                            self.state = state
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(city, forKey: "city")
                            encoder.encode(country, forKey: "country")
                            encoder.encode(line1, forKey: "line1")
                            encoder.encode(line2, forKey: "line2")
                            encoder.encode(postalCode, forKey: "postal_code")
                            encoder.encode(state, forKey: "state")
                            return encoder.items
                        }
                    }

                    public init(address: Address, name: String, phone: String? = nil) {
                        self.address = address
                        self.name = name
                        self.phone = phone
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(address, forKey: "address")
                        encoder.encode(name, forKey: "name")
                        encoder.encode(phone, forKey: "phone")
                        return encoder.items
                    }
                }

                public enum B: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(a: A? = nil, b: B? = nil) {
                    self.a = a
                    self.b = b
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(a, forKey: "a")
                    encoder.encode(b, forKey: "b")
                    return encoder.items
                }
            }

            /// Tax_param
            ///
            /// Tax details about the customer.
            public struct Tax: Encodable {
                public var ipAddress: IpAddress?

                public struct IpAddress: Encodable {
                    public var string: String?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(string: String? = nil, object: Object? = nil) {
                        self.string = string
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(string, forKey: "string")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public init(ipAddress: IpAddress? = nil) {
                    self.ipAddress = ipAddress
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(ipAddress, forKey: "ip_address")
                    return encoder.items
                }
            }

            /// The customer's tax exemption. One of `none`, `exempt`, or `reverse`.
            public enum TaxExempt: String, Codable, CaseIterable {
                case empty = ""
                case exempt
                case `none`
                case reverse
            }

            public init(address: Address? = nil, balance: Int? = nil, bankAccount: BankAccount? = nil, card: Card? = nil, cashBalance: CashBalance? = nil, coupon: String? = nil, defaultAlipayAccount: String? = nil, defaultBankAccount: String? = nil, defaultCard: String? = nil, defaultSource: String? = nil, description: String? = nil, email: String? = nil, expand: [String]? = nil, invoicePrefix: String? = nil, invoiceSettings: InvoiceSettings? = nil, metadata: Metadata? = nil, name: String? = nil, nextInvoiceSequence: Int? = nil, phone: String? = nil, preferredLocales: [String]? = nil, promotionCode: String? = nil, shipping: Shipping? = nil, source: String? = nil, tax: Tax? = nil, taxExempt: TaxExempt? = nil) {
                self.address = address
                self.balance = balance
                self.bankAccount = bankAccount
                self.card = card
                self.cashBalance = cashBalance
                self.coupon = coupon
                self.defaultAlipayAccount = defaultAlipayAccount
                self.defaultBankAccount = defaultBankAccount
                self.defaultCard = defaultCard
                self.defaultSource = defaultSource
                self.description = description
                self.email = email
                self.expand = expand
                self.invoicePrefix = invoicePrefix
                self.invoiceSettings = invoiceSettings
                self.metadata = metadata
                self.name = name
                self.nextInvoiceSequence = nextInvoiceSequence
                self.phone = phone
                self.preferredLocales = preferredLocales
                self.promotionCode = promotionCode
                self.shipping = shipping
                self.source = source
                self.tax = tax
                self.taxExempt = taxExempt
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(address, forKey: "address")
                encoder.encode(balance, forKey: "balance")
                encoder.encode(bankAccount, forKey: "bank_account")
                encoder.encode(card, forKey: "card")
                encoder.encode(cashBalance, forKey: "cash_balance")
                encoder.encode(coupon, forKey: "coupon")
                encoder.encode(defaultAlipayAccount, forKey: "default_alipay_account")
                encoder.encode(defaultBankAccount, forKey: "default_bank_account")
                encoder.encode(defaultCard, forKey: "default_card")
                encoder.encode(defaultSource, forKey: "default_source")
                encoder.encode(description, forKey: "description")
                encoder.encode(email, forKey: "email")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(invoicePrefix, forKey: "invoice_prefix")
                encoder.encode(invoiceSettings, forKey: "invoice_settings")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(name, forKey: "name")
                encoder.encode(nextInvoiceSequence, forKey: "next_invoice_sequence")
                encoder.encode(phone, forKey: "phone")
                encoder.encode(preferredLocales, forKey: "preferred_locales")
                encoder.encode(promotionCode, forKey: "promotion_code")
                encoder.encode(shipping, forKey: "shipping")
                encoder.encode(source, forKey: "source")
                encoder.encode(tax, forKey: "tax")
                encoder.encode(taxExempt, forKey: "tax_exempt")
                return encoder.items
            }
        }

        /// <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>
        public var delete: Request<StripeKit.DeletedCustomer> {
            Request(method: "DELETE", url: path, id: "DeleteCustomersCustomer")
        }
    }
}
