// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Treasury.FinancialAccounts.WithFinancialAccount {
    public var features: Features {
        Features(path: path + "/features")
    }

    public struct Features {
        /// Path: `/v1/treasury/financial_accounts/{financial_account}/features`
        public let path: String

        /// <p>Retrieves Features information associated with the FinancialAccount.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.TreasuryFinancialAccountFeatures> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetTreasuryFinancialAccountsFinancialAccountFeatures")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates the Features associated with a FinancialAccount.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.TreasuryFinancialAccountFeatures> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostTreasuryFinancialAccountsFinancialAccountFeatures")
        }

        public struct PostRequest: Encodable {
            /// Access
            ///
            /// Encodes the FinancialAccount's ability to be used with the Issuing product, including attaching cards to and drawing funds from the FinancialAccount.
            public var cardIssuing: CardIssuing?
            /// Access
            ///
            /// Represents whether this FinancialAccount is eligible for deposit insurance. Various factors determine the insurance amount.
            public var depositInsurance: DepositInsurance?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Financial_addresses
            ///
            /// Contains Features that add FinancialAddresses to the FinancialAccount.
            public var financialAddresses: FinancialAddresses?
            /// Inbound_transfers
            ///
            /// Contains settings related to adding funds to a FinancialAccount from another Account with the same owner.
            public var inboundTransfers: InboundTransfers?
            /// Access
            ///
            /// Represents the ability for the FinancialAccount to send money to, or receive money from other FinancialAccounts (for example, via OutboundPayment).
            public var intraStripeFlows: IntraStripeFlows?
            /// Outbound_payments
            ///
            /// Includes Features related to initiating money movement out of the FinancialAccount to someone else's bucket of money.
            public var outboundPayments: OutboundPayments?
            /// Outbound_transfers
            ///
            /// Contains a Feature and settings related to moving money out of the FinancialAccount into another Account with the same owner.
            public var outboundTransfers: OutboundTransfers?

            /// Access
            ///
            /// Encodes the FinancialAccount's ability to be used with the Issuing product, including attaching cards to and drawing funds from the FinancialAccount.
            public struct CardIssuing: Encodable {
                public var isRequested: Bool

                public init(isRequested: Bool) {
                    self.isRequested = isRequested
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(isRequested, forKey: "requested")
                    return encoder.items
                }
            }

            /// Access
            ///
            /// Represents whether this FinancialAccount is eligible for deposit insurance. Various factors determine the insurance amount.
            public struct DepositInsurance: Encodable {
                public var isRequested: Bool

                public init(isRequested: Bool) {
                    self.isRequested = isRequested
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(isRequested, forKey: "requested")
                    return encoder.items
                }
            }

            /// Financial_addresses
            ///
            /// Contains Features that add FinancialAddresses to the FinancialAccount.
            public struct FinancialAddresses: Encodable {
                /// Access
                public var aba: Aba?

                /// Access
                public struct Aba: Encodable {
                    public var isRequested: Bool

                    public init(isRequested: Bool) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                public init(aba: Aba? = nil) {
                    self.aba = aba
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(aba, forKey: "aba")
                    return encoder.items
                }
            }

            /// Inbound_transfers
            ///
            /// Contains settings related to adding funds to a FinancialAccount from another Account with the same owner.
            public struct InboundTransfers: Encodable {
                /// Access
                public var ach: Ach?

                /// Access
                public struct Ach: Encodable {
                    public var isRequested: Bool

                    public init(isRequested: Bool) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                public init(ach: Ach? = nil) {
                    self.ach = ach
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(ach, forKey: "ach")
                    return encoder.items
                }
            }

            /// Access
            ///
            /// Represents the ability for the FinancialAccount to send money to, or receive money from other FinancialAccounts (for example, via OutboundPayment).
            public struct IntraStripeFlows: Encodable {
                public var isRequested: Bool

                public init(isRequested: Bool) {
                    self.isRequested = isRequested
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(isRequested, forKey: "requested")
                    return encoder.items
                }
            }

            /// Outbound_payments
            ///
            /// Includes Features related to initiating money movement out of the FinancialAccount to someone else's bucket of money.
            public struct OutboundPayments: Encodable {
                /// Access
                public var ach: Ach?
                /// Access
                public var usDomesticWire: UsDomesticWire?

                /// Access
                public struct Ach: Encodable {
                    public var isRequested: Bool

                    public init(isRequested: Bool) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Access
                public struct UsDomesticWire: Encodable {
                    public var isRequested: Bool

                    public init(isRequested: Bool) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                public init(ach: Ach? = nil, usDomesticWire: UsDomesticWire? = nil) {
                    self.ach = ach
                    self.usDomesticWire = usDomesticWire
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(ach, forKey: "ach")
                    encoder.encode(usDomesticWire, forKey: "us_domestic_wire")
                    return encoder.items
                }
            }

            /// Outbound_transfers
            ///
            /// Contains a Feature and settings related to moving money out of the FinancialAccount into another Account with the same owner.
            public struct OutboundTransfers: Encodable {
                /// Access
                public var ach: Ach?
                /// Access
                public var usDomesticWire: UsDomesticWire?

                /// Access
                public struct Ach: Encodable {
                    public var isRequested: Bool

                    public init(isRequested: Bool) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                /// Access
                public struct UsDomesticWire: Encodable {
                    public var isRequested: Bool

                    public init(isRequested: Bool) {
                        self.isRequested = isRequested
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isRequested, forKey: "requested")
                        return encoder.items
                    }
                }

                public init(ach: Ach? = nil, usDomesticWire: UsDomesticWire? = nil) {
                    self.ach = ach
                    self.usDomesticWire = usDomesticWire
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(ach, forKey: "ach")
                    encoder.encode(usDomesticWire, forKey: "us_domestic_wire")
                    return encoder.items
                }
            }

            public init(cardIssuing: CardIssuing? = nil, depositInsurance: DepositInsurance? = nil, expand: [String]? = nil, financialAddresses: FinancialAddresses? = nil, inboundTransfers: InboundTransfers? = nil, intraStripeFlows: IntraStripeFlows? = nil, outboundPayments: OutboundPayments? = nil, outboundTransfers: OutboundTransfers? = nil) {
                self.cardIssuing = cardIssuing
                self.depositInsurance = depositInsurance
                self.expand = expand
                self.financialAddresses = financialAddresses
                self.inboundTransfers = inboundTransfers
                self.intraStripeFlows = intraStripeFlows
                self.outboundPayments = outboundPayments
                self.outboundTransfers = outboundTransfers
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(cardIssuing, forKey: "card_issuing")
                encoder.encode(depositInsurance, forKey: "deposit_insurance")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(financialAddresses, forKey: "financial_addresses")
                encoder.encode(inboundTransfers, forKey: "inbound_transfers")
                encoder.encode(intraStripeFlows, forKey: "intra_stripe_flows")
                encoder.encode(outboundPayments, forKey: "outbound_payments")
                encoder.encode(outboundTransfers, forKey: "outbound_transfers")
                return encoder.items
            }
        }
    }
}
