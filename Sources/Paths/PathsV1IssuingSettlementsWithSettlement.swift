// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Issuing.Settlements {
    public func settlement(_ settlement: String) -> WithSettlement {
        WithSettlement(path: "\(path)/\(settlement)")
    }

    public struct WithSettlement {
        /// Path: `/v1/issuing/settlements/{settlement}`
        public let path: String

        /// <p>Retrieves an Issuing <code>Settlement</code> object.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.IssuingSettlement> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetIssuingSettlementsSettlement")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.IssuingSettlement> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostIssuingSettlementsSettlement")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: [String: String]?

            public init(expand: [String]? = nil, metadata: [String: String]? = nil) {
                self.expand = expand
                self.metadata = metadata
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(metadata, forKey: "metadata")
                return encoder.items
            }
        }
    }
}
