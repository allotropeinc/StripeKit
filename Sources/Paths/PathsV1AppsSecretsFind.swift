// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Apps.Secrets {
    public var find: Find {
        Find(path: path + "/find")
    }

    public struct Find {
        /// Path: `/v1/apps/secrets/find`
        public let path: String

        /// <p>Finds a secret in the secret store by name and scope.</p>
        public func get(parameters: GetParameters) -> Request<StripeKit.AppsSecret> {
            Request(method: "GET", url: path, query: parameters.asQuery, id: "GetAppsSecretsFind")
        }

        public struct GetParameters {
            public var expand: [String]?
            public var name: String
            /// Scope_param
            public var scope: Scope

            /// Scope_param
            public struct Scope: Codable {
                public var type: `Type`
                public var user: String?

                public enum `Type`: String, Codable, CaseIterable {
                    case account
                    case user
                }

                public init(type: `Type`, user: String? = nil) {
                    self.type = type
                    self.user = user
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(type, forKey: "type")
                    encoder.encode(user, forKey: "user")
                    return encoder.items
                }
            }

            public init(expand: [String]? = nil, name: String, scope: Scope) {
                self.expand = expand
                self.name = name
                self.scope = scope
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(name, forKey: "name")
                encoder.encode(scope, forKey: "scope", isDeepObject: true)
                return encoder.items
            }
        }
    }
}
