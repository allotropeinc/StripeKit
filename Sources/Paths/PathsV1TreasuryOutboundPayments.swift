// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Treasury {
    public var outboundPayments: OutboundPayments {
        OutboundPayments(path: path + "/outbound_payments")
    }

    public struct OutboundPayments {
        /// Path: `/v1/treasury/outbound_payments`
        public let path: String

        /// <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters.asQuery, id: "GetTreasuryOutboundPayments")
        }

        /// TreasuryOutboundPaymentsResourceOutboundPaymentList
        public struct GetResponse: Decodable {
            /// Details about each object.
            public var data: [StripeKit.TreasuryOutboundPayment]
            /// True if this list has another page of items after this one that can be fetched.
            public var hasMore: Bool
            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public var object: Object
            /// The URL where this list can be accessed.
            public var url: String

            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public enum Object: String, Codable, CaseIterable {
                case list
            }

            public init(data: [StripeKit.TreasuryOutboundPayment], hasMore: Bool, object: Object, url: String) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.data = try values.decode([StripeKit.TreasuryOutboundPayment].self, forKey: "data")
                self.hasMore = try values.decode(Bool.self, forKey: "has_more")
                self.object = try values.decode(Object.self, forKey: "object")
                self.url = try values.decode(String.self, forKey: "url")
            }
        }

        public struct GetParameters {
            public var customer: String?
            public var endingBefore: String?
            public var expand: [String]?
            public var financialAccount: String
            public var limit: Int?
            public var startingAfter: String?
            public var status: Status?

            public enum Status: String, Codable, CaseIterable {
                case canceled
                case failed
                case posted
                case processing
                case returned
            }

            public init(customer: String? = nil, endingBefore: String? = nil, expand: [String]? = nil, financialAccount: String, limit: Int? = nil, startingAfter: String? = nil, status: Status? = nil) {
                self.customer = customer
                self.endingBefore = endingBefore
                self.expand = expand
                self.financialAccount = financialAccount
                self.limit = limit
                self.startingAfter = startingAfter
                self.status = status
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(customer, forKey: "customer")
                encoder.encode(endingBefore, forKey: "ending_before")
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(financialAccount, forKey: "financial_account")
                encoder.encode(limit, forKey: "limit")
                encoder.encode(startingAfter, forKey: "starting_after")
                encoder.encode(status, forKey: "status")
                return encoder.items
            }
        }

        /// <p>Creates an OutboundPayment.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.TreasuryOutboundPayment> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostTreasuryOutboundPayments")
        }

        public struct PostRequest: Encodable {
            /// Amount (in cents) to be transferred.
            public var amount: Int
            /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
            public var currency: String
            /// ID of the customer to whom the OutboundPayment is sent. Must match the Customer attached to the `destination_payment_method` passed in.
            public var customer: String?
            /// An arbitrary string attached to the object. Often useful for displaying to users.
            public var description: String?
            /// The PaymentMethod to use as the payment instrument for the OutboundPayment. Exclusive with `destination_payment_method_data`.
            public var destinationPaymentMethod: String?
            /// Payment_method_data
            ///
            /// Hash used to generate the PaymentMethod to be used for this OutboundPayment. Exclusive with `destination_payment_method`.
            public var destinationPaymentMethodData: DestinationPaymentMethodData?
            /// Payment_method_options
            ///
            /// Payment method-specific configuration for this OutboundPayment.
            public var destinationPaymentMethodOptions: DestinationPaymentMethodOptions?
            /// End_user_details_params
            ///
            /// End user details.
            public var endUserDetails: EndUserDetails?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The FinancialAccount to pull funds from.
            public var financialAccount: String
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: [String: String]?
            /// The description that appears on the receiving end for this OutboundPayment (for example, bank statement for external bank transfer). Maximum 10 characters for `ach` payments, 140 characters for `wire` payments, or 500 characters for `stripe` network transfers. The default value is `payment`.
            public var statementDescriptor: String?

            /// Payment_method_data
            ///
            /// Hash used to generate the PaymentMethod to be used for this OutboundPayment. Exclusive with `destination_payment_method`.
            public struct DestinationPaymentMethodData: Encodable {
                /// Billing_details_inner_params
                public var billingDetails: BillingDetails?
                public var financialAccount: String?
                public var metadata: [String: String]?
                public var type: `Type`
                /// Payment_method_param
                public var usBankAccount: UsBankAccount?

                /// Billing_details_inner_params
                public struct BillingDetails: Encodable {
                    public var address: Address?
                    public var email: Email?
                    public var name: String?
                    public var phone: String?

                    public struct Address: Encodable {
                        /// Billing_details_address
                        public var a: A?
                        public var b: B?

                        /// Billing_details_address
                        public struct A: Encodable {
                            public var city: String?
                            public var country: String?
                            public var line1: String?
                            public var line2: String?
                            public var postalCode: String?
                            public var state: String?

                            public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                                self.city = city
                                self.country = country
                                self.line1 = line1
                                self.line2 = line2
                                self.postalCode = postalCode
                                self.state = state
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(city, forKey: "city")
                                encoder.encode(country, forKey: "country")
                                encoder.encode(line1, forKey: "line1")
                                encoder.encode(line2, forKey: "line2")
                                encoder.encode(postalCode, forKey: "postal_code")
                                encoder.encode(state, forKey: "state")
                                return encoder.items
                            }
                        }

                        public enum B: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(a: A? = nil, b: B? = nil) {
                            self.a = a
                            self.b = b
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(a, forKey: "a")
                            encoder.encode(b, forKey: "b")
                            return encoder.items
                        }
                    }

                    public struct Email: Encodable {
                        public var string: String?
                        public var object: Object?

                        public enum Object: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(string: String? = nil, object: Object? = nil) {
                            self.string = string
                            self.object = object
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(string, forKey: "string")
                            encoder.encode(object, forKey: "object")
                            return encoder.items
                        }
                    }

                    public init(address: Address? = nil, email: Email? = nil, name: String? = nil, phone: String? = nil) {
                        self.address = address
                        self.email = email
                        self.name = name
                        self.phone = phone
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(address, forKey: "address")
                        encoder.encode(email, forKey: "email")
                        encoder.encode(name, forKey: "name")
                        encoder.encode(phone, forKey: "phone")
                        return encoder.items
                    }
                }

                public enum `Type`: String, Codable, CaseIterable {
                    case financialAccount = "financial_account"
                    case usBankAccount = "us_bank_account"
                }

                /// Payment_method_param
                public struct UsBankAccount: Encodable {
                    public var accountHolderType: AccountHolderType?
                    public var accountNumber: String?
                    public var accountType: AccountType?
                    public var financialConnectionsAccount: String?
                    public var routingNumber: String?

                    public enum AccountHolderType: String, Codable, CaseIterable {
                        case company
                        case individual
                    }

                    public enum AccountType: String, Codable, CaseIterable {
                        case checking
                        case savings
                    }

                    public init(accountHolderType: AccountHolderType? = nil, accountNumber: String? = nil, accountType: AccountType? = nil, financialConnectionsAccount: String? = nil, routingNumber: String? = nil) {
                        self.accountHolderType = accountHolderType
                        self.accountNumber = accountNumber
                        self.accountType = accountType
                        self.financialConnectionsAccount = financialConnectionsAccount
                        self.routingNumber = routingNumber
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(accountHolderType, forKey: "account_holder_type")
                        encoder.encode(accountNumber, forKey: "account_number")
                        encoder.encode(accountType, forKey: "account_type")
                        encoder.encode(financialConnectionsAccount, forKey: "financial_connections_account")
                        encoder.encode(routingNumber, forKey: "routing_number")
                        return encoder.items
                    }
                }

                public init(billingDetails: BillingDetails? = nil, financialAccount: String? = nil, metadata: [String: String]? = nil, type: `Type`, usBankAccount: UsBankAccount? = nil) {
                    self.billingDetails = billingDetails
                    self.financialAccount = financialAccount
                    self.metadata = metadata
                    self.type = type
                    self.usBankAccount = usBankAccount
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(billingDetails, forKey: "billing_details")
                    encoder.encode(financialAccount, forKey: "financial_account")
                    encoder.encode(metadata, forKey: "metadata")
                    encoder.encode(type, forKey: "type")
                    encoder.encode(usBankAccount, forKey: "us_bank_account")
                    return encoder.items
                }
            }

            /// Payment_method_options
            ///
            /// Payment method-specific configuration for this OutboundPayment.
            public struct DestinationPaymentMethodOptions: Encodable {
                public var usBankAccount: UsBankAccount?

                public struct UsBankAccount: Encodable {
                    /// Payment_method_options_param
                    public var a: A?
                    public var b: B?

                    /// Payment_method_options_param
                    public struct A: Encodable {
                        public var network: Network?

                        public enum Network: String, Codable, CaseIterable {
                            case ach
                            case usDomesticWire = "us_domestic_wire"
                        }

                        public init(network: Network? = nil) {
                            self.network = network
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(network, forKey: "network")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public init(usBankAccount: UsBankAccount? = nil) {
                    self.usBankAccount = usBankAccount
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(usBankAccount, forKey: "us_bank_account")
                    return encoder.items
                }
            }

            /// End_user_details_params
            ///
            /// End user details.
            public struct EndUserDetails: Encodable {
                public var ipAddress: String?
                public var isPresent: Bool

                public init(ipAddress: String? = nil, isPresent: Bool) {
                    self.ipAddress = ipAddress
                    self.isPresent = isPresent
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(ipAddress, forKey: "ip_address")
                    encoder.encode(isPresent, forKey: "present")
                    return encoder.items
                }
            }

            public init(amount: Int, currency: String, customer: String? = nil, description: String? = nil, destinationPaymentMethod: String? = nil, destinationPaymentMethodData: DestinationPaymentMethodData? = nil, destinationPaymentMethodOptions: DestinationPaymentMethodOptions? = nil, endUserDetails: EndUserDetails? = nil, expand: [String]? = nil, financialAccount: String, metadata: [String: String]? = nil, statementDescriptor: String? = nil) {
                self.amount = amount
                self.currency = currency
                self.customer = customer
                self.description = description
                self.destinationPaymentMethod = destinationPaymentMethod
                self.destinationPaymentMethodData = destinationPaymentMethodData
                self.destinationPaymentMethodOptions = destinationPaymentMethodOptions
                self.endUserDetails = endUserDetails
                self.expand = expand
                self.financialAccount = financialAccount
                self.metadata = metadata
                self.statementDescriptor = statementDescriptor
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(amount, forKey: "amount")
                encoder.encode(currency, forKey: "currency")
                encoder.encode(customer, forKey: "customer")
                encoder.encode(description, forKey: "description")
                encoder.encode(destinationPaymentMethod, forKey: "destination_payment_method")
                encoder.encode(destinationPaymentMethodData, forKey: "destination_payment_method_data")
                encoder.encode(destinationPaymentMethodOptions, forKey: "destination_payment_method_options")
                encoder.encode(endUserDetails, forKey: "end_user_details")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(financialAccount, forKey: "financial_account")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(statementDescriptor, forKey: "statement_descriptor")
                return encoder.items
            }
        }
    }
}
