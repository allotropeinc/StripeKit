// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.PromotionCodes {
    public func promotionCode(_ promotionCode: String) -> WithPromotionCode {
        WithPromotionCode(path: "\(path)/\(promotionCode)")
    }

    public struct WithPromotionCode {
        /// Path: `/v1/promotion_codes/{promotion_code}`
        public let path: String

        /// <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.PromotionCode> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetPromotionCodesPromotionCode")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.PromotionCode> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostPromotionCodesPromotionCode")
        }

        public struct PostRequest: Encodable {
            /// Whether the promotion code is currently active. A promotion code can only be reactivated when the coupon is still valid and the promotion code is otherwise redeemable.
            public var isActive: Bool?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?
            /// Restrictions_params
            ///
            /// Settings that restrict the redemption of the promotion code.
            public var restrictions: Restrictions?

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// Restrictions_params
            ///
            /// Settings that restrict the redemption of the promotion code.
            public struct Restrictions: Encodable {
                public var currencyOptions: [String: CurrencyOption]?

                /// Currency_option
                public struct CurrencyOption: Encodable {
                    public var minimumAmount: Int?

                    public init(minimumAmount: Int? = nil) {
                        self.minimumAmount = minimumAmount
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(minimumAmount, forKey: "minimum_amount")
                        return encoder.items
                    }
                }

                public init(currencyOptions: [String: CurrencyOption]? = nil) {
                    self.currencyOptions = currencyOptions
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(currencyOptions, forKey: "currency_options")
                    return encoder.items
                }
            }

            public init(isActive: Bool? = nil, expand: [String]? = nil, metadata: Metadata? = nil, restrictions: Restrictions? = nil) {
                self.isActive = isActive
                self.expand = expand
                self.metadata = metadata
                self.restrictions = restrictions
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isActive, forKey: "active")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(restrictions, forKey: "restrictions")
                return encoder.items
            }
        }
    }
}
