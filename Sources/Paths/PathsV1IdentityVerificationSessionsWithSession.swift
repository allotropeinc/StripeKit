// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Identity.VerificationSessions {
    public func session(_ session: String) -> WithSession {
        WithSession(path: "\(path)/\(session)")
    }

    public struct WithSession {
        /// Path: `/v1/identity/verification_sessions/{session}`
        public let path: String

        /// <p>Retrieves the details of a VerificationSession that was previously created.</p>
        /// 
        /// <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
        /// <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.IdentityVerificationSession> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetIdentityVerificationSessionsSession")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates a VerificationSession object.</p>
        /// 
        /// <p>When the session status is <code>requires_input</code>, you can use this method to update the
        /// verification check and options.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.IdentityVerificationSession> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostIdentityVerificationSessionsSession")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: [String: String]?
            /// Session_options_param
            ///
            /// A set of options for the session’s verification checks.
            public var options: Options?
            /// The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
            public var type: `Type`?

            /// Session_options_param
            ///
            /// A set of options for the session’s verification checks.
            public struct Options: Encodable {
                public var document: Document?

                public struct Document: Encodable {
                    /// Document_options
                    public var a: A?
                    public var b: B?

                    /// Document_options
                    public struct A: Encodable {
                        public var allowedTypes: [AllowedType]?
                        public var requireIDNumber: Bool?
                        public var requireLiveCapture: Bool?
                        public var requireMatchingSelfie: Bool?

                        public enum AllowedType: String, Codable, CaseIterable {
                            case drivingLicense = "driving_license"
                            case idCard = "id_card"
                            case passport
                        }

                        public init(allowedTypes: [AllowedType]? = nil, requireIDNumber: Bool? = nil, requireLiveCapture: Bool? = nil, requireMatchingSelfie: Bool? = nil) {
                            self.allowedTypes = allowedTypes
                            self.requireIDNumber = requireIDNumber
                            self.requireLiveCapture = requireLiveCapture
                            self.requireMatchingSelfie = requireMatchingSelfie
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(allowedTypes, forKey: "allowed_types")
                            encoder.encode(requireIDNumber, forKey: "require_id_number")
                            encoder.encode(requireLiveCapture, forKey: "require_live_capture")
                            encoder.encode(requireMatchingSelfie, forKey: "require_matching_selfie")
                            return encoder.items
                        }
                    }

                    public enum B: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(a: A? = nil, b: B? = nil) {
                        self.a = a
                        self.b = b
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(a, forKey: "a")
                        encoder.encode(b, forKey: "b")
                        return encoder.items
                    }
                }

                public init(document: Document? = nil) {
                    self.document = document
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(document, forKey: "document")
                    return encoder.items
                }
            }

            /// The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
            public enum `Type`: String, Codable, CaseIterable {
                case document
                case idNumber = "id_number"
            }

            public init(expand: [String]? = nil, metadata: [String: String]? = nil, options: Options? = nil, type: `Type`? = nil) {
                self.expand = expand
                self.metadata = metadata
                self.options = options
                self.type = type
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(options, forKey: "options")
                encoder.encode(type, forKey: "type")
                return encoder.items
            }
        }
    }
}
