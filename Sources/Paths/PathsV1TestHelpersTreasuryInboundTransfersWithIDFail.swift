// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.TestHelpers.Treasury.InboundTransfers.WithID {
    public var fail: Fail {
        Fail(path: path + "/fail")
    }

    public struct Fail {
        /// Path: `/v1/test_helpers/treasury/inbound_transfers/{id}/fail`
        public let path: String

        /// <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.TreasuryInboundTransfer> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostTestHelpersTreasuryInboundTransfersIdFail")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Failure_details_params
            ///
            /// Details about a failed InboundTransfer.
            public var failureDetails: FailureDetails?

            /// Failure_details_params
            ///
            /// Details about a failed InboundTransfer.
            public struct FailureDetails: Encodable {
                public var code: Code?

                public enum Code: String, Codable, CaseIterable {
                    case accountClosed = "account_closed"
                    case accountFrozen = "account_frozen"
                    case bankAccountRestricted = "bank_account_restricted"
                    case bankOwnershipChanged = "bank_ownership_changed"
                    case debitNotAuthorized = "debit_not_authorized"
                    case incorrectAccountHolderAddress = "incorrect_account_holder_address"
                    case incorrectAccountHolderName = "incorrect_account_holder_name"
                    case incorrectAccountHolderTaxID = "incorrect_account_holder_tax_id"
                    case insufficientFunds = "insufficient_funds"
                    case invalidAccountNumber = "invalid_account_number"
                    case invalidCurrency = "invalid_currency"
                    case noAccount = "no_account"
                    case other
                }

                public init(code: Code? = nil) {
                    self.code = code
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(code, forKey: "code")
                    return encoder.items
                }
            }

            public init(expand: [String]? = nil, failureDetails: FailureDetails? = nil) {
                self.expand = expand
                self.failureDetails = failureDetails
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(failureDetails, forKey: "failure_details")
                return encoder.items
            }
        }
    }
}
