// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.PaymentIntents.WithIntent {
    public var cancel: Cancel {
        Cancel(path: path + "/cancel")
    }

    public struct Cancel {
        /// Path: `/v1/payment_intents/{intent}/cancel`
        public let path: String

        /// <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>, or <code>processing</code>. </p>
        /// 
        /// <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status=’requires_capture’</code>, the remaining <code>amount_capturable</code> will automatically be refunded. </p>
        /// 
        /// <p>You cannot cancel the PaymentIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.PaymentIntent> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostPaymentIntentsIntentCancel")
        }

        public struct PostRequest: Encodable {
            /// Reason for canceling this PaymentIntent. Possible values are `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`
            public var cancellationReason: CancellationReason?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?

            /// Reason for canceling this PaymentIntent. Possible values are `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`
            public enum CancellationReason: String, Codable, CaseIterable {
                case abandoned
                case duplicate
                case fraudulent
                case requestedByCustomer = "requested_by_customer"
            }

            public init(cancellationReason: CancellationReason? = nil, expand: [String]? = nil) {
                self.cancellationReason = cancellationReason
                self.expand = expand
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(cancellationReason, forKey: "cancellation_reason")
                encoder.encode(expand, forKey: "expand")
                return encoder.items
            }
        }
    }
}
