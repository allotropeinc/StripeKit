// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Issuing {
    public var cardholders: Cardholders {
        Cardholders(path: path + "/cardholders")
    }

    public struct Cardholders {
        /// Path: `/v1/issuing/cardholders`
        public let path: String

        /// <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "GetIssuingCardholders")
        }

        /// IssuingCardholderList
        public struct GetResponse: Decodable {
            public var data: [StripeKit.IssuingCardholder]
            /// True if this list has another page of items after this one that can be fetched.
            public var hasMore: Bool
            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public var object: Object
            /// The URL where this list can be accessed.
            public var url: String

            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public enum Object: String, Codable, CaseIterable {
                case list
            }

            public init(data: [StripeKit.IssuingCardholder], hasMore: Bool, object: Object, url: String) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.data = try values.decode([StripeKit.IssuingCardholder].self, forKey: "data")
                self.hasMore = try values.decode(Bool.self, forKey: "has_more")
                self.object = try values.decode(Object.self, forKey: "object")
                self.url = try values.decode(String.self, forKey: "url")
            }
        }

        public struct GetParameters {
            public var created: Created?
            public var email: String?
            public var endingBefore: String?
            public var expand: [String]?
            public var limit: Int?
            public var phoneNumber: String?
            public var startingAfter: String?
            public var status: Status?
            public var type: `Type`?

            public struct Created: Codable {
                /// Range_query_specs
                public var object: Object?
                public var int: Int?

                /// Range_query_specs
                public struct Object: Codable {
                    public var gt: Int?
                    public var gte: Int?
                    public var lt: Int?
                    public var lte: Int?

                    public init(gt: Int? = nil, gte: Int? = nil, lt: Int? = nil, lte: Int? = nil) {
                        self.gt = gt
                        self.gte = gte
                        self.lt = lt
                        self.lte = lte
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(gt, forKey: "gt")
                        encoder.encode(gte, forKey: "gte")
                        encoder.encode(lt, forKey: "lt")
                        encoder.encode(lte, forKey: "lte")
                        return encoder.items
                    }
                }

                public init(object: Object? = nil, int: Int? = nil) {
                    self.object = object
                    self.int = int
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(object, forKey: "object")
                    encoder.encode(int, forKey: "int")
                    return encoder.items
                }
            }

            public enum Status: String, Codable, CaseIterable {
                case active
                case blocked
                case inactive
            }

            public enum `Type`: String, Codable, CaseIterable {
                case company
                case individual
            }

            public init(created: Created? = nil, email: String? = nil, endingBefore: String? = nil, expand: [String]? = nil, limit: Int? = nil, phoneNumber: String? = nil, startingAfter: String? = nil, status: Status? = nil, type: `Type`? = nil) {
                self.created = created
                self.email = email
                self.endingBefore = endingBefore
                self.expand = expand
                self.limit = limit
                self.phoneNumber = phoneNumber
                self.startingAfter = startingAfter
                self.status = status
                self.type = type
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(created, forKey: "created", isDeepObject: true)
                encoder.encode(email, forKey: "email")
                encoder.encode(endingBefore, forKey: "ending_before")
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(limit, forKey: "limit")
                encoder.encode(phoneNumber, forKey: "phone_number")
                encoder.encode(startingAfter, forKey: "starting_after")
                encoder.encode(status, forKey: "status")
                encoder.encode(type, forKey: "type")
                return encoder.items
            }
        }

        /// <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.IssuingCardholder> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostIssuingCardholders")
        }

        public struct PostRequest: Encodable {
            /// Billing_specs
            ///
            /// The cardholder's billing address.
            public var billing: Billing
            /// Company_param
            ///
            /// Additional information about a `company` cardholder.
            public var company: Company?
            /// The cardholder's email address.
            public var email: String?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Individual_param
            ///
            /// Additional information about an `individual` cardholder.
            public var individual: Individual?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: [String: String]?
            /// The cardholder's name. This will be printed on cards issued to them. The maximum length of this field is 24 characters. This field cannot contain any special characters or numbers.
            public var name: String
            /// The cardholder's phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
            public var phoneNumber: String?
            /// Authorization_controls_param_v2
            ///
            /// Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
            public var spendingControls: SpendingControls?
            /// Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`.
            public var status: Status?
            /// One of `individual` or `company`.
            public var type: `Type`

            /// Billing_specs
            ///
            /// The cardholder's billing address.
            public struct Billing: Encodable {
                /// Required_address
                public var address: Address

                /// Required_address
                public struct Address: Encodable {
                    public var city: String
                    public var country: String
                    public var line1: String
                    public var line2: String?
                    public var postalCode: String
                    public var state: String?

                    public init(city: String, country: String, line1: String, line2: String? = nil, postalCode: String, state: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        return encoder.items
                    }
                }

                public init(address: Address) {
                    self.address = address
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(address, forKey: "address")
                    return encoder.items
                }
            }

            /// Company_param
            ///
            /// Additional information about a `company` cardholder.
            public struct Company: Encodable {
                public var taxID: String?

                public init(taxID: String? = nil) {
                    self.taxID = taxID
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(taxID, forKey: "tax_id")
                    return encoder.items
                }
            }

            /// Individual_param
            ///
            /// Additional information about an `individual` cardholder.
            public struct Individual: Encodable {
                /// Date_of_birth_specs
                public var dob: Dob?
                public var firstName: String
                public var lastName: String
                /// Person_verification_param
                public var verification: Verification?

                /// Date_of_birth_specs
                public struct Dob: Encodable {
                    public var day: Int
                    public var month: Int
                    public var year: Int

                    public init(day: Int, month: Int, year: Int) {
                        self.day = day
                        self.month = month
                        self.year = year
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(day, forKey: "day")
                        encoder.encode(month, forKey: "month")
                        encoder.encode(year, forKey: "year")
                        return encoder.items
                    }
                }

                /// Person_verification_param
                public struct Verification: Encodable {
                    /// Person_verification_document_param
                    public var document: Document?

                    /// Person_verification_document_param
                    public struct Document: Encodable {
                        public var back: String?
                        public var front: String?

                        public init(back: String? = nil, front: String? = nil) {
                            self.back = back
                            self.front = front
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(back, forKey: "back")
                            encoder.encode(front, forKey: "front")
                            return encoder.items
                        }
                    }

                    public init(document: Document? = nil) {
                        self.document = document
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(document, forKey: "document")
                        return encoder.items
                    }
                }

                public init(dob: Dob? = nil, firstName: String, lastName: String, verification: Verification? = nil) {
                    self.dob = dob
                    self.firstName = firstName
                    self.lastName = lastName
                    self.verification = verification
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(dob, forKey: "dob")
                    encoder.encode(firstName, forKey: "first_name")
                    encoder.encode(lastName, forKey: "last_name")
                    encoder.encode(verification, forKey: "verification")
                    return encoder.items
                }
            }

            /// Authorization_controls_param_v2
            ///
            /// Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
            public struct SpendingControls: Encodable {
                public var allowedCategories: [AllowedCategory]?
                public var blockedCategories: [BlockedCategory]?
                public var spendingLimits: [SpendingLimit]?
                public var spendingLimitsCurrency: String?

                public enum AllowedCategory: String, Codable, CaseIterable {
                    case acRefrigerationRepair = "ac_refrigeration_repair"
                    case accountingBookkeepingServices = "accounting_bookkeeping_services"
                    case advertisingServices = "advertising_services"
                    case agriculturalCooperative = "agricultural_cooperative"
                    case airlinesAirCarriers = "airlines_air_carriers"
                    case airportsFlyingFields = "airports_flying_fields"
                    case ambulanceServices = "ambulance_services"
                    case amusementParksCarnivals = "amusement_parks_carnivals"
                    case antiqueReproductions = "antique_reproductions"
                    case antiqueShops = "antique_shops"
                    case aquariums
                    case architecturalSurveyingServices = "architectural_surveying_services"
                    case artDealersAndGalleries = "art_dealers_and_galleries"
                    case artistsSupplyAndCraftShops = "artists_supply_and_craft_shops"
                    case autoAndHomeSupplyStores = "auto_and_home_supply_stores"
                    case autoBodyRepairShops = "auto_body_repair_shops"
                    case autoPaintShops = "auto_paint_shops"
                    case autoServiceShops = "auto_service_shops"
                    case automatedCashDisburse = "automated_cash_disburse"
                    case automatedFuelDispensers = "automated_fuel_dispensers"
                    case automobileAssociations = "automobile_associations"
                    case automotivePartsAndAccessoriesStores = "automotive_parts_and_accessories_stores"
                    case automotiveTireStores = "automotive_tire_stores"
                    case bailAndBondPayments = "bail_and_bond_payments"
                    case bakeries
                    case bandsOrchestras = "bands_orchestras"
                    case barberAndBeautyShops = "barber_and_beauty_shops"
                    case bettingCasinoGambling = "betting_casino_gambling"
                    case bicycleShops = "bicycle_shops"
                    case billiardPoolEstablishments = "billiard_pool_establishments"
                    case boatDealers = "boat_dealers"
                    case boatRentalsAndLeases = "boat_rentals_and_leases"
                    case bookStores = "book_stores"
                    case booksPeriodicalsAndNewspapers = "books_periodicals_and_newspapers"
                    case bowlingAlleys = "bowling_alleys"
                    case busLines = "bus_lines"
                    case businessSecretarialSchools = "business_secretarial_schools"
                    case buyingShoppingServices = "buying_shopping_services"
                    case cableSatelliteAndOtherPayTelevisionAndRadio = "cable_satellite_and_other_pay_television_and_radio"
                    case cameraAndPhotographicSupplyStores = "camera_and_photographic_supply_stores"
                    case candyNutAndConfectioneryStores = "candy_nut_and_confectionery_stores"
                    case carAndTruckDealersNewUsed = "car_and_truck_dealers_new_used"
                    case carAndTruckDealersUsedOnly = "car_and_truck_dealers_used_only"
                    case carRentalAgencies = "car_rental_agencies"
                    case carWashes = "car_washes"
                    case carpentryServices = "carpentry_services"
                    case carpetUpholsteryCleaning = "carpet_upholstery_cleaning"
                    case caterers
                    case charitableAndSocialServiceOrganizationsFundraising = "charitable_and_social_service_organizations_fundraising"
                    case chemicalsAndAlliedProducts = "chemicals_and_allied_products"
                    case childCareServices = "child_care_services"
                    case childrensAndInfantsWearStores = "childrens_and_infants_wear_stores"
                    case chiropodistsPodiatrists = "chiropodists_podiatrists"
                    case chiropractors
                    case cigarStoresAndStands = "cigar_stores_and_stands"
                    case civicSocialFraternalAssociations = "civic_social_fraternal_associations"
                    case cleaningAndMaintenance = "cleaning_and_maintenance"
                    case clothingRental = "clothing_rental"
                    case collegesUniversities = "colleges_universities"
                    case commercialEquipment = "commercial_equipment"
                    case commercialFootwear = "commercial_footwear"
                    case commercialPhotographyArtAndGraphics = "commercial_photography_art_and_graphics"
                    case commuterTransportAndFerries = "commuter_transport_and_ferries"
                    case computerNetworkServices = "computer_network_services"
                    case computerProgramming = "computer_programming"
                    case computerRepair = "computer_repair"
                    case computerSoftwareStores = "computer_software_stores"
                    case computersPeripheralsAndSoftware = "computers_peripherals_and_software"
                    case concreteWorkServices = "concrete_work_services"
                    case constructionMaterials = "construction_materials"
                    case consultingPublicRelations = "consulting_public_relations"
                    case correspondenceSchools = "correspondence_schools"
                    case cosmeticStores = "cosmetic_stores"
                    case counselingServices = "counseling_services"
                    case countryClubs = "country_clubs"
                    case courierServices = "courier_services"
                    case courtCosts = "court_costs"
                    case creditReportingAgencies = "credit_reporting_agencies"
                    case cruiseLines = "cruise_lines"
                    case dairyProductsStores = "dairy_products_stores"
                    case danceHallStudiosSchools = "dance_hall_studios_schools"
                    case datingEscortServices = "dating_escort_services"
                    case dentistsOrthodontists = "dentists_orthodontists"
                    case departmentStores = "department_stores"
                    case detectiveAgencies = "detective_agencies"
                    case digitalGoodsApplications = "digital_goods_applications"
                    case digitalGoodsGames = "digital_goods_games"
                    case digitalGoodsLargeVolume = "digital_goods_large_volume"
                    case digitalGoodsMedia = "digital_goods_media"
                    case directMarketingCatalogMerchant = "direct_marketing_catalog_merchant"
                    case directMarketingCombinationCatalogAndRetailMerchant = "direct_marketing_combination_catalog_and_retail_merchant"
                    case directMarketingInboundTelemarketing = "direct_marketing_inbound_telemarketing"
                    case directMarketingInsuranceServices = "direct_marketing_insurance_services"
                    case directMarketingOther = "direct_marketing_other"
                    case directMarketingOutboundTelemarketing = "direct_marketing_outbound_telemarketing"
                    case directMarketingSubscription = "direct_marketing_subscription"
                    case directMarketingTravel = "direct_marketing_travel"
                    case discountStores = "discount_stores"
                    case doctors
                    case doorToDoorSales = "door_to_door_sales"
                    case draperyWindowCoveringAndUpholsteryStores = "drapery_window_covering_and_upholstery_stores"
                    case drinkingPlaces = "drinking_places"
                    case drugStoresAndPharmacies = "drug_stores_and_pharmacies"
                    case drugsDrugProprietariesAndDruggistSundries = "drugs_drug_proprietaries_and_druggist_sundries"
                    case dryCleaners = "dry_cleaners"
                    case durableGoods = "durable_goods"
                    case dutyFreeStores = "duty_free_stores"
                    case eatingPlacesRestaurants = "eating_places_restaurants"
                    case educationalServices = "educational_services"
                    case electricRazorStores = "electric_razor_stores"
                    case electricalPartsAndEquipment = "electrical_parts_and_equipment"
                    case electricalServices = "electrical_services"
                    case electronicsRepairShops = "electronics_repair_shops"
                    case electronicsStores = "electronics_stores"
                    case elementarySecondarySchools = "elementary_secondary_schools"
                    case employmentTempAgencies = "employment_temp_agencies"
                    case equipmentRental = "equipment_rental"
                    case exterminatingServices = "exterminating_services"
                    case familyClothingStores = "family_clothing_stores"
                    case fastFoodRestaurants = "fast_food_restaurants"
                    case financialInstitutions = "financial_institutions"
                    case finesGovernmentAdministrativeEntities = "fines_government_administrative_entities"
                    case fireplaceFireplaceScreensAndAccessoriesStores = "fireplace_fireplace_screens_and_accessories_stores"
                    case floorCoveringStores = "floor_covering_stores"
                    case florists
                    case floristsSuppliesNurseryStockAndFlowers = "florists_supplies_nursery_stock_and_flowers"
                    case freezerAndLockerMeatProvisioners = "freezer_and_locker_meat_provisioners"
                    case fuelDealersNonAutomotive = "fuel_dealers_non_automotive"
                    case funeralServicesCrematories = "funeral_services_crematories"
                    case furnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    case furnitureRepairRefinishing = "furniture_repair_refinishing"
                    case furriersAndFurShops = "furriers_and_fur_shops"
                    case generalServices = "general_services"
                    case giftCardNoveltyAndSouvenirShops = "gift_card_novelty_and_souvenir_shops"
                    case glassPaintAndWallpaperStores = "glass_paint_and_wallpaper_stores"
                    case glasswareCrystalStores = "glassware_crystal_stores"
                    case golfCoursesPublic = "golf_courses_public"
                    case governmentServices = "government_services"
                    case groceryStoresSupermarkets = "grocery_stores_supermarkets"
                    case hardwareEquipmentAndSupplies = "hardware_equipment_and_supplies"
                    case hardwareStores = "hardware_stores"
                    case healthAndBeautySpas = "health_and_beauty_spas"
                    case hearingAidsSalesAndSupplies = "hearing_aids_sales_and_supplies"
                    case heatingPlumbingAC = "heating_plumbing_a_c"
                    case hobbyToyAndGameShops = "hobby_toy_and_game_shops"
                    case homeSupplyWarehouseStores = "home_supply_warehouse_stores"
                    case hospitals
                    case hotelsMotelsAndResorts = "hotels_motels_and_resorts"
                    case householdApplianceStores = "household_appliance_stores"
                    case industrialSupplies = "industrial_supplies"
                    case informationRetrievalServices = "information_retrieval_services"
                    case insuranceDefault = "insurance_default"
                    case insuranceUnderwritingPremiums = "insurance_underwriting_premiums"
                    case intraCompanyPurchases = "intra_company_purchases"
                    case jewelryStoresWatchesClocksAndSilverwareStores = "jewelry_stores_watches_clocks_and_silverware_stores"
                    case landscapingServices = "landscaping_services"
                    case laundries
                    case laundryCleaningServices = "laundry_cleaning_services"
                    case legalServicesAttorneys = "legal_services_attorneys"
                    case luggageAndLeatherGoodsStores = "luggage_and_leather_goods_stores"
                    case lumberBuildingMaterialsStores = "lumber_building_materials_stores"
                    case manualCashDisburse = "manual_cash_disburse"
                    case marinasServiceAndSupplies = "marinas_service_and_supplies"
                    case masonryStoneworkAndPlaster = "masonry_stonework_and_plaster"
                    case massageParlors = "massage_parlors"
                    case medicalAndDentalLabs = "medical_and_dental_labs"
                    case medicalDentalOphthalmicAndHospitalEquipmentAndSupplies = "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    case medicalServices = "medical_services"
                    case membershipOrganizations = "membership_organizations"
                    case mensAndBoysClothingAndAccessoriesStores = "mens_and_boys_clothing_and_accessories_stores"
                    case mensWomensClothingStores = "mens_womens_clothing_stores"
                    case metalServiceCenters = "metal_service_centers"
                    case miscellaneous
                    case miscellaneousApparelAndAccessoryShops = "miscellaneous_apparel_and_accessory_shops"
                    case miscellaneousAutoDealers = "miscellaneous_auto_dealers"
                    case miscellaneousBusinessServices = "miscellaneous_business_services"
                    case miscellaneousFoodStores = "miscellaneous_food_stores"
                    case miscellaneousGeneralMerchandise = "miscellaneous_general_merchandise"
                    case miscellaneousGeneralServices = "miscellaneous_general_services"
                    case miscellaneousHomeFurnishingSpecialtyStores = "miscellaneous_home_furnishing_specialty_stores"
                    case miscellaneousPublishingAndPrinting = "miscellaneous_publishing_and_printing"
                    case miscellaneousRecreationServices = "miscellaneous_recreation_services"
                    case miscellaneousRepairShops = "miscellaneous_repair_shops"
                    case miscellaneousSpecialtyRetail = "miscellaneous_specialty_retail"
                    case mobileHomeDealers = "mobile_home_dealers"
                    case motionPictureTheaters = "motion_picture_theaters"
                    case motorFreightCarriersAndTrucking = "motor_freight_carriers_and_trucking"
                    case motorHomesDealers = "motor_homes_dealers"
                    case motorVehicleSuppliesAndNewParts = "motor_vehicle_supplies_and_new_parts"
                    case motorcycleShopsAndDealers = "motorcycle_shops_and_dealers"
                    case motorcycleShopsDealers = "motorcycle_shops_dealers"
                    case musicStoresMusicalInstrumentsPianosAndSheetMusic = "music_stores_musical_instruments_pianos_and_sheet_music"
                    case newsDealersAndNewsstands = "news_dealers_and_newsstands"
                    case nonFiMoneyOrders = "non_fi_money_orders"
                    case nonFiStoredValueCardPurchaseLoad = "non_fi_stored_value_card_purchase_load"
                    case nondurableGoods = "nondurable_goods"
                    case nurseriesLawnAndGardenSupplyStores = "nurseries_lawn_and_garden_supply_stores"
                    case nursingPersonalCare = "nursing_personal_care"
                    case officeAndCommercialFurniture = "office_and_commercial_furniture"
                    case opticiansEyeglasses = "opticians_eyeglasses"
                    case optometristsOphthalmologist = "optometrists_ophthalmologist"
                    case orthopedicGoodsProstheticDevices = "orthopedic_goods_prosthetic_devices"
                    case osteopaths
                    case packageStoresBeerWineAndLiquor = "package_stores_beer_wine_and_liquor"
                    case paintsVarnishesAndSupplies = "paints_varnishes_and_supplies"
                    case parkingLotsGarages = "parking_lots_garages"
                    case passengerRailways = "passenger_railways"
                    case pawnShops = "pawn_shops"
                    case petShopsPetFoodAndSupplies = "pet_shops_pet_food_and_supplies"
                    case petroleumAndPetroleumProducts = "petroleum_and_petroleum_products"
                    case photoDeveloping = "photo_developing"
                    case photographicPhotocopyMicrofilmEquipmentAndSupplies = "photographic_photocopy_microfilm_equipment_and_supplies"
                    case photographicStudios = "photographic_studios"
                    case pictureVideoProduction = "picture_video_production"
                    case pieceGoodsNotionsAndOtherDryGoods = "piece_goods_notions_and_other_dry_goods"
                    case plumbingHeatingEquipmentAndSupplies = "plumbing_heating_equipment_and_supplies"
                    case politicalOrganizations = "political_organizations"
                    case postalServicesGovernmentOnly = "postal_services_government_only"
                    case preciousStonesAndMetalsWatchesAndJewelry = "precious_stones_and_metals_watches_and_jewelry"
                    case professionalServices = "professional_services"
                    case publicWarehousingAndStorage = "public_warehousing_and_storage"
                    case quickCopyReproAndBlueprint = "quick_copy_repro_and_blueprint"
                    case railroads
                    case realEstateAgentsAndManagersRentals = "real_estate_agents_and_managers_rentals"
                    case recordStores = "record_stores"
                    case recreationalVehicleRentals = "recreational_vehicle_rentals"
                    case religiousGoodsStores = "religious_goods_stores"
                    case religiousOrganizations = "religious_organizations"
                    case roofingSidingSheetMetal = "roofing_siding_sheet_metal"
                    case secretarialSupportServices = "secretarial_support_services"
                    case securityBrokersDealers = "security_brokers_dealers"
                    case serviceStations = "service_stations"
                    case sewingNeedleworkFabricAndPieceGoodsStores = "sewing_needlework_fabric_and_piece_goods_stores"
                    case shoeRepairHatCleaning = "shoe_repair_hat_cleaning"
                    case shoeStores = "shoe_stores"
                    case smallApplianceRepair = "small_appliance_repair"
                    case snowmobileDealers = "snowmobile_dealers"
                    case specialTradeServices = "special_trade_services"
                    case specialtyCleaning = "specialty_cleaning"
                    case sportingGoodsStores = "sporting_goods_stores"
                    case sportingRecreationCamps = "sporting_recreation_camps"
                    case sportsAndRidingApparelStores = "sports_and_riding_apparel_stores"
                    case sportsClubsFields = "sports_clubs_fields"
                    case stampAndCoinStores = "stamp_and_coin_stores"
                    case stationaryOfficeSuppliesPrintingAndWritingPaper = "stationary_office_supplies_printing_and_writing_paper"
                    case stationeryStoresOfficeAndSchoolSupplyStores = "stationery_stores_office_and_school_supply_stores"
                    case swimmingPoolsSales = "swimming_pools_sales"
                    case tUiTravelGermany = "t_ui_travel_germany"
                    case tailorsAlterations = "tailors_alterations"
                    case taxPaymentsGovernmentAgencies = "tax_payments_government_agencies"
                    case taxPreparationServices = "tax_preparation_services"
                    case taxicabsLimousines = "taxicabs_limousines"
                    case telecommunicationEquipmentAndTelephoneSales = "telecommunication_equipment_and_telephone_sales"
                    case telecommunicationServices = "telecommunication_services"
                    case telegraphServices = "telegraph_services"
                    case tentAndAwningShops = "tent_and_awning_shops"
                    case testingLaboratories = "testing_laboratories"
                    case theatricalTicketAgencies = "theatrical_ticket_agencies"
                    case timeshares
                    case tireRetreadingAndRepair = "tire_retreading_and_repair"
                    case tollsBridgeFees = "tolls_bridge_fees"
                    case touristAttractionsAndExhibits = "tourist_attractions_and_exhibits"
                    case towingServices = "towing_services"
                    case trailerParksCampgrounds = "trailer_parks_campgrounds"
                    case transportationServices = "transportation_services"
                    case travelAgenciesTourOperators = "travel_agencies_tour_operators"
                    case truckStopIteration = "truck_stop_iteration"
                    case truckUtilityTrailerRentals = "truck_utility_trailer_rentals"
                    case typesettingPlateMakingAndRelatedServices = "typesetting_plate_making_and_related_services"
                    case typewriterStores = "typewriter_stores"
                    case uSFederalGovernmentAgenciesOrDepartments = "u_s_federal_government_agencies_or_departments"
                    case uniformsCommercialClothing = "uniforms_commercial_clothing"
                    case usedMerchandiseAndSecondhandStores = "used_merchandise_and_secondhand_stores"
                    case utilities
                    case varietyStores = "variety_stores"
                    case veterinaryServices = "veterinary_services"
                    case videoAmusementGameSupplies = "video_amusement_game_supplies"
                    case videoGameArcades = "video_game_arcades"
                    case videoTapeRentalStores = "video_tape_rental_stores"
                    case vocationalTradeSchools = "vocational_trade_schools"
                    case watchJewelryRepair = "watch_jewelry_repair"
                    case weldingRepair = "welding_repair"
                    case wholesaleClubs = "wholesale_clubs"
                    case wigAndToupeeStores = "wig_and_toupee_stores"
                    case wiresMoneyOrders = "wires_money_orders"
                    case womensAccessoryAndSpecialtyShops = "womens_accessory_and_specialty_shops"
                    case womensReadyToWearStores = "womens_ready_to_wear_stores"
                    case wreckingAndSalvageYards = "wrecking_and_salvage_yards"
                }

                public enum BlockedCategory: String, Codable, CaseIterable {
                    case acRefrigerationRepair = "ac_refrigeration_repair"
                    case accountingBookkeepingServices = "accounting_bookkeeping_services"
                    case advertisingServices = "advertising_services"
                    case agriculturalCooperative = "agricultural_cooperative"
                    case airlinesAirCarriers = "airlines_air_carriers"
                    case airportsFlyingFields = "airports_flying_fields"
                    case ambulanceServices = "ambulance_services"
                    case amusementParksCarnivals = "amusement_parks_carnivals"
                    case antiqueReproductions = "antique_reproductions"
                    case antiqueShops = "antique_shops"
                    case aquariums
                    case architecturalSurveyingServices = "architectural_surveying_services"
                    case artDealersAndGalleries = "art_dealers_and_galleries"
                    case artistsSupplyAndCraftShops = "artists_supply_and_craft_shops"
                    case autoAndHomeSupplyStores = "auto_and_home_supply_stores"
                    case autoBodyRepairShops = "auto_body_repair_shops"
                    case autoPaintShops = "auto_paint_shops"
                    case autoServiceShops = "auto_service_shops"
                    case automatedCashDisburse = "automated_cash_disburse"
                    case automatedFuelDispensers = "automated_fuel_dispensers"
                    case automobileAssociations = "automobile_associations"
                    case automotivePartsAndAccessoriesStores = "automotive_parts_and_accessories_stores"
                    case automotiveTireStores = "automotive_tire_stores"
                    case bailAndBondPayments = "bail_and_bond_payments"
                    case bakeries
                    case bandsOrchestras = "bands_orchestras"
                    case barberAndBeautyShops = "barber_and_beauty_shops"
                    case bettingCasinoGambling = "betting_casino_gambling"
                    case bicycleShops = "bicycle_shops"
                    case billiardPoolEstablishments = "billiard_pool_establishments"
                    case boatDealers = "boat_dealers"
                    case boatRentalsAndLeases = "boat_rentals_and_leases"
                    case bookStores = "book_stores"
                    case booksPeriodicalsAndNewspapers = "books_periodicals_and_newspapers"
                    case bowlingAlleys = "bowling_alleys"
                    case busLines = "bus_lines"
                    case businessSecretarialSchools = "business_secretarial_schools"
                    case buyingShoppingServices = "buying_shopping_services"
                    case cableSatelliteAndOtherPayTelevisionAndRadio = "cable_satellite_and_other_pay_television_and_radio"
                    case cameraAndPhotographicSupplyStores = "camera_and_photographic_supply_stores"
                    case candyNutAndConfectioneryStores = "candy_nut_and_confectionery_stores"
                    case carAndTruckDealersNewUsed = "car_and_truck_dealers_new_used"
                    case carAndTruckDealersUsedOnly = "car_and_truck_dealers_used_only"
                    case carRentalAgencies = "car_rental_agencies"
                    case carWashes = "car_washes"
                    case carpentryServices = "carpentry_services"
                    case carpetUpholsteryCleaning = "carpet_upholstery_cleaning"
                    case caterers
                    case charitableAndSocialServiceOrganizationsFundraising = "charitable_and_social_service_organizations_fundraising"
                    case chemicalsAndAlliedProducts = "chemicals_and_allied_products"
                    case childCareServices = "child_care_services"
                    case childrensAndInfantsWearStores = "childrens_and_infants_wear_stores"
                    case chiropodistsPodiatrists = "chiropodists_podiatrists"
                    case chiropractors
                    case cigarStoresAndStands = "cigar_stores_and_stands"
                    case civicSocialFraternalAssociations = "civic_social_fraternal_associations"
                    case cleaningAndMaintenance = "cleaning_and_maintenance"
                    case clothingRental = "clothing_rental"
                    case collegesUniversities = "colleges_universities"
                    case commercialEquipment = "commercial_equipment"
                    case commercialFootwear = "commercial_footwear"
                    case commercialPhotographyArtAndGraphics = "commercial_photography_art_and_graphics"
                    case commuterTransportAndFerries = "commuter_transport_and_ferries"
                    case computerNetworkServices = "computer_network_services"
                    case computerProgramming = "computer_programming"
                    case computerRepair = "computer_repair"
                    case computerSoftwareStores = "computer_software_stores"
                    case computersPeripheralsAndSoftware = "computers_peripherals_and_software"
                    case concreteWorkServices = "concrete_work_services"
                    case constructionMaterials = "construction_materials"
                    case consultingPublicRelations = "consulting_public_relations"
                    case correspondenceSchools = "correspondence_schools"
                    case cosmeticStores = "cosmetic_stores"
                    case counselingServices = "counseling_services"
                    case countryClubs = "country_clubs"
                    case courierServices = "courier_services"
                    case courtCosts = "court_costs"
                    case creditReportingAgencies = "credit_reporting_agencies"
                    case cruiseLines = "cruise_lines"
                    case dairyProductsStores = "dairy_products_stores"
                    case danceHallStudiosSchools = "dance_hall_studios_schools"
                    case datingEscortServices = "dating_escort_services"
                    case dentistsOrthodontists = "dentists_orthodontists"
                    case departmentStores = "department_stores"
                    case detectiveAgencies = "detective_agencies"
                    case digitalGoodsApplications = "digital_goods_applications"
                    case digitalGoodsGames = "digital_goods_games"
                    case digitalGoodsLargeVolume = "digital_goods_large_volume"
                    case digitalGoodsMedia = "digital_goods_media"
                    case directMarketingCatalogMerchant = "direct_marketing_catalog_merchant"
                    case directMarketingCombinationCatalogAndRetailMerchant = "direct_marketing_combination_catalog_and_retail_merchant"
                    case directMarketingInboundTelemarketing = "direct_marketing_inbound_telemarketing"
                    case directMarketingInsuranceServices = "direct_marketing_insurance_services"
                    case directMarketingOther = "direct_marketing_other"
                    case directMarketingOutboundTelemarketing = "direct_marketing_outbound_telemarketing"
                    case directMarketingSubscription = "direct_marketing_subscription"
                    case directMarketingTravel = "direct_marketing_travel"
                    case discountStores = "discount_stores"
                    case doctors
                    case doorToDoorSales = "door_to_door_sales"
                    case draperyWindowCoveringAndUpholsteryStores = "drapery_window_covering_and_upholstery_stores"
                    case drinkingPlaces = "drinking_places"
                    case drugStoresAndPharmacies = "drug_stores_and_pharmacies"
                    case drugsDrugProprietariesAndDruggistSundries = "drugs_drug_proprietaries_and_druggist_sundries"
                    case dryCleaners = "dry_cleaners"
                    case durableGoods = "durable_goods"
                    case dutyFreeStores = "duty_free_stores"
                    case eatingPlacesRestaurants = "eating_places_restaurants"
                    case educationalServices = "educational_services"
                    case electricRazorStores = "electric_razor_stores"
                    case electricalPartsAndEquipment = "electrical_parts_and_equipment"
                    case electricalServices = "electrical_services"
                    case electronicsRepairShops = "electronics_repair_shops"
                    case electronicsStores = "electronics_stores"
                    case elementarySecondarySchools = "elementary_secondary_schools"
                    case employmentTempAgencies = "employment_temp_agencies"
                    case equipmentRental = "equipment_rental"
                    case exterminatingServices = "exterminating_services"
                    case familyClothingStores = "family_clothing_stores"
                    case fastFoodRestaurants = "fast_food_restaurants"
                    case financialInstitutions = "financial_institutions"
                    case finesGovernmentAdministrativeEntities = "fines_government_administrative_entities"
                    case fireplaceFireplaceScreensAndAccessoriesStores = "fireplace_fireplace_screens_and_accessories_stores"
                    case floorCoveringStores = "floor_covering_stores"
                    case florists
                    case floristsSuppliesNurseryStockAndFlowers = "florists_supplies_nursery_stock_and_flowers"
                    case freezerAndLockerMeatProvisioners = "freezer_and_locker_meat_provisioners"
                    case fuelDealersNonAutomotive = "fuel_dealers_non_automotive"
                    case funeralServicesCrematories = "funeral_services_crematories"
                    case furnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    case furnitureRepairRefinishing = "furniture_repair_refinishing"
                    case furriersAndFurShops = "furriers_and_fur_shops"
                    case generalServices = "general_services"
                    case giftCardNoveltyAndSouvenirShops = "gift_card_novelty_and_souvenir_shops"
                    case glassPaintAndWallpaperStores = "glass_paint_and_wallpaper_stores"
                    case glasswareCrystalStores = "glassware_crystal_stores"
                    case golfCoursesPublic = "golf_courses_public"
                    case governmentServices = "government_services"
                    case groceryStoresSupermarkets = "grocery_stores_supermarkets"
                    case hardwareEquipmentAndSupplies = "hardware_equipment_and_supplies"
                    case hardwareStores = "hardware_stores"
                    case healthAndBeautySpas = "health_and_beauty_spas"
                    case hearingAidsSalesAndSupplies = "hearing_aids_sales_and_supplies"
                    case heatingPlumbingAC = "heating_plumbing_a_c"
                    case hobbyToyAndGameShops = "hobby_toy_and_game_shops"
                    case homeSupplyWarehouseStores = "home_supply_warehouse_stores"
                    case hospitals
                    case hotelsMotelsAndResorts = "hotels_motels_and_resorts"
                    case householdApplianceStores = "household_appliance_stores"
                    case industrialSupplies = "industrial_supplies"
                    case informationRetrievalServices = "information_retrieval_services"
                    case insuranceDefault = "insurance_default"
                    case insuranceUnderwritingPremiums = "insurance_underwriting_premiums"
                    case intraCompanyPurchases = "intra_company_purchases"
                    case jewelryStoresWatchesClocksAndSilverwareStores = "jewelry_stores_watches_clocks_and_silverware_stores"
                    case landscapingServices = "landscaping_services"
                    case laundries
                    case laundryCleaningServices = "laundry_cleaning_services"
                    case legalServicesAttorneys = "legal_services_attorneys"
                    case luggageAndLeatherGoodsStores = "luggage_and_leather_goods_stores"
                    case lumberBuildingMaterialsStores = "lumber_building_materials_stores"
                    case manualCashDisburse = "manual_cash_disburse"
                    case marinasServiceAndSupplies = "marinas_service_and_supplies"
                    case masonryStoneworkAndPlaster = "masonry_stonework_and_plaster"
                    case massageParlors = "massage_parlors"
                    case medicalAndDentalLabs = "medical_and_dental_labs"
                    case medicalDentalOphthalmicAndHospitalEquipmentAndSupplies = "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    case medicalServices = "medical_services"
                    case membershipOrganizations = "membership_organizations"
                    case mensAndBoysClothingAndAccessoriesStores = "mens_and_boys_clothing_and_accessories_stores"
                    case mensWomensClothingStores = "mens_womens_clothing_stores"
                    case metalServiceCenters = "metal_service_centers"
                    case miscellaneous
                    case miscellaneousApparelAndAccessoryShops = "miscellaneous_apparel_and_accessory_shops"
                    case miscellaneousAutoDealers = "miscellaneous_auto_dealers"
                    case miscellaneousBusinessServices = "miscellaneous_business_services"
                    case miscellaneousFoodStores = "miscellaneous_food_stores"
                    case miscellaneousGeneralMerchandise = "miscellaneous_general_merchandise"
                    case miscellaneousGeneralServices = "miscellaneous_general_services"
                    case miscellaneousHomeFurnishingSpecialtyStores = "miscellaneous_home_furnishing_specialty_stores"
                    case miscellaneousPublishingAndPrinting = "miscellaneous_publishing_and_printing"
                    case miscellaneousRecreationServices = "miscellaneous_recreation_services"
                    case miscellaneousRepairShops = "miscellaneous_repair_shops"
                    case miscellaneousSpecialtyRetail = "miscellaneous_specialty_retail"
                    case mobileHomeDealers = "mobile_home_dealers"
                    case motionPictureTheaters = "motion_picture_theaters"
                    case motorFreightCarriersAndTrucking = "motor_freight_carriers_and_trucking"
                    case motorHomesDealers = "motor_homes_dealers"
                    case motorVehicleSuppliesAndNewParts = "motor_vehicle_supplies_and_new_parts"
                    case motorcycleShopsAndDealers = "motorcycle_shops_and_dealers"
                    case motorcycleShopsDealers = "motorcycle_shops_dealers"
                    case musicStoresMusicalInstrumentsPianosAndSheetMusic = "music_stores_musical_instruments_pianos_and_sheet_music"
                    case newsDealersAndNewsstands = "news_dealers_and_newsstands"
                    case nonFiMoneyOrders = "non_fi_money_orders"
                    case nonFiStoredValueCardPurchaseLoad = "non_fi_stored_value_card_purchase_load"
                    case nondurableGoods = "nondurable_goods"
                    case nurseriesLawnAndGardenSupplyStores = "nurseries_lawn_and_garden_supply_stores"
                    case nursingPersonalCare = "nursing_personal_care"
                    case officeAndCommercialFurniture = "office_and_commercial_furniture"
                    case opticiansEyeglasses = "opticians_eyeglasses"
                    case optometristsOphthalmologist = "optometrists_ophthalmologist"
                    case orthopedicGoodsProstheticDevices = "orthopedic_goods_prosthetic_devices"
                    case osteopaths
                    case packageStoresBeerWineAndLiquor = "package_stores_beer_wine_and_liquor"
                    case paintsVarnishesAndSupplies = "paints_varnishes_and_supplies"
                    case parkingLotsGarages = "parking_lots_garages"
                    case passengerRailways = "passenger_railways"
                    case pawnShops = "pawn_shops"
                    case petShopsPetFoodAndSupplies = "pet_shops_pet_food_and_supplies"
                    case petroleumAndPetroleumProducts = "petroleum_and_petroleum_products"
                    case photoDeveloping = "photo_developing"
                    case photographicPhotocopyMicrofilmEquipmentAndSupplies = "photographic_photocopy_microfilm_equipment_and_supplies"
                    case photographicStudios = "photographic_studios"
                    case pictureVideoProduction = "picture_video_production"
                    case pieceGoodsNotionsAndOtherDryGoods = "piece_goods_notions_and_other_dry_goods"
                    case plumbingHeatingEquipmentAndSupplies = "plumbing_heating_equipment_and_supplies"
                    case politicalOrganizations = "political_organizations"
                    case postalServicesGovernmentOnly = "postal_services_government_only"
                    case preciousStonesAndMetalsWatchesAndJewelry = "precious_stones_and_metals_watches_and_jewelry"
                    case professionalServices = "professional_services"
                    case publicWarehousingAndStorage = "public_warehousing_and_storage"
                    case quickCopyReproAndBlueprint = "quick_copy_repro_and_blueprint"
                    case railroads
                    case realEstateAgentsAndManagersRentals = "real_estate_agents_and_managers_rentals"
                    case recordStores = "record_stores"
                    case recreationalVehicleRentals = "recreational_vehicle_rentals"
                    case religiousGoodsStores = "religious_goods_stores"
                    case religiousOrganizations = "religious_organizations"
                    case roofingSidingSheetMetal = "roofing_siding_sheet_metal"
                    case secretarialSupportServices = "secretarial_support_services"
                    case securityBrokersDealers = "security_brokers_dealers"
                    case serviceStations = "service_stations"
                    case sewingNeedleworkFabricAndPieceGoodsStores = "sewing_needlework_fabric_and_piece_goods_stores"
                    case shoeRepairHatCleaning = "shoe_repair_hat_cleaning"
                    case shoeStores = "shoe_stores"
                    case smallApplianceRepair = "small_appliance_repair"
                    case snowmobileDealers = "snowmobile_dealers"
                    case specialTradeServices = "special_trade_services"
                    case specialtyCleaning = "specialty_cleaning"
                    case sportingGoodsStores = "sporting_goods_stores"
                    case sportingRecreationCamps = "sporting_recreation_camps"
                    case sportsAndRidingApparelStores = "sports_and_riding_apparel_stores"
                    case sportsClubsFields = "sports_clubs_fields"
                    case stampAndCoinStores = "stamp_and_coin_stores"
                    case stationaryOfficeSuppliesPrintingAndWritingPaper = "stationary_office_supplies_printing_and_writing_paper"
                    case stationeryStoresOfficeAndSchoolSupplyStores = "stationery_stores_office_and_school_supply_stores"
                    case swimmingPoolsSales = "swimming_pools_sales"
                    case tUiTravelGermany = "t_ui_travel_germany"
                    case tailorsAlterations = "tailors_alterations"
                    case taxPaymentsGovernmentAgencies = "tax_payments_government_agencies"
                    case taxPreparationServices = "tax_preparation_services"
                    case taxicabsLimousines = "taxicabs_limousines"
                    case telecommunicationEquipmentAndTelephoneSales = "telecommunication_equipment_and_telephone_sales"
                    case telecommunicationServices = "telecommunication_services"
                    case telegraphServices = "telegraph_services"
                    case tentAndAwningShops = "tent_and_awning_shops"
                    case testingLaboratories = "testing_laboratories"
                    case theatricalTicketAgencies = "theatrical_ticket_agencies"
                    case timeshares
                    case tireRetreadingAndRepair = "tire_retreading_and_repair"
                    case tollsBridgeFees = "tolls_bridge_fees"
                    case touristAttractionsAndExhibits = "tourist_attractions_and_exhibits"
                    case towingServices = "towing_services"
                    case trailerParksCampgrounds = "trailer_parks_campgrounds"
                    case transportationServices = "transportation_services"
                    case travelAgenciesTourOperators = "travel_agencies_tour_operators"
                    case truckStopIteration = "truck_stop_iteration"
                    case truckUtilityTrailerRentals = "truck_utility_trailer_rentals"
                    case typesettingPlateMakingAndRelatedServices = "typesetting_plate_making_and_related_services"
                    case typewriterStores = "typewriter_stores"
                    case uSFederalGovernmentAgenciesOrDepartments = "u_s_federal_government_agencies_or_departments"
                    case uniformsCommercialClothing = "uniforms_commercial_clothing"
                    case usedMerchandiseAndSecondhandStores = "used_merchandise_and_secondhand_stores"
                    case utilities
                    case varietyStores = "variety_stores"
                    case veterinaryServices = "veterinary_services"
                    case videoAmusementGameSupplies = "video_amusement_game_supplies"
                    case videoGameArcades = "video_game_arcades"
                    case videoTapeRentalStores = "video_tape_rental_stores"
                    case vocationalTradeSchools = "vocational_trade_schools"
                    case watchJewelryRepair = "watch_jewelry_repair"
                    case weldingRepair = "welding_repair"
                    case wholesaleClubs = "wholesale_clubs"
                    case wigAndToupeeStores = "wig_and_toupee_stores"
                    case wiresMoneyOrders = "wires_money_orders"
                    case womensAccessoryAndSpecialtyShops = "womens_accessory_and_specialty_shops"
                    case womensReadyToWearStores = "womens_ready_to_wear_stores"
                    case wreckingAndSalvageYards = "wrecking_and_salvage_yards"
                }

                /// Spending_limits_param
                public struct SpendingLimit: Encodable {
                    public var amount: Int
                    public var categories: [Category]?
                    public var interval: Interval

                    public enum Category: String, Codable, CaseIterable {
                        case acRefrigerationRepair = "ac_refrigeration_repair"
                        case accountingBookkeepingServices = "accounting_bookkeeping_services"
                        case advertisingServices = "advertising_services"
                        case agriculturalCooperative = "agricultural_cooperative"
                        case airlinesAirCarriers = "airlines_air_carriers"
                        case airportsFlyingFields = "airports_flying_fields"
                        case ambulanceServices = "ambulance_services"
                        case amusementParksCarnivals = "amusement_parks_carnivals"
                        case antiqueReproductions = "antique_reproductions"
                        case antiqueShops = "antique_shops"
                        case aquariums
                        case architecturalSurveyingServices = "architectural_surveying_services"
                        case artDealersAndGalleries = "art_dealers_and_galleries"
                        case artistsSupplyAndCraftShops = "artists_supply_and_craft_shops"
                        case autoAndHomeSupplyStores = "auto_and_home_supply_stores"
                        case autoBodyRepairShops = "auto_body_repair_shops"
                        case autoPaintShops = "auto_paint_shops"
                        case autoServiceShops = "auto_service_shops"
                        case automatedCashDisburse = "automated_cash_disburse"
                        case automatedFuelDispensers = "automated_fuel_dispensers"
                        case automobileAssociations = "automobile_associations"
                        case automotivePartsAndAccessoriesStores = "automotive_parts_and_accessories_stores"
                        case automotiveTireStores = "automotive_tire_stores"
                        case bailAndBondPayments = "bail_and_bond_payments"
                        case bakeries
                        case bandsOrchestras = "bands_orchestras"
                        case barberAndBeautyShops = "barber_and_beauty_shops"
                        case bettingCasinoGambling = "betting_casino_gambling"
                        case bicycleShops = "bicycle_shops"
                        case billiardPoolEstablishments = "billiard_pool_establishments"
                        case boatDealers = "boat_dealers"
                        case boatRentalsAndLeases = "boat_rentals_and_leases"
                        case bookStores = "book_stores"
                        case booksPeriodicalsAndNewspapers = "books_periodicals_and_newspapers"
                        case bowlingAlleys = "bowling_alleys"
                        case busLines = "bus_lines"
                        case businessSecretarialSchools = "business_secretarial_schools"
                        case buyingShoppingServices = "buying_shopping_services"
                        case cableSatelliteAndOtherPayTelevisionAndRadio = "cable_satellite_and_other_pay_television_and_radio"
                        case cameraAndPhotographicSupplyStores = "camera_and_photographic_supply_stores"
                        case candyNutAndConfectioneryStores = "candy_nut_and_confectionery_stores"
                        case carAndTruckDealersNewUsed = "car_and_truck_dealers_new_used"
                        case carAndTruckDealersUsedOnly = "car_and_truck_dealers_used_only"
                        case carRentalAgencies = "car_rental_agencies"
                        case carWashes = "car_washes"
                        case carpentryServices = "carpentry_services"
                        case carpetUpholsteryCleaning = "carpet_upholstery_cleaning"
                        case caterers
                        case charitableAndSocialServiceOrganizationsFundraising = "charitable_and_social_service_organizations_fundraising"
                        case chemicalsAndAlliedProducts = "chemicals_and_allied_products"
                        case childCareServices = "child_care_services"
                        case childrensAndInfantsWearStores = "childrens_and_infants_wear_stores"
                        case chiropodistsPodiatrists = "chiropodists_podiatrists"
                        case chiropractors
                        case cigarStoresAndStands = "cigar_stores_and_stands"
                        case civicSocialFraternalAssociations = "civic_social_fraternal_associations"
                        case cleaningAndMaintenance = "cleaning_and_maintenance"
                        case clothingRental = "clothing_rental"
                        case collegesUniversities = "colleges_universities"
                        case commercialEquipment = "commercial_equipment"
                        case commercialFootwear = "commercial_footwear"
                        case commercialPhotographyArtAndGraphics = "commercial_photography_art_and_graphics"
                        case commuterTransportAndFerries = "commuter_transport_and_ferries"
                        case computerNetworkServices = "computer_network_services"
                        case computerProgramming = "computer_programming"
                        case computerRepair = "computer_repair"
                        case computerSoftwareStores = "computer_software_stores"
                        case computersPeripheralsAndSoftware = "computers_peripherals_and_software"
                        case concreteWorkServices = "concrete_work_services"
                        case constructionMaterials = "construction_materials"
                        case consultingPublicRelations = "consulting_public_relations"
                        case correspondenceSchools = "correspondence_schools"
                        case cosmeticStores = "cosmetic_stores"
                        case counselingServices = "counseling_services"
                        case countryClubs = "country_clubs"
                        case courierServices = "courier_services"
                        case courtCosts = "court_costs"
                        case creditReportingAgencies = "credit_reporting_agencies"
                        case cruiseLines = "cruise_lines"
                        case dairyProductsStores = "dairy_products_stores"
                        case danceHallStudiosSchools = "dance_hall_studios_schools"
                        case datingEscortServices = "dating_escort_services"
                        case dentistsOrthodontists = "dentists_orthodontists"
                        case departmentStores = "department_stores"
                        case detectiveAgencies = "detective_agencies"
                        case digitalGoodsApplications = "digital_goods_applications"
                        case digitalGoodsGames = "digital_goods_games"
                        case digitalGoodsLargeVolume = "digital_goods_large_volume"
                        case digitalGoodsMedia = "digital_goods_media"
                        case directMarketingCatalogMerchant = "direct_marketing_catalog_merchant"
                        case directMarketingCombinationCatalogAndRetailMerchant = "direct_marketing_combination_catalog_and_retail_merchant"
                        case directMarketingInboundTelemarketing = "direct_marketing_inbound_telemarketing"
                        case directMarketingInsuranceServices = "direct_marketing_insurance_services"
                        case directMarketingOther = "direct_marketing_other"
                        case directMarketingOutboundTelemarketing = "direct_marketing_outbound_telemarketing"
                        case directMarketingSubscription = "direct_marketing_subscription"
                        case directMarketingTravel = "direct_marketing_travel"
                        case discountStores = "discount_stores"
                        case doctors
                        case doorToDoorSales = "door_to_door_sales"
                        case draperyWindowCoveringAndUpholsteryStores = "drapery_window_covering_and_upholstery_stores"
                        case drinkingPlaces = "drinking_places"
                        case drugStoresAndPharmacies = "drug_stores_and_pharmacies"
                        case drugsDrugProprietariesAndDruggistSundries = "drugs_drug_proprietaries_and_druggist_sundries"
                        case dryCleaners = "dry_cleaners"
                        case durableGoods = "durable_goods"
                        case dutyFreeStores = "duty_free_stores"
                        case eatingPlacesRestaurants = "eating_places_restaurants"
                        case educationalServices = "educational_services"
                        case electricRazorStores = "electric_razor_stores"
                        case electricalPartsAndEquipment = "electrical_parts_and_equipment"
                        case electricalServices = "electrical_services"
                        case electronicsRepairShops = "electronics_repair_shops"
                        case electronicsStores = "electronics_stores"
                        case elementarySecondarySchools = "elementary_secondary_schools"
                        case employmentTempAgencies = "employment_temp_agencies"
                        case equipmentRental = "equipment_rental"
                        case exterminatingServices = "exterminating_services"
                        case familyClothingStores = "family_clothing_stores"
                        case fastFoodRestaurants = "fast_food_restaurants"
                        case financialInstitutions = "financial_institutions"
                        case finesGovernmentAdministrativeEntities = "fines_government_administrative_entities"
                        case fireplaceFireplaceScreensAndAccessoriesStores = "fireplace_fireplace_screens_and_accessories_stores"
                        case floorCoveringStores = "floor_covering_stores"
                        case florists
                        case floristsSuppliesNurseryStockAndFlowers = "florists_supplies_nursery_stock_and_flowers"
                        case freezerAndLockerMeatProvisioners = "freezer_and_locker_meat_provisioners"
                        case fuelDealersNonAutomotive = "fuel_dealers_non_automotive"
                        case funeralServicesCrematories = "funeral_services_crematories"
                        case furnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = "furniture_home_furnishings_and_equipment_stores_except_appliances"
                        case furnitureRepairRefinishing = "furniture_repair_refinishing"
                        case furriersAndFurShops = "furriers_and_fur_shops"
                        case generalServices = "general_services"
                        case giftCardNoveltyAndSouvenirShops = "gift_card_novelty_and_souvenir_shops"
                        case glassPaintAndWallpaperStores = "glass_paint_and_wallpaper_stores"
                        case glasswareCrystalStores = "glassware_crystal_stores"
                        case golfCoursesPublic = "golf_courses_public"
                        case governmentServices = "government_services"
                        case groceryStoresSupermarkets = "grocery_stores_supermarkets"
                        case hardwareEquipmentAndSupplies = "hardware_equipment_and_supplies"
                        case hardwareStores = "hardware_stores"
                        case healthAndBeautySpas = "health_and_beauty_spas"
                        case hearingAidsSalesAndSupplies = "hearing_aids_sales_and_supplies"
                        case heatingPlumbingAC = "heating_plumbing_a_c"
                        case hobbyToyAndGameShops = "hobby_toy_and_game_shops"
                        case homeSupplyWarehouseStores = "home_supply_warehouse_stores"
                        case hospitals
                        case hotelsMotelsAndResorts = "hotels_motels_and_resorts"
                        case householdApplianceStores = "household_appliance_stores"
                        case industrialSupplies = "industrial_supplies"
                        case informationRetrievalServices = "information_retrieval_services"
                        case insuranceDefault = "insurance_default"
                        case insuranceUnderwritingPremiums = "insurance_underwriting_premiums"
                        case intraCompanyPurchases = "intra_company_purchases"
                        case jewelryStoresWatchesClocksAndSilverwareStores = "jewelry_stores_watches_clocks_and_silverware_stores"
                        case landscapingServices = "landscaping_services"
                        case laundries
                        case laundryCleaningServices = "laundry_cleaning_services"
                        case legalServicesAttorneys = "legal_services_attorneys"
                        case luggageAndLeatherGoodsStores = "luggage_and_leather_goods_stores"
                        case lumberBuildingMaterialsStores = "lumber_building_materials_stores"
                        case manualCashDisburse = "manual_cash_disburse"
                        case marinasServiceAndSupplies = "marinas_service_and_supplies"
                        case masonryStoneworkAndPlaster = "masonry_stonework_and_plaster"
                        case massageParlors = "massage_parlors"
                        case medicalAndDentalLabs = "medical_and_dental_labs"
                        case medicalDentalOphthalmicAndHospitalEquipmentAndSupplies = "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                        case medicalServices = "medical_services"
                        case membershipOrganizations = "membership_organizations"
                        case mensAndBoysClothingAndAccessoriesStores = "mens_and_boys_clothing_and_accessories_stores"
                        case mensWomensClothingStores = "mens_womens_clothing_stores"
                        case metalServiceCenters = "metal_service_centers"
                        case miscellaneous
                        case miscellaneousApparelAndAccessoryShops = "miscellaneous_apparel_and_accessory_shops"
                        case miscellaneousAutoDealers = "miscellaneous_auto_dealers"
                        case miscellaneousBusinessServices = "miscellaneous_business_services"
                        case miscellaneousFoodStores = "miscellaneous_food_stores"
                        case miscellaneousGeneralMerchandise = "miscellaneous_general_merchandise"
                        case miscellaneousGeneralServices = "miscellaneous_general_services"
                        case miscellaneousHomeFurnishingSpecialtyStores = "miscellaneous_home_furnishing_specialty_stores"
                        case miscellaneousPublishingAndPrinting = "miscellaneous_publishing_and_printing"
                        case miscellaneousRecreationServices = "miscellaneous_recreation_services"
                        case miscellaneousRepairShops = "miscellaneous_repair_shops"
                        case miscellaneousSpecialtyRetail = "miscellaneous_specialty_retail"
                        case mobileHomeDealers = "mobile_home_dealers"
                        case motionPictureTheaters = "motion_picture_theaters"
                        case motorFreightCarriersAndTrucking = "motor_freight_carriers_and_trucking"
                        case motorHomesDealers = "motor_homes_dealers"
                        case motorVehicleSuppliesAndNewParts = "motor_vehicle_supplies_and_new_parts"
                        case motorcycleShopsAndDealers = "motorcycle_shops_and_dealers"
                        case motorcycleShopsDealers = "motorcycle_shops_dealers"
                        case musicStoresMusicalInstrumentsPianosAndSheetMusic = "music_stores_musical_instruments_pianos_and_sheet_music"
                        case newsDealersAndNewsstands = "news_dealers_and_newsstands"
                        case nonFiMoneyOrders = "non_fi_money_orders"
                        case nonFiStoredValueCardPurchaseLoad = "non_fi_stored_value_card_purchase_load"
                        case nondurableGoods = "nondurable_goods"
                        case nurseriesLawnAndGardenSupplyStores = "nurseries_lawn_and_garden_supply_stores"
                        case nursingPersonalCare = "nursing_personal_care"
                        case officeAndCommercialFurniture = "office_and_commercial_furniture"
                        case opticiansEyeglasses = "opticians_eyeglasses"
                        case optometristsOphthalmologist = "optometrists_ophthalmologist"
                        case orthopedicGoodsProstheticDevices = "orthopedic_goods_prosthetic_devices"
                        case osteopaths
                        case packageStoresBeerWineAndLiquor = "package_stores_beer_wine_and_liquor"
                        case paintsVarnishesAndSupplies = "paints_varnishes_and_supplies"
                        case parkingLotsGarages = "parking_lots_garages"
                        case passengerRailways = "passenger_railways"
                        case pawnShops = "pawn_shops"
                        case petShopsPetFoodAndSupplies = "pet_shops_pet_food_and_supplies"
                        case petroleumAndPetroleumProducts = "petroleum_and_petroleum_products"
                        case photoDeveloping = "photo_developing"
                        case photographicPhotocopyMicrofilmEquipmentAndSupplies = "photographic_photocopy_microfilm_equipment_and_supplies"
                        case photographicStudios = "photographic_studios"
                        case pictureVideoProduction = "picture_video_production"
                        case pieceGoodsNotionsAndOtherDryGoods = "piece_goods_notions_and_other_dry_goods"
                        case plumbingHeatingEquipmentAndSupplies = "plumbing_heating_equipment_and_supplies"
                        case politicalOrganizations = "political_organizations"
                        case postalServicesGovernmentOnly = "postal_services_government_only"
                        case preciousStonesAndMetalsWatchesAndJewelry = "precious_stones_and_metals_watches_and_jewelry"
                        case professionalServices = "professional_services"
                        case publicWarehousingAndStorage = "public_warehousing_and_storage"
                        case quickCopyReproAndBlueprint = "quick_copy_repro_and_blueprint"
                        case railroads
                        case realEstateAgentsAndManagersRentals = "real_estate_agents_and_managers_rentals"
                        case recordStores = "record_stores"
                        case recreationalVehicleRentals = "recreational_vehicle_rentals"
                        case religiousGoodsStores = "religious_goods_stores"
                        case religiousOrganizations = "religious_organizations"
                        case roofingSidingSheetMetal = "roofing_siding_sheet_metal"
                        case secretarialSupportServices = "secretarial_support_services"
                        case securityBrokersDealers = "security_brokers_dealers"
                        case serviceStations = "service_stations"
                        case sewingNeedleworkFabricAndPieceGoodsStores = "sewing_needlework_fabric_and_piece_goods_stores"
                        case shoeRepairHatCleaning = "shoe_repair_hat_cleaning"
                        case shoeStores = "shoe_stores"
                        case smallApplianceRepair = "small_appliance_repair"
                        case snowmobileDealers = "snowmobile_dealers"
                        case specialTradeServices = "special_trade_services"
                        case specialtyCleaning = "specialty_cleaning"
                        case sportingGoodsStores = "sporting_goods_stores"
                        case sportingRecreationCamps = "sporting_recreation_camps"
                        case sportsAndRidingApparelStores = "sports_and_riding_apparel_stores"
                        case sportsClubsFields = "sports_clubs_fields"
                        case stampAndCoinStores = "stamp_and_coin_stores"
                        case stationaryOfficeSuppliesPrintingAndWritingPaper = "stationary_office_supplies_printing_and_writing_paper"
                        case stationeryStoresOfficeAndSchoolSupplyStores = "stationery_stores_office_and_school_supply_stores"
                        case swimmingPoolsSales = "swimming_pools_sales"
                        case tUiTravelGermany = "t_ui_travel_germany"
                        case tailorsAlterations = "tailors_alterations"
                        case taxPaymentsGovernmentAgencies = "tax_payments_government_agencies"
                        case taxPreparationServices = "tax_preparation_services"
                        case taxicabsLimousines = "taxicabs_limousines"
                        case telecommunicationEquipmentAndTelephoneSales = "telecommunication_equipment_and_telephone_sales"
                        case telecommunicationServices = "telecommunication_services"
                        case telegraphServices = "telegraph_services"
                        case tentAndAwningShops = "tent_and_awning_shops"
                        case testingLaboratories = "testing_laboratories"
                        case theatricalTicketAgencies = "theatrical_ticket_agencies"
                        case timeshares
                        case tireRetreadingAndRepair = "tire_retreading_and_repair"
                        case tollsBridgeFees = "tolls_bridge_fees"
                        case touristAttractionsAndExhibits = "tourist_attractions_and_exhibits"
                        case towingServices = "towing_services"
                        case trailerParksCampgrounds = "trailer_parks_campgrounds"
                        case transportationServices = "transportation_services"
                        case travelAgenciesTourOperators = "travel_agencies_tour_operators"
                        case truckStopIteration = "truck_stop_iteration"
                        case truckUtilityTrailerRentals = "truck_utility_trailer_rentals"
                        case typesettingPlateMakingAndRelatedServices = "typesetting_plate_making_and_related_services"
                        case typewriterStores = "typewriter_stores"
                        case uSFederalGovernmentAgenciesOrDepartments = "u_s_federal_government_agencies_or_departments"
                        case uniformsCommercialClothing = "uniforms_commercial_clothing"
                        case usedMerchandiseAndSecondhandStores = "used_merchandise_and_secondhand_stores"
                        case utilities
                        case varietyStores = "variety_stores"
                        case veterinaryServices = "veterinary_services"
                        case videoAmusementGameSupplies = "video_amusement_game_supplies"
                        case videoGameArcades = "video_game_arcades"
                        case videoTapeRentalStores = "video_tape_rental_stores"
                        case vocationalTradeSchools = "vocational_trade_schools"
                        case watchJewelryRepair = "watch_jewelry_repair"
                        case weldingRepair = "welding_repair"
                        case wholesaleClubs = "wholesale_clubs"
                        case wigAndToupeeStores = "wig_and_toupee_stores"
                        case wiresMoneyOrders = "wires_money_orders"
                        case womensAccessoryAndSpecialtyShops = "womens_accessory_and_specialty_shops"
                        case womensReadyToWearStores = "womens_ready_to_wear_stores"
                        case wreckingAndSalvageYards = "wrecking_and_salvage_yards"
                    }

                    public enum Interval: String, Codable, CaseIterable {
                        case allTime = "all_time"
                        case daily
                        case monthly
                        case perAuthorization = "per_authorization"
                        case weekly
                        case yearly
                    }

                    public init(amount: Int, categories: [Category]? = nil, interval: Interval) {
                        self.amount = amount
                        self.categories = categories
                        self.interval = interval
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(amount, forKey: "amount")
                        encoder.encode(categories, forKey: "categories")
                        encoder.encode(interval, forKey: "interval")
                        return encoder.items
                    }
                }

                public init(allowedCategories: [AllowedCategory]? = nil, blockedCategories: [BlockedCategory]? = nil, spendingLimits: [SpendingLimit]? = nil, spendingLimitsCurrency: String? = nil) {
                    self.allowedCategories = allowedCategories
                    self.blockedCategories = blockedCategories
                    self.spendingLimits = spendingLimits
                    self.spendingLimitsCurrency = spendingLimitsCurrency
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(allowedCategories, forKey: "allowed_categories")
                    encoder.encode(blockedCategories, forKey: "blocked_categories")
                    encoder.encode(spendingLimits, forKey: "spending_limits")
                    encoder.encode(spendingLimitsCurrency, forKey: "spending_limits_currency")
                    return encoder.items
                }
            }

            /// Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`.
            public enum Status: String, Codable, CaseIterable {
                case active
                case inactive
            }

            /// One of `individual` or `company`.
            public enum `Type`: String, Codable, CaseIterable {
                case company
                case individual
            }

            public init(billing: Billing, company: Company? = nil, email: String? = nil, expand: [String]? = nil, individual: Individual? = nil, metadata: [String: String]? = nil, name: String, phoneNumber: String? = nil, spendingControls: SpendingControls? = nil, status: Status? = nil, type: `Type`) {
                self.billing = billing
                self.company = company
                self.email = email
                self.expand = expand
                self.individual = individual
                self.metadata = metadata
                self.name = name
                self.phoneNumber = phoneNumber
                self.spendingControls = spendingControls
                self.status = status
                self.type = type
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(billing, forKey: "billing")
                encoder.encode(company, forKey: "company")
                encoder.encode(email, forKey: "email")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(individual, forKey: "individual")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(name, forKey: "name")
                encoder.encode(phoneNumber, forKey: "phone_number")
                encoder.encode(spendingControls, forKey: "spending_controls")
                encoder.encode(status, forKey: "status")
                encoder.encode(type, forKey: "type")
                return encoder.items
            }
        }
    }
}
