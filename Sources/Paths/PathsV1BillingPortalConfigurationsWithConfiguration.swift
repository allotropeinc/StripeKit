// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.BillingPortal.Configurations {
    public func configuration(_ configuration: String) -> WithConfiguration {
        WithConfiguration(path: "\(path)/\(configuration)")
    }

    public struct WithConfiguration {
        /// Path: `/v1/billing_portal/configurations/{configuration}`
        public let path: String

        /// <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.BillingPortalConfiguration> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetBillingPortalConfigurationsConfiguration")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates a configuration that describes the functionality of the customer portal.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.BillingPortalConfiguration> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostBillingPortalConfigurationsConfiguration")
        }

        public struct PostRequest: Encodable {
            /// Whether the configuration is active and can be used to create portal sessions.
            public var isActive: Bool?
            /// Business_profile_update_param
            ///
            /// The business information shown to customers in the portal.
            public var businessProfile: BusinessProfile?
            /// The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.
            public var defaultReturnURL: DefaultReturnURL?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Features_updating_param
            ///
            /// Information about the features available in the portal.
            public var features: Features?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?

            /// Business_profile_update_param
            ///
            /// The business information shown to customers in the portal.
            public struct BusinessProfile: Encodable {
                public var headline: String?
                public var privacyPolicyURL: PrivacyPolicyURL?
                public var termsOfServiceURL: TermsOfServiceURL?

                public struct PrivacyPolicyURL: Encodable {
                    public var string: String?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(string: String? = nil, object: Object? = nil) {
                        self.string = string
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(string, forKey: "string")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public struct TermsOfServiceURL: Encodable {
                    public var string: String?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(string: String? = nil, object: Object? = nil) {
                        self.string = string
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(string, forKey: "string")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public init(headline: String? = nil, privacyPolicyURL: PrivacyPolicyURL? = nil, termsOfServiceURL: TermsOfServiceURL? = nil) {
                    self.headline = headline
                    self.privacyPolicyURL = privacyPolicyURL
                    self.termsOfServiceURL = termsOfServiceURL
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(headline, forKey: "headline")
                    encoder.encode(privacyPolicyURL, forKey: "privacy_policy_url")
                    encoder.encode(termsOfServiceURL, forKey: "terms_of_service_url")
                    return encoder.items
                }
            }

            /// The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.
            public struct DefaultReturnURL: Encodable {
                public var string: String?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(string: String? = nil, object: Object? = nil) {
                    self.string = string
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(string, forKey: "string")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// Features_updating_param
            ///
            /// Information about the features available in the portal.
            public struct Features: Encodable {
                /// Customer_update_updating_param
                public var customerUpdate: CustomerUpdate?
                /// Invoice_list_param
                public var invoiceHistory: InvoiceHistory?
                /// Payment_method_update_param
                public var paymentMethodUpdate: PaymentMethodUpdate?
                /// Subscription_cancel_updating_param
                public var subscriptionCancel: SubscriptionCancel?
                /// Subscription_pause_param
                public var subscriptionPause: SubscriptionPause?
                /// Subscription_update_updating_param
                public var subscriptionUpdate: SubscriptionUpdate?

                /// Customer_update_updating_param
                public struct CustomerUpdate: Encodable {
                    public var allowedUpdates: AllowedUpdates?
                    public var isEnabled: Bool?

                    public struct AllowedUpdates: Encodable {
                        public var placeholderItems: [PlaceholderItem]?
                        public var object: Object?

                        public enum PlaceholderItem: String, Codable, CaseIterable {
                            case address
                            case email
                            case phone
                            case shipping
                            case taxID = "tax_id"
                        }

                        public enum Object: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(placeholderItems: [PlaceholderItem]? = nil, object: Object? = nil) {
                            self.placeholderItems = placeholderItems
                            self.object = object
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(placeholderItems, forKey: "placeholderItems")
                            encoder.encode(object, forKey: "object")
                            return encoder.items
                        }
                    }

                    public init(allowedUpdates: AllowedUpdates? = nil, isEnabled: Bool? = nil) {
                        self.allowedUpdates = allowedUpdates
                        self.isEnabled = isEnabled
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(allowedUpdates, forKey: "allowed_updates")
                        encoder.encode(isEnabled, forKey: "enabled")
                        return encoder.items
                    }
                }

                /// Invoice_list_param
                public struct InvoiceHistory: Encodable {
                    public var isEnabled: Bool

                    public init(isEnabled: Bool) {
                        self.isEnabled = isEnabled
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isEnabled, forKey: "enabled")
                        return encoder.items
                    }
                }

                /// Payment_method_update_param
                public struct PaymentMethodUpdate: Encodable {
                    public var isEnabled: Bool

                    public init(isEnabled: Bool) {
                        self.isEnabled = isEnabled
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isEnabled, forKey: "enabled")
                        return encoder.items
                    }
                }

                /// Subscription_cancel_updating_param
                public struct SubscriptionCancel: Encodable {
                    /// Subscription_cancellation_reason_updating_param
                    public var cancellationReason: CancellationReason?
                    public var isEnabled: Bool?
                    public var mode: Mode?
                    public var prorationBehavior: ProrationBehavior?

                    /// Subscription_cancellation_reason_updating_param
                    public struct CancellationReason: Encodable {
                        public var isEnabled: Bool
                        public var options: Options?

                        public struct Options: Encodable {
                            public var placeholderItems: [PlaceholderItem]?
                            public var object: Object?

                            public enum PlaceholderItem: String, Codable, CaseIterable {
                                case customerService = "customer_service"
                                case lowQuality = "low_quality"
                                case missingFeatures = "missing_features"
                                case other
                                case switchedService = "switched_service"
                                case tooComplex = "too_complex"
                                case tooExpensive = "too_expensive"
                                case unused
                            }

                            public enum Object: String, Codable, CaseIterable {
                                case empty = ""
                            }

                            public init(placeholderItems: [PlaceholderItem]? = nil, object: Object? = nil) {
                                self.placeholderItems = placeholderItems
                                self.object = object
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(placeholderItems, forKey: "placeholderItems")
                                encoder.encode(object, forKey: "object")
                                return encoder.items
                            }
                        }

                        public init(isEnabled: Bool, options: Options? = nil) {
                            self.isEnabled = isEnabled
                            self.options = options
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(isEnabled, forKey: "enabled")
                            encoder.encode(options, forKey: "options")
                            return encoder.items
                        }
                    }

                    public enum Mode: String, Codable, CaseIterable {
                        case atPeriodEnd = "at_period_end"
                        case immediately
                    }

                    public enum ProrationBehavior: String, Codable, CaseIterable {
                        case alwaysInvoice = "always_invoice"
                        case createProrations = "create_prorations"
                        case `none`
                    }

                    public init(cancellationReason: CancellationReason? = nil, isEnabled: Bool? = nil, mode: Mode? = nil, prorationBehavior: ProrationBehavior? = nil) {
                        self.cancellationReason = cancellationReason
                        self.isEnabled = isEnabled
                        self.mode = mode
                        self.prorationBehavior = prorationBehavior
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(cancellationReason, forKey: "cancellation_reason")
                        encoder.encode(isEnabled, forKey: "enabled")
                        encoder.encode(mode, forKey: "mode")
                        encoder.encode(prorationBehavior, forKey: "proration_behavior")
                        return encoder.items
                    }
                }

                /// Subscription_pause_param
                public struct SubscriptionPause: Encodable {
                    public var isEnabled: Bool?

                    public init(isEnabled: Bool? = nil) {
                        self.isEnabled = isEnabled
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isEnabled, forKey: "enabled")
                        return encoder.items
                    }
                }

                /// Subscription_update_updating_param
                public struct SubscriptionUpdate: Encodable {
                    public var defaultAllowedUpdates: DefaultAllowedUpdates?
                    public var isEnabled: Bool?
                    public var products: Products?
                    public var prorationBehavior: ProrationBehavior?

                    public struct DefaultAllowedUpdates: Encodable {
                        public var placeholderItems: [PlaceholderItem]?
                        public var object: Object?

                        public enum PlaceholderItem: String, Codable, CaseIterable {
                            case price
                            case promotionCode = "promotion_code"
                            case quantity
                        }

                        public enum Object: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(placeholderItems: [PlaceholderItem]? = nil, object: Object? = nil) {
                            self.placeholderItems = placeholderItems
                            self.object = object
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(placeholderItems, forKey: "placeholderItems")
                            encoder.encode(object, forKey: "object")
                            return encoder.items
                        }
                    }

                    public struct Products: Encodable {
                        public var placeholderItems: [PlaceholderItem]?
                        public var object: Object?

                        /// Subscription_update_product_param
                        public struct PlaceholderItem: Encodable {
                            public var prices: [String]
                            public var product: String

                            public init(prices: [String], product: String) {
                                self.prices = prices
                                self.product = product
                            }

                            public var asQuery: [(String, String?)] {
                                let encoder = URLQueryEncoder()
                                encoder.encode(prices, forKey: "prices")
                                encoder.encode(product, forKey: "product")
                                return encoder.items
                            }
                        }

                        public enum Object: String, Codable, CaseIterable {
                            case empty = ""
                        }

                        public init(placeholderItems: [PlaceholderItem]? = nil, object: Object? = nil) {
                            self.placeholderItems = placeholderItems
                            self.object = object
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(placeholderItems, forKey: "placeholderItems")
                            encoder.encode(object, forKey: "object")
                            return encoder.items
                        }
                    }

                    public enum ProrationBehavior: String, Codable, CaseIterable {
                        case alwaysInvoice = "always_invoice"
                        case createProrations = "create_prorations"
                        case `none`
                    }

                    public init(defaultAllowedUpdates: DefaultAllowedUpdates? = nil, isEnabled: Bool? = nil, products: Products? = nil, prorationBehavior: ProrationBehavior? = nil) {
                        self.defaultAllowedUpdates = defaultAllowedUpdates
                        self.isEnabled = isEnabled
                        self.products = products
                        self.prorationBehavior = prorationBehavior
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(defaultAllowedUpdates, forKey: "default_allowed_updates")
                        encoder.encode(isEnabled, forKey: "enabled")
                        encoder.encode(products, forKey: "products")
                        encoder.encode(prorationBehavior, forKey: "proration_behavior")
                        return encoder.items
                    }
                }

                public init(customerUpdate: CustomerUpdate? = nil, invoiceHistory: InvoiceHistory? = nil, paymentMethodUpdate: PaymentMethodUpdate? = nil, subscriptionCancel: SubscriptionCancel? = nil, subscriptionPause: SubscriptionPause? = nil, subscriptionUpdate: SubscriptionUpdate? = nil) {
                    self.customerUpdate = customerUpdate
                    self.invoiceHistory = invoiceHistory
                    self.paymentMethodUpdate = paymentMethodUpdate
                    self.subscriptionCancel = subscriptionCancel
                    self.subscriptionPause = subscriptionPause
                    self.subscriptionUpdate = subscriptionUpdate
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(customerUpdate, forKey: "customer_update")
                    encoder.encode(invoiceHistory, forKey: "invoice_history")
                    encoder.encode(paymentMethodUpdate, forKey: "payment_method_update")
                    encoder.encode(subscriptionCancel, forKey: "subscription_cancel")
                    encoder.encode(subscriptionPause, forKey: "subscription_pause")
                    encoder.encode(subscriptionUpdate, forKey: "subscription_update")
                    return encoder.items
                }
            }

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            public init(isActive: Bool? = nil, businessProfile: BusinessProfile? = nil, defaultReturnURL: DefaultReturnURL? = nil, expand: [String]? = nil, features: Features? = nil, metadata: Metadata? = nil) {
                self.isActive = isActive
                self.businessProfile = businessProfile
                self.defaultReturnURL = defaultReturnURL
                self.expand = expand
                self.features = features
                self.metadata = metadata
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isActive, forKey: "active")
                encoder.encode(businessProfile, forKey: "business_profile")
                encoder.encode(defaultReturnURL, forKey: "default_return_url")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(features, forKey: "features")
                encoder.encode(metadata, forKey: "metadata")
                return encoder.items
            }
        }
    }
}
