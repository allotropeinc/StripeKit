// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Sources {
    public func source(_ source: String) -> WithSource {
        WithSource(path: "\(path)/\(source)")
    }

    public struct WithSource {
        /// Path: `/v1/sources/{source}`
        public let path: String

        /// <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
        public func get(clientSecret: String? = nil, expand: [String]? = nil) -> Request<StripeKit.Source> {
            Request(method: "GET", url: path, query: makeGetQuery(clientSecret, expand), id: "GetSourcesSource")
        }

        private func makeGetQuery(_ clientSecret: String?, _ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(clientSecret, forKey: "client_secret")
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
        /// 
        /// <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.Source> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostSourcesSource")
        }

        public struct PostRequest: Encodable {
            /// Amount associated with the source.
            public var amount: Int?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Mandate_params
            ///
            /// Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
            public var mandate: Mandate?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?
            /// Information about the owner of the payment instrument that may be used or required by particular source types.
            public var owner: Owner?
            /// Order_params
            ///
            /// Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
            public var sourceOrder: SourceOrder?

            /// Mandate_params
            ///
            /// Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
            public struct Mandate: Encodable {
                /// Mandate_acceptance_params
                public var acceptance: Acceptance?
                public var amount: Amount?
                public var currency: String?
                public var interval: Interval?
                public var notificationMethod: NotificationMethod?

                /// Mandate_acceptance_params
                public struct Acceptance: Encodable {
                    public var date: Int?
                    public var ip: String?
                    /// Mandate_offline_acceptance_params
                    public var offline: Offline?
                    /// Mandate_online_acceptance_params
                    public var online: Online?
                    public var status: Status
                    public var type: `Type`?
                    public var userAgent: String?

                    /// Mandate_offline_acceptance_params
                    public struct Offline: Encodable {
                        public var contactEmail: String

                        public init(contactEmail: String) {
                            self.contactEmail = contactEmail
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(contactEmail, forKey: "contact_email")
                            return encoder.items
                        }
                    }

                    /// Mandate_online_acceptance_params
                    public struct Online: Encodable {
                        public var date: Int?
                        public var ip: String?
                        public var userAgent: String?

                        public init(date: Int? = nil, ip: String? = nil, userAgent: String? = nil) {
                            self.date = date
                            self.ip = ip
                            self.userAgent = userAgent
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(date, forKey: "date")
                            encoder.encode(ip, forKey: "ip")
                            encoder.encode(userAgent, forKey: "user_agent")
                            return encoder.items
                        }
                    }

                    public enum Status: String, Codable, CaseIterable {
                        case accepted
                        case pending
                        case refused
                        case revoked
                    }

                    public enum `Type`: String, Codable, CaseIterable {
                        case offline
                        case online
                    }

                    public init(date: Int? = nil, ip: String? = nil, offline: Offline? = nil, online: Online? = nil, status: Status, type: `Type`? = nil, userAgent: String? = nil) {
                        self.date = date
                        self.ip = ip
                        self.offline = offline
                        self.online = online
                        self.status = status
                        self.type = type
                        self.userAgent = userAgent
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(date, forKey: "date")
                        encoder.encode(ip, forKey: "ip")
                        encoder.encode(offline, forKey: "offline")
                        encoder.encode(online, forKey: "online")
                        encoder.encode(status, forKey: "status")
                        encoder.encode(type, forKey: "type")
                        encoder.encode(userAgent, forKey: "user_agent")
                        return encoder.items
                    }
                }

                public struct Amount: Encodable {
                    public var int: Int?
                    public var object: Object?

                    public enum Object: String, Codable, CaseIterable {
                        case empty = ""
                    }

                    public init(int: Int? = nil, object: Object? = nil) {
                        self.int = int
                        self.object = object
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(int, forKey: "int")
                        encoder.encode(object, forKey: "object")
                        return encoder.items
                    }
                }

                public enum Interval: String, Codable, CaseIterable {
                    case oneTime = "one_time"
                    case scheduled
                    case variable
                }

                public enum NotificationMethod: String, Codable, CaseIterable {
                    case deprecatedNone = "deprecated_none"
                    case email
                    case manual
                    case `none`
                    case stripeEmail = "stripe_email"
                }

                public init(acceptance: Acceptance? = nil, amount: Amount? = nil, currency: String? = nil, interval: Interval? = nil, notificationMethod: NotificationMethod? = nil) {
                    self.acceptance = acceptance
                    self.amount = amount
                    self.currency = currency
                    self.interval = interval
                    self.notificationMethod = notificationMethod
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(acceptance, forKey: "acceptance")
                    encoder.encode(amount, forKey: "amount")
                    encoder.encode(currency, forKey: "currency")
                    encoder.encode(interval, forKey: "interval")
                    encoder.encode(notificationMethod, forKey: "notification_method")
                    return encoder.items
                }
            }

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// Information about the owner of the payment instrument that may be used or required by particular source types.
            public struct Owner: Encodable {
                /// Source_address
                public var address: Address?
                public var email: String?
                public var name: String?
                public var phone: String?

                /// Source_address
                public struct Address: Encodable {
                    public var city: String?
                    public var country: String?
                    public var line1: String?
                    public var line2: String?
                    public var postalCode: String?
                    public var state: String?

                    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                        self.city = city
                        self.country = country
                        self.line1 = line1
                        self.line2 = line2
                        self.postalCode = postalCode
                        self.state = state
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(city, forKey: "city")
                        encoder.encode(country, forKey: "country")
                        encoder.encode(line1, forKey: "line1")
                        encoder.encode(line2, forKey: "line2")
                        encoder.encode(postalCode, forKey: "postal_code")
                        encoder.encode(state, forKey: "state")
                        return encoder.items
                    }
                }

                public init(address: Address? = nil, email: String? = nil, name: String? = nil, phone: String? = nil) {
                    self.address = address
                    self.email = email
                    self.name = name
                    self.phone = phone
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(address, forKey: "address")
                    encoder.encode(email, forKey: "email")
                    encoder.encode(name, forKey: "name")
                    encoder.encode(phone, forKey: "phone")
                    return encoder.items
                }
            }

            /// Order_params
            ///
            /// Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
            public struct SourceOrder: Encodable {
                public var items: [Item]?
                /// Order_shipping
                public var shipping: Shipping?

                /// Order_item_specs
                public struct Item: Encodable {
                    public var amount: Int?
                    public var currency: String?
                    public var description: String?
                    public var parent: String?
                    public var quantity: Int?
                    public var type: `Type`?

                    public enum `Type`: String, Codable, CaseIterable {
                        case discount
                        case shipping
                        case sku
                        case tax
                    }

                    public init(amount: Int? = nil, currency: String? = nil, description: String? = nil, parent: String? = nil, quantity: Int? = nil, type: `Type`? = nil) {
                        self.amount = amount
                        self.currency = currency
                        self.description = description
                        self.parent = parent
                        self.quantity = quantity
                        self.type = type
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(amount, forKey: "amount")
                        encoder.encode(currency, forKey: "currency")
                        encoder.encode(description, forKey: "description")
                        encoder.encode(parent, forKey: "parent")
                        encoder.encode(quantity, forKey: "quantity")
                        encoder.encode(type, forKey: "type")
                        return encoder.items
                    }
                }

                /// Order_shipping
                public struct Shipping: Encodable {
                    public var address: Address
                    public var carrier: String?
                    public var name: String?
                    public var phone: String?
                    public var trackingNumber: String?

                    public struct Address: Encodable {
                        public var city: String?
                        public var country: String?
                        public var line1: String
                        public var line2: String?
                        public var postalCode: String?
                        public var state: String?

                        public init(city: String? = nil, country: String? = nil, line1: String, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
                            self.city = city
                            self.country = country
                            self.line1 = line1
                            self.line2 = line2
                            self.postalCode = postalCode
                            self.state = state
                        }

                        public var asQuery: [(String, String?)] {
                            let encoder = URLQueryEncoder()
                            encoder.encode(city, forKey: "city")
                            encoder.encode(country, forKey: "country")
                            encoder.encode(line1, forKey: "line1")
                            encoder.encode(line2, forKey: "line2")
                            encoder.encode(postalCode, forKey: "postal_code")
                            encoder.encode(state, forKey: "state")
                            return encoder.items
                        }
                    }

                    public init(address: Address, carrier: String? = nil, name: String? = nil, phone: String? = nil, trackingNumber: String? = nil) {
                        self.address = address
                        self.carrier = carrier
                        self.name = name
                        self.phone = phone
                        self.trackingNumber = trackingNumber
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(address, forKey: "address")
                        encoder.encode(carrier, forKey: "carrier")
                        encoder.encode(name, forKey: "name")
                        encoder.encode(phone, forKey: "phone")
                        encoder.encode(trackingNumber, forKey: "tracking_number")
                        return encoder.items
                    }
                }

                public init(items: [Item]? = nil, shipping: Shipping? = nil) {
                    self.items = items
                    self.shipping = shipping
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(items, forKey: "items")
                    encoder.encode(shipping, forKey: "shipping")
                    return encoder.items
                }
            }

            public init(amount: Int? = nil, expand: [String]? = nil, mandate: Mandate? = nil, metadata: Metadata? = nil, owner: Owner? = nil, sourceOrder: SourceOrder? = nil) {
                self.amount = amount
                self.expand = expand
                self.mandate = mandate
                self.metadata = metadata
                self.owner = owner
                self.sourceOrder = sourceOrder
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(amount, forKey: "amount")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(mandate, forKey: "mandate")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(owner, forKey: "owner")
                encoder.encode(sourceOrder, forKey: "source_order")
                return encoder.items
            }
        }
    }
}
