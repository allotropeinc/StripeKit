// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.PaymentMethods.WithPaymentMethod {
    public var attach: Attach {
        Attach(path: path + "/attach")
    }

    public struct Attach {
        /// Path: `/v1/payment_methods/{payment_method}/attach`
        public let path: String

        /// <p>Attaches a PaymentMethod object to a Customer.</p>
        /// 
        /// <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
        /// or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
        /// These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code>
        /// endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for
        /// future use, which makes later declines and payment friction more likely.
        /// See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up
        /// future payments.</p>
        /// 
        /// <p>To use this PaymentMethod as the default for invoice or subscription payments,
        /// set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
        /// on the Customer to the PaymentMethodâ€™s ID.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.PaymentMethod> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostPaymentMethodsPaymentMethodAttach")
        }

        public struct PostRequest: Encodable {
            /// The ID of the customer to which to attach the PaymentMethod.
            public var customer: String
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?

            public init(customer: String, expand: [String]? = nil) {
                self.customer = customer
                self.expand = expand
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(customer, forKey: "customer")
                encoder.encode(expand, forKey: "expand")
                return encoder.items
            }
        }
    }
}
