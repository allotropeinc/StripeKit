// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.PaymentLinks {
    public func paymentLink(_ paymentLink: String) -> WithPaymentLink {
        WithPaymentLink(path: "\(path)/\(paymentLink)")
    }

    public struct WithPaymentLink {
        /// Path: `/v1/payment_links/{payment_link}`
        public let path: String

        /// <p>Retrieve a payment link.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.PaymentLink> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetPaymentLinksPaymentLink")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates a payment link.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.PaymentLink> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostPaymentLinksPaymentLink")
        }

        public struct PostRequest: Encodable {
            /// Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.
            public var isActive: Bool?
            /// After_completion_params
            ///
            /// Behavior after the purchase is complete.
            public var afterCompletion: AfterCompletion?
            /// Enables user redeemable promotion codes.
            public var allowPromotionCodes: Bool?
            /// Automatic_tax_params
            ///
            /// Configuration for automatic tax collection.
            public var automaticTax: AutomaticTax?
            /// Configuration for collecting the customer's billing address.
            public var billingAddressCollection: BillingAddressCollection?
            /// Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
            public var customerCreation: CustomerCreation?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
            public var lineItems: [LineItem]?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.
            public var metadata: [String: String]?
            /// Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.
            /// 
            /// Can only be set in `subscription` mode.
            /// 
            /// If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
            public var paymentMethodCollection: PaymentMethodCollection?
            /// The list of payment method types that customers can use. Pass an empty string to enable automatic payment methods that use your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).
            public var paymentMethodTypes: PaymentMethodTypes?
            /// Configuration for collecting the customer's shipping address.
            public var shippingAddressCollection: ShippingAddressCollection?

            /// After_completion_params
            ///
            /// Behavior after the purchase is complete.
            public struct AfterCompletion: Encodable {
                /// After_completion_confirmation_page_params
                public var hostedConfirmation: HostedConfirmation?
                /// After_completion_redirect_params
                public var redirect: Redirect?
                public var type: `Type`

                /// After_completion_confirmation_page_params
                public struct HostedConfirmation: Encodable {
                    public var customMessage: String?

                    public init(customMessage: String? = nil) {
                        self.customMessage = customMessage
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(customMessage, forKey: "custom_message")
                        return encoder.items
                    }
                }

                /// After_completion_redirect_params
                public struct Redirect: Encodable {
                    public var url: String

                    public init(url: String) {
                        self.url = url
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(url, forKey: "url")
                        return encoder.items
                    }
                }

                public enum `Type`: String, Codable, CaseIterable {
                    case hostedConfirmation = "hosted_confirmation"
                    case redirect
                }

                public init(hostedConfirmation: HostedConfirmation? = nil, redirect: Redirect? = nil, type: `Type`) {
                    self.hostedConfirmation = hostedConfirmation
                    self.redirect = redirect
                    self.type = type
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(hostedConfirmation, forKey: "hosted_confirmation")
                    encoder.encode(redirect, forKey: "redirect")
                    encoder.encode(type, forKey: "type")
                    return encoder.items
                }
            }

            /// Automatic_tax_params
            ///
            /// Configuration for automatic tax collection.
            public struct AutomaticTax: Encodable {
                public var isEnabled: Bool

                public init(isEnabled: Bool) {
                    self.isEnabled = isEnabled
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(isEnabled, forKey: "enabled")
                    return encoder.items
                }
            }

            /// Configuration for collecting the customer's billing address.
            public enum BillingAddressCollection: String, Codable, CaseIterable {
                case auto
                case required
            }

            /// Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
            public enum CustomerCreation: String, Codable, CaseIterable {
                case always
                case ifRequired = "if_required"
            }

            /// Line_items_update_params
            public struct LineItem: Encodable {
                /// Adjustable_quantity_params
                public var adjustableQuantity: AdjustableQuantity?
                public var id: String
                public var quantity: Int?

                /// Adjustable_quantity_params
                public struct AdjustableQuantity: Encodable {
                    public var isEnabled: Bool
                    public var maximum: Int?
                    public var minimum: Int?

                    public init(isEnabled: Bool, maximum: Int? = nil, minimum: Int? = nil) {
                        self.isEnabled = isEnabled
                        self.maximum = maximum
                        self.minimum = minimum
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(isEnabled, forKey: "enabled")
                        encoder.encode(maximum, forKey: "maximum")
                        encoder.encode(minimum, forKey: "minimum")
                        return encoder.items
                    }
                }

                public init(adjustableQuantity: AdjustableQuantity? = nil, id: String, quantity: Int? = nil) {
                    self.adjustableQuantity = adjustableQuantity
                    self.id = id
                    self.quantity = quantity
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(adjustableQuantity, forKey: "adjustable_quantity")
                    encoder.encode(id, forKey: "id")
                    encoder.encode(quantity, forKey: "quantity")
                    return encoder.items
                }
            }

            /// Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.
            /// 
            /// Can only be set in `subscription` mode.
            /// 
            /// If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
            public enum PaymentMethodCollection: String, Codable, CaseIterable {
                case always
                case ifRequired = "if_required"
            }

            /// The list of payment method types that customers can use. Pass an empty string to enable automatic payment methods that use your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).
            public struct PaymentMethodTypes: Encodable {
                public var placeholderItems: [PlaceholderItem]?
                public var object: Object?

                public enum PlaceholderItem: String, Codable, CaseIterable {
                    case affirm
                    case afterpayClearpay = "afterpay_clearpay"
                    case alipay
                    case auBecsDebit = "au_becs_debit"
                    case bacsDebit = "bacs_debit"
                    case bancontact
                    case blik
                    case boleto
                    case card
                    case eps
                    case fpx
                    case giropay
                    case grabpay
                    case ideal
                    case klarna
                    case konbini
                    case oxxo
                    case p24
                    case paynow
                    case promptpay
                    case sepaDebit = "sepa_debit"
                    case sofort
                    case usBankAccount = "us_bank_account"
                    case wechatPay = "wechat_pay"
                }

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(placeholderItems: [PlaceholderItem]? = nil, object: Object? = nil) {
                    self.placeholderItems = placeholderItems
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(placeholderItems, forKey: "placeholderItems")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// Configuration for collecting the customer's shipping address.
            public struct ShippingAddressCollection: Encodable {
                /// Shipping_address_collection_params
                public var a: A?
                public var b: B?

                /// Shipping_address_collection_params
                public struct A: Encodable {
                    public var allowedCountries: [AllowedCountry]

                    public enum AllowedCountry: String, Codable, CaseIterable {
                        case ac = "AC"
                        case ad = "AD"
                        case ae = "AE"
                        case af = "AF"
                        case ag = "AG"
                        case ai = "AI"
                        case al = "AL"
                        case am = "AM"
                        case ao = "AO"
                        case aq = "AQ"
                        case ar = "AR"
                        case at = "AT"
                        case au = "AU"
                        case aw = "AW"
                        case ax = "AX"
                        case az = "AZ"
                        case ba = "BA"
                        case bb = "BB"
                        case bd = "BD"
                        case be = "BE"
                        case bf = "BF"
                        case bg = "BG"
                        case bh = "BH"
                        case bi = "BI"
                        case bj = "BJ"
                        case bl = "BL"
                        case bm = "BM"
                        case bn = "BN"
                        case bo = "BO"
                        case bq = "BQ"
                        case br = "BR"
                        case bs = "BS"
                        case bt = "BT"
                        case bv = "BV"
                        case bw = "BW"
                        case by = "BY"
                        case bz = "BZ"
                        case ca = "CA"
                        case cd = "CD"
                        case cf = "CF"
                        case cg = "CG"
                        case ch = "CH"
                        case ci = "CI"
                        case ck = "CK"
                        case cl = "CL"
                        case cm = "CM"
                        case cn = "CN"
                        case co = "CO"
                        case cr = "CR"
                        case cv = "CV"
                        case cw = "CW"
                        case cy = "CY"
                        case cz = "CZ"
                        case de = "DE"
                        case dj = "DJ"
                        case dk = "DK"
                        case dm = "DM"
                        case `do` = "DO"
                        case dz = "DZ"
                        case ec = "EC"
                        case ee = "EE"
                        case eg = "EG"
                        case eh = "EH"
                        case er = "ER"
                        case es = "ES"
                        case et = "ET"
                        case fi = "FI"
                        case fj = "FJ"
                        case fk = "FK"
                        case fo = "FO"
                        case fr = "FR"
                        case ga = "GA"
                        case gb = "GB"
                        case gd = "GD"
                        case ge = "GE"
                        case gf = "GF"
                        case gg = "GG"
                        case gh = "GH"
                        case gi = "GI"
                        case gl = "GL"
                        case gm = "GM"
                        case gn = "GN"
                        case gp = "GP"
                        case gq = "GQ"
                        case gr = "GR"
                        case gs = "GS"
                        case gt = "GT"
                        case gu = "GU"
                        case gw = "GW"
                        case gy = "GY"
                        case hk = "HK"
                        case hn = "HN"
                        case hr = "HR"
                        case ht = "HT"
                        case hu = "HU"
                        case id = "ID"
                        case ie = "IE"
                        case il = "IL"
                        case im = "IM"
                        case `in` = "IN"
                        case io = "IO"
                        case iq = "IQ"
                        case `is` = "IS"
                        case it = "IT"
                        case je = "JE"
                        case jm = "JM"
                        case jo = "JO"
                        case jp = "JP"
                        case ke = "KE"
                        case kg = "KG"
                        case kh = "KH"
                        case ki = "KI"
                        case km = "KM"
                        case kn = "KN"
                        case kr = "KR"
                        case kw = "KW"
                        case ky = "KY"
                        case kz = "KZ"
                        case la = "LA"
                        case lb = "LB"
                        case lc = "LC"
                        case li = "LI"
                        case lk = "LK"
                        case lr = "LR"
                        case ls = "LS"
                        case lt = "LT"
                        case lu = "LU"
                        case lv = "LV"
                        case ly = "LY"
                        case ma = "MA"
                        case mc = "MC"
                        case md = "MD"
                        case me = "ME"
                        case mf = "MF"
                        case mg = "MG"
                        case mk = "MK"
                        case ml = "ML"
                        case mm = "MM"
                        case mn = "MN"
                        case mo = "MO"
                        case mq = "MQ"
                        case mr = "MR"
                        case ms = "MS"
                        case mt = "MT"
                        case mu = "MU"
                        case mv = "MV"
                        case mw = "MW"
                        case mx = "MX"
                        case my = "MY"
                        case mz = "MZ"
                        case na = "NA"
                        case nc = "NC"
                        case ne = "NE"
                        case ng = "NG"
                        case ni = "NI"
                        case nl = "NL"
                        case no = "NO"
                        case np = "NP"
                        case nr = "NR"
                        case nu = "NU"
                        case nz = "NZ"
                        case om = "OM"
                        case pa = "PA"
                        case pe = "PE"
                        case pf = "PF"
                        case pg = "PG"
                        case ph = "PH"
                        case pk = "PK"
                        case pl = "PL"
                        case pm = "PM"
                        case pn = "PN"
                        case pr = "PR"
                        case ps = "PS"
                        case pt = "PT"
                        case py = "PY"
                        case qa = "QA"
                        case re = "RE"
                        case ro = "RO"
                        case rs = "RS"
                        case ru = "RU"
                        case rw = "RW"
                        case sa = "SA"
                        case sb = "SB"
                        case sc = "SC"
                        case se = "SE"
                        case sg = "SG"
                        case sh = "SH"
                        case si = "SI"
                        case sj = "SJ"
                        case sk = "SK"
                        case sl = "SL"
                        case sm = "SM"
                        case sn = "SN"
                        case so = "SO"
                        case sr = "SR"
                        case ss = "SS"
                        case st = "ST"
                        case sv = "SV"
                        case sx = "SX"
                        case sz = "SZ"
                        case ta = "TA"
                        case tc = "TC"
                        case td = "TD"
                        case tf = "TF"
                        case tg = "TG"
                        case th = "TH"
                        case tj = "TJ"
                        case tk = "TK"
                        case tl = "TL"
                        case tm = "TM"
                        case tn = "TN"
                        case to = "TO"
                        case tr = "TR"
                        case tt = "TT"
                        case tv = "TV"
                        case tw = "TW"
                        case tz = "TZ"
                        case ua = "UA"
                        case ug = "UG"
                        case us = "US"
                        case uy = "UY"
                        case uz = "UZ"
                        case va = "VA"
                        case vc = "VC"
                        case ve = "VE"
                        case vg = "VG"
                        case vn = "VN"
                        case vu = "VU"
                        case wf = "WF"
                        case ws = "WS"
                        case xk = "XK"
                        case ye = "YE"
                        case yt = "YT"
                        case za = "ZA"
                        case zm = "ZM"
                        case zw = "ZW"
                        case zz = "ZZ"
                    }

                    public init(allowedCountries: [AllowedCountry]) {
                        self.allowedCountries = allowedCountries
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(allowedCountries, forKey: "allowed_countries")
                        return encoder.items
                    }
                }

                public enum B: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(a: A? = nil, b: B? = nil) {
                    self.a = a
                    self.b = b
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(a, forKey: "a")
                    encoder.encode(b, forKey: "b")
                    return encoder.items
                }
            }

            public init(isActive: Bool? = nil, afterCompletion: AfterCompletion? = nil, allowPromotionCodes: Bool? = nil, automaticTax: AutomaticTax? = nil, billingAddressCollection: BillingAddressCollection? = nil, customerCreation: CustomerCreation? = nil, expand: [String]? = nil, lineItems: [LineItem]? = nil, metadata: [String: String]? = nil, paymentMethodCollection: PaymentMethodCollection? = nil, paymentMethodTypes: PaymentMethodTypes? = nil, shippingAddressCollection: ShippingAddressCollection? = nil) {
                self.isActive = isActive
                self.afterCompletion = afterCompletion
                self.allowPromotionCodes = allowPromotionCodes
                self.automaticTax = automaticTax
                self.billingAddressCollection = billingAddressCollection
                self.customerCreation = customerCreation
                self.expand = expand
                self.lineItems = lineItems
                self.metadata = metadata
                self.paymentMethodCollection = paymentMethodCollection
                self.paymentMethodTypes = paymentMethodTypes
                self.shippingAddressCollection = shippingAddressCollection
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isActive, forKey: "active")
                encoder.encode(afterCompletion, forKey: "after_completion")
                encoder.encode(allowPromotionCodes, forKey: "allow_promotion_codes")
                encoder.encode(automaticTax, forKey: "automatic_tax")
                encoder.encode(billingAddressCollection, forKey: "billing_address_collection")
                encoder.encode(customerCreation, forKey: "customer_creation")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(lineItems, forKey: "line_items")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(paymentMethodCollection, forKey: "payment_method_collection")
                encoder.encode(paymentMethodTypes, forKey: "payment_method_types")
                encoder.encode(shippingAddressCollection, forKey: "shipping_address_collection")
                return encoder.items
            }
        }
    }
}
