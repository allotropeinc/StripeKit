// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.TestHelpers.TestClocks.WithTestClock {
    public var advance: Advance {
        Advance(path: path + "/advance")
    }

    public struct Advance {
        /// Path: `/v1/test_helpers/test_clocks/{test_clock}/advance`
        public let path: String

        /// <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.TestHelpersTestClock> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostTestHelpersTestClocksTestClockAdvance")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// The time to advance the test clock. Must be after the test clock's current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
            public var frozenTime: Int

            public init(expand: [String]? = nil, frozenTime: Int) {
                self.expand = expand
                self.frozenTime = frozenTime
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(frozenTime, forKey: "frozen_time")
                return encoder.items
            }
        }
    }
}
