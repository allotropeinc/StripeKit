// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Invoiceitems {
    public func invoiceitem(_ invoiceitem: String) -> WithInvoiceitem {
        WithInvoiceitem(path: "\(path)/\(invoiceitem)")
    }

    public struct WithInvoiceitem {
        /// Path: `/v1/invoiceitems/{invoiceitem}`
        public let path: String

        /// <p>Retrieves the invoice item with the given ID.</p>
        public func get(expand: [String]? = nil) -> Request<StripeKit.Invoiceitem> {
            Request(method: "GET", url: path, query: makeGetQuery(expand), id: "GetInvoiceitemsInvoiceitem")
        }

        private func makeGetQuery(_ expand: [String]?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand", isDeepObject: true)
            return encoder.items
        }

        /// <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice itâ€™s attached to is closed.</p>
        public func post(_ body: PostRequest? = nil) -> Request<StripeKit.Invoiceitem> {
            Request(method: "POST", url: path, body: body.map(URLQueryEncoder.encode)?.percentEncodedQuery, id: "PostInvoiceitemsInvoiceitem")
        }

        public struct PostRequest: Encodable {
            /// The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount.
            public var amount: Int?
            /// An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.
            public var description: String?
            /// Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. Cannot be set to true for prorations.
            public var isDiscountable: Bool?
            /// The coupons & existing discounts which apply to the invoice item or invoice line item. Item discounts are applied before invoice discounts. Pass an empty string to remove previously-defined discounts.
            public var discounts: Discounts?
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public var metadata: Metadata?
            /// The period associated with this invoice item. When set to different values, the period will be rendered on the invoice.
            public var period: Period?
            /// The ID of the price object.
            public var price: String?
            /// One_time_price_data
            ///
            /// Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline.
            public var priceData: PriceData?
            /// Non-negative integer. The quantity of units for the invoice item.
            public var quantity: Int?
            /// The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. Pass an empty string to remove previously-defined tax rates.
            public var taxRates: TaxRates?
            /// The integer unit amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. This unit_amount will be multiplied by the quantity to get the full amount. If you want to apply a credit to the customer's account, pass a negative unit_amount.
            public var unitAmount: Int?
            /// Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
            public var unitAmountDecimal: String?

            /// The coupons & existing discounts which apply to the invoice item or invoice line item. Item discounts are applied before invoice discounts. Pass an empty string to remove previously-defined discounts.
            public struct Discounts: Encodable {
                public var placeholderItems: [PlaceholderItem]?
                public var object: Object?

                /// Discounts_data_param
                public struct PlaceholderItem: Encodable {
                    public var coupon: String?
                    public var discount: String?

                    public init(coupon: String? = nil, discount: String? = nil) {
                        self.coupon = coupon
                        self.discount = discount
                    }

                    public var asQuery: [(String, String?)] {
                        let encoder = URLQueryEncoder()
                        encoder.encode(coupon, forKey: "coupon")
                        encoder.encode(discount, forKey: "discount")
                        return encoder.items
                    }
                }

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(placeholderItems: [PlaceholderItem]? = nil, object: Object? = nil) {
                    self.placeholderItems = placeholderItems
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(placeholderItems, forKey: "placeholderItems")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
            public struct Metadata: Encodable {
                public var stringString: [String: String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(stringString: [String: String]? = nil, object: Object? = nil) {
                    self.stringString = stringString
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(stringString, forKey: "stringString")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            /// The period associated with this invoice item. When set to different values, the period will be rendered on the invoice.
            public struct Period: Encodable {
                public var end: Int
                public var start: Int

                public init(end: Int, start: Int) {
                    self.end = end
                    self.start = start
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(end, forKey: "end")
                    encoder.encode(start, forKey: "start")
                    return encoder.items
                }
            }

            /// One_time_price_data
            ///
            /// Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline.
            public struct PriceData: Encodable {
                public var currency: String
                public var product: String
                public var taxBehavior: TaxBehavior?
                public var unitAmount: Int?
                public var unitAmountDecimal: String?

                public enum TaxBehavior: String, Codable, CaseIterable {
                    case exclusive
                    case inclusive
                    case unspecified
                }

                public init(currency: String, product: String, taxBehavior: TaxBehavior? = nil, unitAmount: Int? = nil, unitAmountDecimal: String? = nil) {
                    self.currency = currency
                    self.product = product
                    self.taxBehavior = taxBehavior
                    self.unitAmount = unitAmount
                    self.unitAmountDecimal = unitAmountDecimal
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(currency, forKey: "currency")
                    encoder.encode(product, forKey: "product")
                    encoder.encode(taxBehavior, forKey: "tax_behavior")
                    encoder.encode(unitAmount, forKey: "unit_amount")
                    encoder.encode(unitAmountDecimal, forKey: "unit_amount_decimal")
                    return encoder.items
                }
            }

            /// The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. Pass an empty string to remove previously-defined tax rates.
            public struct TaxRates: Encodable {
                public var strings: [String]?
                public var object: Object?

                public enum Object: String, Codable, CaseIterable {
                    case empty = ""
                }

                public init(strings: [String]? = nil, object: Object? = nil) {
                    self.strings = strings
                    self.object = object
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(strings, forKey: "strings")
                    encoder.encode(object, forKey: "object")
                    return encoder.items
                }
            }

            public init(amount: Int? = nil, description: String? = nil, isDiscountable: Bool? = nil, discounts: Discounts? = nil, expand: [String]? = nil, metadata: Metadata? = nil, period: Period? = nil, price: String? = nil, priceData: PriceData? = nil, quantity: Int? = nil, taxRates: TaxRates? = nil, unitAmount: Int? = nil, unitAmountDecimal: String? = nil) {
                self.amount = amount
                self.description = description
                self.isDiscountable = isDiscountable
                self.discounts = discounts
                self.expand = expand
                self.metadata = metadata
                self.period = period
                self.price = price
                self.priceData = priceData
                self.quantity = quantity
                self.taxRates = taxRates
                self.unitAmount = unitAmount
                self.unitAmountDecimal = unitAmountDecimal
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(amount, forKey: "amount")
                encoder.encode(description, forKey: "description")
                encoder.encode(isDiscountable, forKey: "discountable")
                encoder.encode(discounts, forKey: "discounts")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(metadata, forKey: "metadata")
                encoder.encode(period, forKey: "period")
                encoder.encode(price, forKey: "price")
                encoder.encode(priceData, forKey: "price_data")
                encoder.encode(quantity, forKey: "quantity")
                encoder.encode(taxRates, forKey: "tax_rates")
                encoder.encode(unitAmount, forKey: "unit_amount")
                encoder.encode(unitAmountDecimal, forKey: "unit_amount_decimal")
                return encoder.items
            }
        }

        /// <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when theyâ€™re not attached to invoices, or if itâ€™s attached to a draft invoice.</p>
        public var delete: Request<StripeKit.DeletedInvoiceitem> {
            Request(method: "DELETE", url: path, id: "DeleteInvoiceitemsInvoiceitem")
        }
    }
}
