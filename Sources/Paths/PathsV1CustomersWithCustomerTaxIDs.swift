// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Customers.WithCustomer {
    public var taxIDs: TaxIDs {
        TaxIDs(path: path + "/tax_ids")
    }

    public struct TaxIDs {
        /// Path: `/v1/customers/{customer}/tax_ids`
        public let path: String

        /// <p>Returns a list of tax IDs for a customer.</p>
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "GetCustomersCustomerTaxIds")
        }

        /// TaxIDsList
        public struct GetResponse: Decodable {
            /// Details about each object.
            public var data: [StripeKit.TaxID]
            /// True if this list has another page of items after this one that can be fetched.
            public var hasMore: Bool
            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public var object: Object
            /// The URL where this list can be accessed.
            public var url: String

            /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
            public enum Object: String, Codable, CaseIterable {
                case list
            }

            public init(data: [StripeKit.TaxID], hasMore: Bool, object: Object, url: String) {
                self.data = data
                self.hasMore = hasMore
                self.object = object
                self.url = url
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.data = try values.decode([StripeKit.TaxID].self, forKey: "data")
                self.hasMore = try values.decode(Bool.self, forKey: "has_more")
                self.object = try values.decode(Object.self, forKey: "object")
                self.url = try values.decode(String.self, forKey: "url")
            }
        }

        public struct GetParameters {
            public var endingBefore: String?
            public var expand: [String]?
            public var limit: Int?
            public var startingAfter: String?

            public init(endingBefore: String? = nil, expand: [String]? = nil, limit: Int? = nil, startingAfter: String? = nil) {
                self.endingBefore = endingBefore
                self.expand = expand
                self.limit = limit
                self.startingAfter = startingAfter
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(endingBefore, forKey: "ending_before")
                encoder.encode(expand, forKey: "expand", isDeepObject: true)
                encoder.encode(limit, forKey: "limit")
                encoder.encode(startingAfter, forKey: "starting_after")
                return encoder.items
            }
        }

        /// <p>Creates a new <code>TaxID</code> object for a customer.</p>
        public func post(_ body: PostRequest) -> Request<StripeKit.TaxID> {
            Request(method: "POST", url: path, body: URLQueryEncoder.encode(body).percentEncodedQuery, id: "PostCustomersCustomerTaxIds")
        }

        public struct PostRequest: Encodable {
            /// Specifies which fields in the response should be expanded.
            public var expand: [String]?
            /// Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `bg_uic`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`
            public var type: `Type`
            /// Value of the tax ID.
            public var value: String

            /// Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `bg_uic`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`
            public enum `Type`: String, Codable, CaseIterable {
                case aeTrn = "ae_trn"
                case auAbn = "au_abn"
                case auArn = "au_arn"
                case bgUic = "bg_uic"
                case brCnpj = "br_cnpj"
                case brCpf = "br_cpf"
                case caBn = "ca_bn"
                case caGstHst = "ca_gst_hst"
                case caPstBc = "ca_pst_bc"
                case caPstMb = "ca_pst_mb"
                case caPstSk = "ca_pst_sk"
                case caQst = "ca_qst"
                case chVat = "ch_vat"
                case clTin = "cl_tin"
                case esCif = "es_cif"
                case euOssVat = "eu_oss_vat"
                case euVat = "eu_vat"
                case gbVat = "gb_vat"
                case geVat = "ge_vat"
                case hkBr = "hk_br"
                case huTin = "hu_tin"
                case idNpwp = "id_npwp"
                case ilVat = "il_vat"
                case inGst = "in_gst"
                case isVat = "is_vat"
                case jpCn = "jp_cn"
                case jpRn = "jp_rn"
                case krBrn = "kr_brn"
                case liUid = "li_uid"
                case mxRfc = "mx_rfc"
                case myFrp = "my_frp"
                case myItn = "my_itn"
                case mySst = "my_sst"
                case noVat = "no_vat"
                case nzGst = "nz_gst"
                case ruInn = "ru_inn"
                case ruKpp = "ru_kpp"
                case saVat = "sa_vat"
                case sgGst = "sg_gst"
                case sgUen = "sg_uen"
                case siTin = "si_tin"
                case thVat = "th_vat"
                case twVat = "tw_vat"
                case uaVat = "ua_vat"
                case usEin = "us_ein"
                case zaVat = "za_vat"
            }

            public init(expand: [String]? = nil, type: `Type`, value: String) {
                self.expand = expand
                self.type = type
                self.value = value
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(expand, forKey: "expand")
                encoder.encode(type, forKey: "type")
                encoder.encode(value, forKey: "value")
                return encoder.items
            }
        }
    }
}
